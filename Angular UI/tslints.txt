package com.gtl;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.collections.MultiHashMap;
import org.apache.commons.logging.LogFactory;
import org.apache.xerces.dom.ChildNode;
import org.apache.xpath.axes.ChildIterator;
import org.w3c.css.sac.CSSException;
import org.w3c.css.sac.CSSParseException;
import org.w3c.css.sac.ErrorHandler;

import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.IncorrectnessListener;
import com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController;
import com.gargoylesoftware.htmlunit.ScriptException;
import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.DomElement;
import com.gargoylesoftware.htmlunit.html.HTMLParserListener;
import com.gargoylesoftware.htmlunit.html.HtmlAnchor;
import com.gargoylesoftware.htmlunit.html.HtmlButton;
import com.gargoylesoftware.htmlunit.html.HtmlDivision;
import com.gargoylesoftware.htmlunit.html.HtmlElement;
import com.gargoylesoftware.htmlunit.html.HtmlForm;
import com.gargoylesoftware.htmlunit.html.HtmlInput;
import com.gargoylesoftware.htmlunit.html.HtmlLabel;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.html.HtmlSpan;
import com.gargoylesoftware.htmlunit.html.HtmlTable;
import com.gargoylesoftware.htmlunit.html.HtmlTableBody;
import com.gargoylesoftware.htmlunit.html.HtmlTableCell;
import com.gargoylesoftware.htmlunit.html.HtmlTableRow;
import com.gargoylesoftware.htmlunit.javascript.JavaScriptErrorListener;
import com.gargoylesoftware.htmlunit.javascript.host.event.Event;
import com.gargoylesoftware.htmlunit.util.Cookie;
import edu.uci.ics.crawler4j.crawler.Page;
import edu.uci.ics.crawler4j.crawler.WebCrawler;
import edu.uci.ics.crawler4j.url.WebURL;
import net.sourceforge.htmlunit.corejs.javascript.ast.SwitchCase;

public class Crawler extends WebCrawler{

	public static Statement statement = null;
	public static Connection connect = null;
	
	public static PreparedStatement psVagVeh = null;
	public static PreparedStatement psVagVehlog = null;
	public static PreparedStatement psVehGen = null;
	public static PreparedStatement psVehGenOrg = null;
	// public static PreparedStatement psVehLR = null;
	public static ResultSet rowRS = null;
	public static ResultSet rowWMI = null;
	public static ResultSet rs = null;
	public static ResultSet rsPrVin = null;

	static HashMap<String, String> hmPrVinVAG=new HashMap<String,String>();
	static HashMap<String, String> hmPrVinPOR=new HashMap<String,String>();
	static HashMap<String, List<String>> hmPrGrpDesc = new HashMap<String, List<String>>();
	static HashMap<String, String> hmPrVinLR=new HashMap<String,String>();

	public static WebClient webClient;
	static HtmlPage htmlPage;
	static String vin;
	static int apiKeyId;
	static String Title;
	static String Service;
	static String MakeName;
	static String login;
	
	//	static String oesId="70.38.78.212_autoit";
	//  static String oesId="70.38.78.212_api3";
	//  static String oesId="70.38.78.212_romnes";
		static String oesId="70.38.78.212_autopass";
	//  static String oesId = "70.38.78.212_norway";
	//  static String oesId = "202.131.103.45_atoy";
	//  static String oesId = "70.38.78.212_atoy";
	//	static String oesId = "202.131.103.45_atoy";
	//	static String oesId = "202.131.103.45_web";
	//  static String oesId = "70.38.78.212_skruvat";
	//	static String oesId = "70.38.78.212_koivunen";
	//	static String oesId = "70.38.78.212_selectag";
	//	static String oesId = "70.38.78.212_vengno";
	//	static String oesId = "70.38.78.212_helanor";
	//	static String oesId = "70.38.78.212_cacdk";
	//	static String oesId = "70.38.78.212_lkq";
	//  static String oesId = "70.38.78.212_cacdk_backlog_processing";
	// static String oesId = "70.38.78.212_backlog_descorder";

	static String serverId = "2";
	
	//	static String tableName = "notfoundvin_norway";
		static String tableName = "notfoundvin";
	
	static int allowedDailyLimit = 500;
	
	static int dailylimit_api = 100;
	
	static boolean apilimitReached=false;
	
	static String allowedAPIKeyIds = null;	 
	
	static String allowedAPIKeyIdsOrg = null;	 

	static int vinsPerSession = 10;

	static int delayTimeInSeconds = 10;
	
	public static int account_id;
	// variables for login to parts24 site
	public static String companyId;
	public static String username;
	public static String password;
	public static int accountNo;
	public static int lastAccountNo;

	static Date startdate;
	static long starttime;
	static Date enddate;
	static long endtime;

	public static int failed_count=0;
	public static int counter = 0;
	public static int currentAC;
	public static int rowCount = 0;
	public static String regNo="", vinNo="", make = "",model="",partsMapModel=null,engine=null,transmissionNo="",driveType="",bodyType="",orgBodyType=null,kW="",PS="",engineCapacity="",
			fuelType="",fuelMixture="",yearOfProd="",dateOfProd="",doors="",grade="",transmission="",driveSide="",weatherType="",
			exteriorColor="",interiorColor="",marketCode="",combNo="",engineNo="",engineCode="",transCode="",transmissionCode="",kmph="",factoryCode="",
			steerProdNo="",structureWeek="",type="",chassis="",partnerGroup="",upholIntCode="",extColorCode = "",bodyStyleCode="",
			specialVehCode="",specialVeh="",salesTypeCode="",salesType="",market="",enginePartNo="",engineSerialNo="",transPartNo="",
			transSerialNo="",chassisCode="",modelDesignation="",series="",typeCode="",orderId="",motorNo="",euApprovDate="",euApprovNo="",
			salesTerm="",regDate="",packageCode="",engineType="",modelCode="",dam="",startOfWarr="",carBody="",prodType="",
			trimLevel="",speSpec="",modelYear="",modifDurModYear="",paintType="",intTrimType="",marketTrimLevel=null,marketVer=null,ecology=null,
			posTerr="",emissReq="",airCond="",finalDriveRatio="",version="",wheelBase="",cabStyle="",intFabric="",prodFrom="",prodTo="",
			picNo="",vpNo="",suspension="",cabin="",serialNos=null,pet=null;


	public static String modelOrg=null,engineOrg=null,transOrg=null,steeringOrg=null,transaxleOrg=null,distAreaOrg=null,driveBmwMini=null,liqCapBmwMini=null,ecKiaHyundai=null,
			aggMercSmart=null,vpdDataMercSmart="",commMarCompTypeCitroenPeugeot=null,silhoutteCitroenPeugeot=null,gearboxInfiniti=null,classMitsubishi=null,optionMitsubishi=null,
			model1FARJL=null,model2FARJL=null,chassisFARJL=null,allfieldsFARJL="",suspensionIveco=null,picIveco=null,vpIveco=null,cabinIveco=null,serialNosIveco=null,petMAN=null,
			descMAN=null;



	public static String str1 = null,str2 = null,str3 = null,str4 = null,str5=null,str6=null,str7=null,str8=null,str9=null,str10=null,str11=null,
			str12 = null,str13 = null,str14 = null,str15 = null,str16=null,str17=null,str18=null,str19=null,str20=null,str21=null,str22=null,
			str23 = null,str24 = null,str25 = null,str26 = null,str27=null,str28=null,str29=null,str30=null,str31=null;

	//			connect = DriverManager.getConnection("jdbc:mysql://10.0.3.235:3306/vindata_additional", "vindata","v#jb4a-#!F#?~>GY");
	//			connect = DriverManager.getConnection("jdbc:mysql://10.0.1.43:3306/vindata_additional", "vis_user","Vis256$$");
	//			connect = DriverManager.getConnection("jdbc:mysql://localhost:3306/vindata_additional", "ADAP_DevTeam","@lpha256$$");   //70.38.78.212
	//			connect = DriverManager.getConnection("jdbc:mysql://10.0.2.4:3307/vindata_additional_local","ADAP_team","@lpha256$");   // To test In Local
	//			connect = DriverManager.getConnection("jdbc:mysql://localhost:33061/vindata_additional", "ADAP_DevTeam","@lpha256$$");   //INAP02 (174.142.6.16)
	static 
	{
		try 
		{
			try 
			{
				Class.forName("com.mysql.jdbc.Driver");
			} 
			catch (ClassNotFoundException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("connection successfull");
			 //	connect = DriverManager.getConnection("jdbc:mysql://10.0.1.43:3306/vindata_additional", "vis_user","Vis256$$");
			 //	connect = DriverManager.getConnection("jdbc:mysql://localhost:3306/vindata_additional", "ADAP_DevTeam","@lpha256$$"); 	  //INAP01 (70.38.78.212)
		      connect = DriverManager.getConnection("jdbc:mysql://localhost:33061/vindata_additional", "ADAP_DevTeam","@lpha256$$");   //INAP02 (174.142.6.16)
			 //	 connect = DriverManager.getConnection("jdbc:mysql://10.0.2.4:3307/vindata_additional_local","ADAP_team","@lpha256$"); 
			 //	connect = DriverManager.getConnection("jdbc:mysql://10.0.1.149:3306/vindata_additional","root","gtl123");
			
			psVehGen = connect.prepareStatement("insert into vindata_general(RegNo,VIN,Make,Model,PartsMappingModel,Engine,Transmission,DriveType,BodyType,OriginalBodyType,"
					+ "kW,PS,EngineCapacity,"
					+ "FuelType,FuelMixture,YearOfProd,DateOfProd,Doors,Grade,DriveSide,WeatherType,ExteriorColor,InteriorColor,MarketCode,CombNo,EngineNo,"
					+ "EngineCode,TransmissionNo,TransCode,TransmissionCode,Equipment,OptEquipment,Kmph,FactoryCode,SteerProdNo,StructureWeek,Type,Chassis,PartnerGroup,UpholsteryIntCode,"
					+ "ExteriorColorCode,BodyStyleCode,SpecialVehCode,SpecialVeh,SalesTypeCode,SalesType,Market,EnginePartNo,EngineSerialNo,"
					+ "TransPartNo,TransSerialNo,ChassisCode,Options,ModelDesignation,Series,TypeCode,OrderId,MotorNo,EUApprovDate,EUApprovNo,SalesTerm,"
					+ "RegDate,PackageCode,EngineType,ModelCode,DAM,StartOfWarr,CarBody,ProductType,TrimLevel,SpecialSpec,ModelYear,ModifDurModYear,"
					+ "PaintType,IntTrimType,MarketTrimLevel_ALMC,MarketVersion_AM,"
					+ "Ecology,PosTerritories,EmissionReq,AirCond,FinalDriveRatio,Version,WheelBase,CabStyle,InteriorFabric,ProdFrom,ProdTo,APIKeyId) "
					+ "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
					+ "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

			psVehGenOrg = connect.prepareStatement("insert into vindata_allbrandsOriginal(VIN,Make,Model,Engine,Transmission,Steering,Transaxle,DistributionArea,"
					+ "Drive_Bmw_Mini,LiquidCap_BMW_Mini,EC_Kia_Hyundai,Aggregates_Merc_Smart,VPDData_Merc_Smart,CommMarqueCompType_Citroen_Peugeot,"
					+ "Silhoutte_Citroen_Peugeot,Gearbox_Infiniti,Classification_Mitsubishi,Option_Mitsubishi,Model1_Fiat_AlfaRomeo_Jeep_Lancia,"
					+ "Model2_Fiat_AlfaRomeo_Jeep_Lancia,Chassis_Fiat_AlfaRomeo_Jeep_Lancia,AllFields_Fiat_AlfaRomeo_Jeep_Lancia,Suspension_Iveco,"
					+ "PIC_Iveco,VP_Iveco,Cabin_Iveco,SerialNos_Iveco,Pet_MAN,Description_MAN,APIKeyId) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			

//			psVehLR = connect.prepareStatement("insert into vindata_landrover(VIN,Make,Model,VehicleLine,DateOfProd,EngineType,Transmission,Emission,CabStyle,Drive,DriveRatio,ExteriorPaint,AirConditioning,Series,InteriorFabric,Territories,APIKeyId)"
//					+ " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private final static Pattern BINARY_FILES_EXTENSIONS = Pattern.compile(".*\\.(bmp|gif|jpe?g|png|tiff?|pdf|ico|xaml|pict|rif|pptx?|ps|mid|mp2|mp3|mp4|wav|wma"
			+ "|au|aiff|flac|ogg|3gp|aac|amr|au|vox|avi|mov|mpe?g|ra?m|m4v|smil|wm?v|swf|aaf|asf|flv|mkv|zip|rar|gz|7z|aac|ace|alz|apk|arc|arj|dmg|jar|lzip|lha)"
			+ "(\\?.*)?$");

	@Override
	public boolean shouldVisit(Page page, WebURL url) {
		// TODO Auto-generated method stub
		String href = url.getURL().toLowerCase();
		return !BINARY_FILES_EXTENSIONS.matcher(href).matches() && href.startsWith("https://www.partslink24.com");
	}

	public void Initialize() 
	{
		str1 = null;str2 = null;str3 = null;str4 = null;str5=null;str6=null;str7=null;str8=null;str9=null;str10=null;str11=null;
		str12 = null;str13 = null;str14 = null;str15 = null;str16=null;str17=null;str18=null;str19=null;str20=null;str21=null;
		str22=null;str23 = null;str24 = null;str25 = null;str26 = null;str27=null;str28=null;str29=null;str30=null;str31=null;
		vin = null;
		regNo=""; vinNo=""; make = "";model="";partsMapModel=null;engine=null;transmissionNo="";driveType="";bodyType="";orgBodyType=null;kW="";PS="";engineCapacity="";
		fuelType="";fuelMixture="";yearOfProd="";dateOfProd="";doors="";grade="";transmission="";driveSide="";weatherType="";
		exteriorColor="";interiorColor="";marketCode="";combNo="";engineNo="";engineCode="";transCode="";transmissionCode="";kmph="";factoryCode="";
		steerProdNo="";structureWeek="";type="";chassis="";partnerGroup="";upholIntCode="";extColorCode = "";bodyStyleCode="";
		specialVehCode="";specialVeh="";salesTypeCode="";salesType="";market="";enginePartNo="";engineSerialNo="";transPartNo="";
		transSerialNo="";chassisCode="";modelDesignation="";series="";typeCode="";orderId="";motorNo="";euApprovDate="";euApprovNo="";
		salesTerm="";regDate="";packageCode="";engineType="";modelCode="";dam="";startOfWarr="";carBody="";prodType="";
		trimLevel="";speSpec="";modelYear="";modifDurModYear="";paintType="";intTrimType="";marketTrimLevel=null;marketVer=null;ecology=null;
		posTerr="";emissReq="";airCond="";finalDriveRatio="";version="";wheelBase="";cabStyle="";intFabric="";prodFrom="";prodTo="";
		picNo="";vpNo="";suspension="";cabin="";serialNos=null;pet=null;

		modelOrg=null;engineOrg=null;transOrg=null;steeringOrg=null;transaxleOrg=null;distAreaOrg=null;driveBmwMini=null;liqCapBmwMini=null;
		ecKiaHyundai=null;aggMercSmart=null;vpdDataMercSmart="";commMarCompTypeCitroenPeugeot=null;silhoutteCitroenPeugeot=null;gearboxInfiniti=null;
		classMitsubishi=null;optionMitsubishi=null;model1FARJL=null;model2FARJL=null;chassisFARJL=null;allfieldsFARJL="";suspensionIveco=null;
		picIveco=null;vpIveco=null;cabinIveco=null;serialNosIveco=null;petMAN=null;descMAN=null;	
	}

	@Override
	public void visit(Page page) 
	{
		// TODO Auto-generated method stub
		try 
		{
			String pageUrl = page.getWebURL().getURL();

			LogFactory.getFactory().setAttribute("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");

			Logger.getLogger("com.gargoylesoftware.htmlunit").setLevel(Level.OFF); 
			Logger.getLogger("org.apache.commons.httpclient").setLevel(Level.OFF);
			Logger.getLogger("org.apache.http").setLevel(Level.OFF);
			Logger.getAnonymousLogger().setLevel(Level.OFF);

			fetchAccount();

			String countquery = "select COUNT(*) as count from "+tableName+" where IsFound IN (1,2) AND CompanyId='"+companyId+"' "
					+ "AND (createdate LIKE CONCAT('%',DATE(NOW()),'%') or updatedate LIKE CONCAT('%',DATE(NOW()),'%'))";
			String query = "select distinct(VINNumber), APIKeyId from "+tableName+" where IsFound=0 limit " + vinsPerSession;
//			String countquery_api="";
//			String dailylimitquery_api="";
			if(allowedAPIKeyIds != null)
			{
				countquery = "select COUNT(*) as count from "+tableName+" where IsFound IN (1,2) and APIKeyId IN ("+allowedAPIKeyIdsOrg+") "
						+ "AND CompanyId='"+companyId+"' AND (createdate LIKE CONCAT('%',DATE(NOW()),'%') or updatedate LIKE CONCAT('%',DATE(NOW()),'%'))";
				
				
			}
			
			String queryPrVin="SELECT distinct `PrNumber` FROM `vagproptions`";
			Statement stPrVin=connect.createStatement();
			rsPrVin=stPrVin.executeQuery(queryPrVin);
			//int i=1;

			while (rsPrVin.next())
			{
				hmPrVinVAG.put(rsPrVin.getString("PrNumber"),rsPrVin.getString("PrNumber"));
			}

			queryPrVin="SELECT distinct `PrNumber` FROM `porscheproptions`";
			stPrVin=connect.createStatement();
			rsPrVin=stPrVin.executeQuery(queryPrVin);

			while (rsPrVin.next())
			{
				hmPrVinPOR.put(rsPrVin.getString("PrNumber"),rsPrVin.getString("PrNumber"));
			}
			while(true)
			{
				boolean limitReached = false;
				Initialize();
				Statement countst = connect.createStatement();
				ResultSet countRS = countst.executeQuery(countquery);
				if (!countRS.isBeforeFirst()) 
				{
				}
				else {
					countRS.beforeFirst();
					while (countRS.next()) 
					{
						if(countRS.getInt("count") > allowedDailyLimit)
						{
							limitReached = true;
							allowedAPIKeyIds=allowedAPIKeyIdsOrg;
						}
						else if(countRS.getInt("count")==0) {
							allowedAPIKeyIds=allowedAPIKeyIdsOrg;
						}
					}
				}
				if(!limitReached)
				{
					if(allowedAPIKeyIds!=null) {
						query = "select distinct(VINNumber), APIKeyId from "+tableName+" where IsFound=0 and APIKeyId IN ("+allowedAPIKeyIds+")  limit " + vinsPerSession;
					}
					
					if(!allowedAPIKeyIds.isEmpty()) 
					{
					Statement st = connect.createStatement();
					rowRS = st.executeQuery(query);


					if (!rowRS.isBeforeFirst()) 
					{
						//System.out.println("result set is null::");
					} 
					else 
					{
						// result set found then check login
						if (webClient == null) 
						{
							webClient = new WebClient(BrowserVersion.CHROME);
							webClient.getOptions().setJavaScriptEnabled(true);
							webClient.getOptions().setRedirectEnabled(true);
							webClient.getOptions().setCssEnabled(false);
							webClient.getCookieManager().setCookiesEnabled(true);
							webClient.setAjaxController(new NicelyResynchronizingAjaxController());
							webClient.getOptions().setThrowExceptionOnScriptError(false);
							webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);
							webClient.setCssErrorHandler(new SilentCssErrorHandler());
							webClient.setIncorrectnessListener(new IncorrectnessListener() {

								@Override
								public void notify(String arg0, Object arg1) {
									// TODO Auto-generated method stub

								}
							});
							webClient.setCssErrorHandler(new ErrorHandler() {

								public void warning(CSSParseException exception) throws CSSException {
									// TODO Auto-generated method stub

								}

								public void fatalError(CSSParseException exception) throws CSSException {
									// TODO Auto-generated method stub

								}

								public void error(CSSParseException exception) throws CSSException {
									// TODO Auto-generated method stub

								}
							});
							webClient.setJavaScriptErrorListener(new JavaScriptErrorListener() {

								@Override
								public void timeoutError(HtmlPage arg0, long arg1, long arg2) {
									// TODO Auto-generated method stub

								}

								@Override
								public void scriptException(HtmlPage arg0, ScriptException arg1) {
									// TODO Auto-generated method stub

								}

								@Override
								public void malformedScriptURL(HtmlPage arg0, String arg1, MalformedURLException arg2) {
									// TODO Auto-generated method stub

								}

								@Override
								public void loadScriptError(HtmlPage arg0, URL arg1, Exception arg2) {
									// TODO Auto-generated method stub

								}
							});
							webClient.setHTMLParserListener(new HTMLParserListener() {

								@Override
								public void error(String arg0, URL arg1, String arg2, int arg3, int arg4, String arg5) {
									// TODO Auto-generated method stub

								}

								@Override
								public void warning(String arg0, URL arg1, String arg2, int arg3, int arg4, String arg5) {
									// TODO Auto-generated method stub

								}
							});

						}

						gotoHomePage();

						if (!htmlPage.asText().toLowerCase().contains("log out")) 
						{
							// means not logged in then log in to site
							fetchAccount();
							login(pageUrl); //Login method call
						}

						rowRS.beforeFirst();
						while (rowRS.next()) 
						{
							if(login != null)
							{
								startdate = new Date();
								starttime = startdate.getTime();

								System.out.println("" + starttime);

								Initialize();
								 apilimitReached = false;
								vin = rowRS.getString("VINNumber");	
								apiKeyId=rowRS.getInt("APIKeyId");
								// Daily Limit Based on API 
								if(allowedAPIKeyIds != null) {
									if(allowedAPIKeyIds.contains(String.valueOf(apiKeyId))) {
										checkApiDailyLimit(apiKeyId);
//									countquery_api = "select COUNT(*) as count from "+tableName+" where IsFound IN (1,2) and APIKeyId='"+apiKeyId+"' "
//											+ "AND CompanyId='"+companyId+"' AND (createdate LIKE CONCAT('%',DATE(NOW()),'%') or updatedate LIKE CONCAT('%',DATE(NOW()),'%'))";
//									dailylimitquery_api= "SELECT allowedDailyLimit FROM `oeservice_api_dailylimit` WHERE account_id='"+account_id+"' AND apikey_id='"+apiKeyId+"'";
//								
//									Statement dailylimit_apist = connect.createStatement();
//									ResultSet dailylimit_apiRS = dailylimit_apist.executeQuery(dailylimitquery_api);
//									if (!dailylimit_apiRS.isBeforeFirst()) 
//									{
//									}
//									else 
//									{
//										
//										dailylimit_apiRS.beforeFirst();
//										while(dailylimit_apiRS.next()) {
//											dailylimit_api = dailylimit_apiRS.getInt("allowedDailyLimit");
//										}
//								
//									Statement countapist = connect.createStatement();
//									ResultSet countapiRS = countapist.executeQuery(countquery_api);
//									if (!countapiRS.isBeforeFirst()) 
//									{
//									}
//									else
//									{	
//										countapiRS.beforeFirst();
//										while (countapiRS.next()) 
//										{
//											
//											if(countapiRS.getInt("count") > dailylimit_api)
//											{
//												 apilimitReached = true;
//												 if(allowedAPIKeyIds.indexOf(String.valueOf(apiKeyId))==0) {
//													 allowedAPIKeyIds=allowedAPIKeyIds.replace(String.valueOf(apiKeyId)+",", "");
//												 }else {
//													 allowedAPIKeyIds=allowedAPIKeyIds.replace(","+String.valueOf(apiKeyId), "");
//												 }
//												
//											}
//										}
//									}
//									countapist.close();
//									}
//								
//									dailylimit_apist.close();
								}else {
									apilimitReached = true;
								}
								}
								
								if(!apilimitReached){
								
								System.out.println(vin);

								Service = null;
								MakeName = null;
								Title = null;
								String wmi1 = vin.substring(0, 3);
								String wmi2 = vin.substring(0, 2);
								Statement stm = connect.createStatement();
								boolean findforvin = false;
								rowWMI = stm.executeQuery("SELECT DISTINCT Service,Make,Title FROM wmicodes WHERE WMI='"+wmi1+"'");
								if (!rowWMI.isBeforeFirst()) 
								{
									findforvin = false;
									stm = connect.createStatement();
									rowWMI = stm.executeQuery("SELECT DISTINCT Service,Make,Title FROM wmicodes WHERE WMI='"+wmi2+"'");
									if (!rowWMI.isBeforeFirst()) 
									{
										findforvin = false;
										IsFound2();
									} else {
										findforvin = true;
									}
								} 
								else 
								{
									findforvin = true;
								}
								if(findforvin) 
								{
									counter++; //Increment counter after getting VIN
									rowWMI.beforeFirst();
									while (rowWMI.next()) 
									{
										Service = rowWMI.getString("Service");
										MakeName = rowWMI.getString("Make");
										Title = rowWMI.getString("Title");
									}
									boolean allowSearch = true;
									if(MakeName == null)
									{
										allowSearch = false;
										IsFound2();
									}
									else if(Service.equals("VAG") || Service.equals("POR"))
									{
										String queryVinDupCheck="select VIN from `vindata_entry` where VIN ='" + vin + "'";
										Statement stVinDupCheck = connect.createStatement();
										ResultSet rsVinDupCheck = stVinDupCheck.executeQuery(queryVinDupCheck);

										if (rsVinDupCheck.next())
										{
											allowSearch = false;
											IsFound1();
										}
										else
										{
											queryVinDupCheck="select VIN from `vagvisinfo` where VIN ='" + vin + "'";
											stVinDupCheck = connect.createStatement();
											rsVinDupCheck = stVinDupCheck.executeQuery(queryVinDupCheck);

											if (rsVinDupCheck.next())
											{
												allowSearch = false;
												IsFound1();
											}
										}
									}
								
									else
									{
										String queryVinDupCheck="select VIN from `vindata_general` where VIN ='" + vin + "'";
										Statement stVinDupCheck = connect.createStatement();
										ResultSet rsVinDupCheck = stVinDupCheck.executeQuery(queryVinDupCheck);

										if (rsVinDupCheck.next())
										{
											allowSearch = false;
											IsFound1();
										}
									}

									if(allowSearch)
									{
										if (htmlPage.asText().toLowerCase().contains("error 403")) 
										{
											HandleForbidden();
										} 
										else 
										{
											//									Thread.sleep(5000);
											HtmlForm mainPageSearchForm = null;
											try {
												mainPageSearchForm = htmlPage.getFormByName("search-text");
											}
											catch(Exception e)
											{
												mainPageSearchForm = null;
											}

											if(mainPageSearchForm != null)
											{
												mainPageSearchForm.getInputByName("text").setValueAttribute(vin);										

												HtmlDivision div = htmlPage.getFirstByXPath("//div[@class='search-btn']");
												if(div != null)
												{
													htmlPage = div.click();
													String str = null;					
													if(htmlPage.asText().contains("The entered VIN could not be assigned to a distinct model."))
													{			

														noDataFound();
													} 
													else if(htmlPage.asText().toLowerCase().contains("error 500")) 
													{
														HandleInternalServer();
													} 
													else if (htmlPage.asText().contains("No data was found for the searched vehicle identification number (VIN)")) 
													{
														System.out.println("NO DATA FOUND:::::::");


														noDataFound();
													}
													else if(htmlPage.asText().contains("Service is currently unavailable. Please try again shortly."))
													{
														System.out.println("SERVICE CURRENTLY UNAVAILABLE:::::::");										
														serviceUnavail();										
													}

													else if(htmlPage.asText().contains("No model version available for this VIN"))
													{
														System.out.println("NO MODEL VERSION AVAILABLE:::::::");										
														noModelVersion();						
													}
													else 
													{	
														if(htmlPage.asText().contains("No data card available"))
														{
															//											System.out.println("No data card available:::::::");										
															IsFound2();						
														}

														else if(htmlPage.getElementById("vinTabsGeneral") != null || 
																htmlPage.getElementById("vinDialog") != null)
														{
															scrape();
														}
														else {
															if(htmlPage.asXml().contains("nav-vinCatalogCandidates-container"))
															{
																HtmlTableCell tb=htmlPage.getFirstByXPath("//*[@id='nav-vinCatalogCandidates-container']/div[1]/table/thead/tr/td[1]");
																str=tb.asText();
																System.out.println(str);
															}
															else if(htmlPage.asXml().contains("nav-modelTypeCandidates-container"))
															{
																HtmlTableCell tb=htmlPage.getFirstByXPath("//*[@id='nav-modelTypeCandidates-container']/div[1]/table/thead/tr/td[1]");
																str=tb.asText();
																System.out.println(str);
															}
															else
															{
																str="";
															}


															if (htmlPage.asText().contains("Assortment"))
															{
																HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-identCandidates-table0']/td[1]/a");
																htmlPage = restrict1.click();

																scrape();
															}
															else if (htmlPage.asText().contains("Product group"))
															{
																HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-identCandidates-table0']/td[1]/a");
																htmlPage = restrict1.click();

																scrape();
															}
															else if (htmlPage.asText().toLowerCase().contains("partnergroup"))
															{
																System.out.println("Page contains Partnergroup:::::");							
																if(htmlPage.asText().contains("Nordic") && htmlPage.getAnchorByText("Nordic") != null)
																{
																	HtmlAnchor partgrp=htmlPage.getAnchorByText("Nordic");
																	htmlPage = partgrp.click();
																}
																else if(htmlPage.asText().contains("Europe") && htmlPage.getAnchorByText("Europe") != null)
																{
																	HtmlAnchor partgrp=htmlPage.getAnchorByText("Europe");
																	htmlPage = partgrp.click();
																}
																else if(htmlPage.asText().contains("International") && htmlPage.getAnchorByText("International") != null)
																{
																	HtmlAnchor partgrp=htmlPage.getAnchorByText("International");
																	htmlPage = partgrp.click();
																}	
																else
																{
																	HtmlElement partgrptbl = htmlPage.querySelector(".tc-table");
																	if(partgrptbl != null)
																	{
																		HtmlElement partgrpbody = partgrptbl.querySelector("tbody");
																		if(partgrpbody != null)
																		{
																			HtmlElement partgrp = partgrptbl.querySelector("td");
																			htmlPage = partgrp.click();
																		}
																	}
																}

																scrape();
															}
															else if (htmlPage.asText().contains("Restrictions I"))
															{
																HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-restriction1-table0']/td/a");
																if(restrict1!=null)
																{
																	htmlPage = restrict1.click();

																	if (htmlPage.asText().contains("Restrictions II")) 
																	{
																		HtmlAnchor restrict2 = htmlPage.getFirstByXPath("//*[@id='_nav-restriction2-table0']/td/a");
																		htmlPage = restrict2.click();
																	}
																}

																scrape();
															} 
															else if (htmlPage.asText().contains("Prefix"))
															{
																HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-types-table0']/td[1]/a");
																htmlPage = restrict1.click();

																scrape();
															}
															else if (str.equals("Model") || str.equals("catalog")) 
															{
																HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-vinCatalogCandidates-table0']/td[1]/a | //*[@id='_nav-modelTypeCandidates-table0']/td[1]/a");
																htmlPage = restrict1.click();

																scrape();
															} 
															else {
																scrape();
															}
														}
													}
												}
												else
												{
													noDataFound();
												}
											}
											else
											{
												noDataFound();
											}
										}	

										// r1 = new Random();
										// newcounter1 = r1.nextInt(high1-low1) + low1;

										Thread.sleep(delayTimeInSeconds * 1000);  //Sleep time of 10 seconds after every VIN
									}

									if(counter == vinsPerSession)
									{
										switchAccount();
										login(pageUrl);
										counter = 0;
										//									r = new Random();
										//									newcounter = r.nextInt(high-low) + low;
									}
								}
							} //end of while loop	
						  }
						}	
					} //end of else	
					st.close();
				}
				}
				countst.close();
			} // end of while true loop	 

		} //end of try
		catch (Exception e) 
		{
			try {
				insertError(e);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			try {
				visit(page);
			}
			catch(Exception e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		} 

	}

	public static void login(String pageUrl) throws Exception 
	{


		System.out.println("Count::"+rowCount);
		System.out.println("In visit CompanyId::"+companyId);
		System.out.println("In visit Username::"+username);
		System.out.println("In visit Password::"+password);
		System.out.println("In visit Account no::"+accountNo);
		
		login = null;

		htmlPage = webClient.getPage(pageUrl);

		Thread.sleep(3000);

		HtmlForm htmlForm = htmlPage.getFormByName("loginForm");
		if(htmlForm != null)
		{		
			htmlForm.getInputByName("accountLogin").setValueAttribute(companyId);
			htmlForm.getInputByName("userLogin").setValueAttribute(username);
			htmlForm.getInputByName("loginBean.password").setValueAttribute(password);

			DomElement hi=htmlPage.getElementById("inputPassword");
			hi.fireEvent(Event.TYPE_CHANGE);

			HtmlAnchor loginAnchor = htmlPage.getAnchorByHref("/partslink24/user/login.do#");
			htmlPage = loginAnchor.click();

			webClient.waitForBackgroundJavaScript(10000);

			if (htmlPage.asText().toLowerCase().contains("would you like to end the current session now and log in again?")) 
			{
				System.out.println("session message is on screen");
				HtmlAnchor confirmAnchor = htmlPage.getFirstByXPath("//*[@id='squeezeout-login-btn']");
				htmlPage = confirmAnchor.click();
			}

			else if(htmlPage.asText().contains("Your account is at the moment inactive. Please contact LexCom."))
			{
				String updQueryAc = "update oeservice_acs set active='N' where `companyId`='" + companyId + "'";
				PreparedStatement psAc = connect.prepareStatement(updQueryAc);
				psAc.executeUpdate();		

				//switch A/c credentials to next A/c and login

				switchAccount();

				login(pageUrl);
			}

			else if (!htmlPage.asText().toLowerCase().contains("log out")) 
			{
				String updQueryAc = "update oeservice_acs set active='N' where `companyId`='" + companyId + "'";
				PreparedStatement psAc = connect.prepareStatement(updQueryAc);
				psAc.executeUpdate();	

				switchAccount();

				login(pageUrl);
			}

			Set<Cookie> cookie = webClient.getCookieManager().getCookies();
			if (cookie != null) 
			{ 
				Iterator<Cookie> i = cookie.iterator();
				while (i.hasNext()) 
				{
					webClient.getCookieManager().addCookie(i.next());
				}

				login = "loggedin";

				System.out.println("Logged in successfully::::");
			} 
			else 
			{
				login = null;
			}

		}
		else 
		{
			login = null;
		}
	}

	public static void insertError(Exception e) throws Exception
	{
		e.printStackTrace();

		StringWriter writer = new StringWriter();
		PrintWriter printWriter = new PrintWriter( writer );
		e.printStackTrace( printWriter );
		printWriter.flush();
		String stackTrace = writer.toString();
		System.out.println("Stacktrace::"+stackTrace);

		System.out.println("Error URL::"+htmlPage.getUrl());
		Timestamp time=new Timestamp(new Date().getTime());
		IsFound3();

		String qError="insert into jarerrorlog(errorMessage,errorStacktrace,TimeStamp,oesId,vin) "
				+ "values('"+e.toString()+"','"+stackTrace+"','"+time+"','"+oesId+"','"+vin+"')";
		Statement stError=connect.createStatement();
		stError.executeUpdate(qError);
	}

	public static void HandleProxyError() throws Exception 
	{
		System.out.println("Proxy Error");

		IsFound2(); 
	}

	public static void serviceUnavail() throws Exception
	{
		HtmlButton btnNtFnd = htmlPage.getFirstByXPath("/html/body/div[5]/div[3]/div/button");
		if(btnNtFnd != null) {
			htmlPage = btnNtFnd.click();
		}

		IsFound2();

		System.out.println("BACK TO WELCOME PAGE::::");
	}

	public static void noModelVersion() throws Exception
	{
		HtmlButton btnNtFnd = htmlPage.getFirstByXPath("/html/body/div[5]/div[3]/div/button");
		htmlPage = btnNtFnd.click();

		IsFound2();

		System.out.println("BACK TO WELCOME PAGE::::");

	}

	public static void scrape() throws Exception 
	{

		if (htmlPage.asText().contains("No data was found for the searched vehicle identification number (VIN)")) 
		{
			System.out.println("NO DATA FOUND:::::::");


			noDataFound();
		} 

		else
		{
			//VAG (Volkswagen,Audi,Skoda,Seat)
			if(Service.equals("VAG") || Service.equals("POR"))
			{
				vag();
			}

			//VOLVO
			else if(Service.equals("VOL")) 
			{
				volvo();
			}

			//RENAULT			
			else if(Service.equals("REN"))
			{
				renault();
			}

			//KIA
			else if(Service.equals("KIA"))
			{
				kia();
			}

			//HYUNDAI
			else if(Service.equals("HYN"))
			{
				hyundai();
			}

			//BMW
			else if(Service.equals("BMW"))
			{
				bmw();
			}

			//MERCEDES
			else if(Service.equals("MER"))
			{
				mercedes();
			}

			//OPEL
			else if(Service.equals("OPL"))
			{
				opelvauxhall();
			}

			//FIAT
			else if(Service.equals("FAT"))
			{
				fiat();	
			}

			//Alfa Romeo
			else if(Service.equals("ALF"))
			{
				alfaromeo();
			}

			//Lancia
			else if(Service.equals("LAN"))
			{
				lancia();
			}

			//Jeep
			else if(Service.equals("JEP"))
			{
				jeep();
			}

			//CITROEN
			else if(Service.equals("CIT"))
			{
				citroen();
			}

			//Peugeot
			else if(Service.equals("PEU"))
			{
				peugeot();
			}

			//FORD
			else if(Service.equals("FOD"))
			{
				ford();
			}

			//Mini
			else if(Service.equals("MIN"))
			{
				mini();
			}

			//Infiniti
			else if(Service.equals("INF"))
			{
				infiniti();
			}

			//Nissan
			else if(Service.equals("NIS"))
			{
				nissan();
			}

			//Smart
			else if(Service.equals("SMA"))
			{
				smart();
			}

			//Mitsubishi
			else if(Service.equals("MIT"))
			{
				mitsubishi();
			}

			//Dacia
			else if (Service.equals("DAC"))
			{
				dacia();
			}

			//Iveco
			else if (Service.equals("IVC"))
			{
				iveco();
			}

			//MAN
			else if (Service.equals("MAN")) 
			{
				man();
			}
			//Land Rover
			else if(Service.equals("LR")) {
				landrover();
			}
			else 
			{
				IsFound2();
			}
		}
	}

	public static void landrover() throws Exception
	{
		make = "Land Rover";
		Thread.sleep(2000);
		HtmlDivision vehTable = htmlPage.getFirstByXPath("//div[@id='companion_and_content']/div[@id='companion_content']/div[@id='companion_vehicle_info']/div[2]/div[3]/div[1]//div[2]/div[1]/div[2]");
		
		if (vehTable != null) 
		{
			//			List<HtmlTableRow> vehRows = vehTable.getRows();

//			String date = null, str1 = null, str2 = null, str3 = null, str4 = null, str5 = null, str6 = null, str7 = null, str8 = null, 
//					str9 = null,str10=null,str11=null,str12 = null,str13=null,str14=null,str15=null;
			//			for (HtmlTableRow tr : vehRows) 
			//			{
			//				for (HtmlTableCell td : tr.getCells()) 
			//				{
			HtmlDivision vin = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Vehicle Identification No.']/div[2]"); //vin
			if(vin!= null) {
				vinNo = vin.asText();
			}
			
			HtmlDivision modeldiv=vehTable.getFirstByXPath("//div[@id='vinfoBasic_Model']/div[2]");  //model
			if(modeldiv!=null) {
				model=modeldiv.asText();
				model=model.replaceAll("\\s{2,}", " ");
			}
			
//			HtmlDivision VehicleLine = vehTable.getFirstByXPath("//div[2]/div[1]/div[2]/div[@id='vinfoBasic_Vehicle Line']/div[2]");  //Vehicle Line
//			if(VehicleLine!=null) {
//				str3 = VehicleLine.asText();
//			}

			HtmlDivision DateOfProd = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Date of production']/div[2]");  //DateOfProd
			if(DateOfProd!=null) {
			//	Jan 6, 1998
				dateOfProd = DateOfProd.asText().toUpperCase();
				yearOfProd = dateOfProd.substring(dateOfProd.length()-4,dateOfProd.length());
				switch (dateOfProd.substring(0,3)) {
				case "JAN":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "01" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "01" + yearOfProd;
					}
					break;
				case "FEB":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "02" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "02" + yearOfProd;
					}
					break;
				case "MAR":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "03" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "03" + yearOfProd;
					}
					break;
				case "APR":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "04" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "04" + yearOfProd;
					}
					break;
				case "MAY":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "05" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "05" + yearOfProd;
					}
					break;
				case "JUN":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "06" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "06" + yearOfProd;
					}
					break;
				case "JUL":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "07" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "07" + yearOfProd;
					}
					break;
				case "AUG":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "08" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "08" + yearOfProd;
					}
					break;
				case "SEP":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "09" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "09" + yearOfProd;
					}
					break;
				case "OCT":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "10" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "10" + yearOfProd;
					}
					break;
				case "NOV":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "11" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "11"
								+ "" + yearOfProd;
					}
					break;
				case "DEC":
					if(dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")).length()==1) {
						dateOfProd="0" + dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "12" + yearOfProd;
					}
					else {
						dateOfProd=dateOfProd.substring(dateOfProd.indexOf(" ")+1,dateOfProd.indexOf(",")) + "12" + yearOfProd;
					}
					break;
				default:
					break;
				}
				
			}

			HtmlDivision EngineType = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Engine Type']/div[2]");  //EngineType
			if(EngineType!=null) {
				engineType = EngineType.asText();
			}

			HtmlDivision Transmission = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Transmission']/div[2]");  //Transmission
			if(Transmission!=null) {
				transmission = Transmission.asText().toUpperCase();
				if(transmission.contains("MANUAL") || transmission.contains("MAN")) {
					if(transmission.contains("SPEED")) {
						transmission = transmission.substring(transmission.indexOf("SPEED")-2,transmission.indexOf("SPEED")-1) + "-speed" + " manual" + " transmission";
					}
					else if(transmission.contains("SPD")) {
						transmission = transmission.substring(transmission.indexOf("SPD")-2,transmission.indexOf("SPD")-1) + "-speed" + " manual" + " transmission";
					}
					else if(transmission.contains("SP ")) {
						transmission = transmission.substring(transmission.indexOf("SP")-2,transmission.indexOf("SP")-1) + "-speed" + " manual" + " transmission";
					}
				}
				else if(transmission.contains("AUTO") || transmission.contains("AUTOMATIC")) {
					if(transmission.contains("SPEED")) {
						transmission = transmission.substring(transmission.indexOf("SPEED")-2,transmission.indexOf("SPEED")-1) + "-speed" + " automatic" + " transmission";
					}
					else if(transmission.contains("SPD")) {
						transmission = transmission.substring(transmission.indexOf("SPD")-2,transmission.indexOf("SPD")-1) + "-speed" + " automatic" + " transmission";
					}
					else if(transmission.contains("SP ")) {
						transmission = transmission.substring(transmission.indexOf("SP")-2,transmission.indexOf("SP")-1) + "-speed" + " automatic" + " transmission";
					}
				}
			}
		
			HtmlDivision Emission = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Emission Requirements']/div[2]");  //Emission
			if(Emission!=null) {
				emissReq = Emission.asText();
			}

			HtmlDivision CabStyle = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Cab Style']/div[2]");  //CabStyle
			if(CabStyle!=null) {
				cabStyle = CabStyle.asText();
				doors = cabStyle.substring(0,1);
			}
		
			HtmlDivision Drive = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Drive']/div[2]");  //Drive
			if(Drive!=null) {
				driveSide = Drive.asText();
				if(driveSide.equals("LHD") || driveSide.equals("lhd")) {
					driveSide="Left hand drive";
				}
				else if(driveSide.equals("RHD") || driveSide.equals("rhd")) {
					driveSide="Right hand drive";
				}
			}

			HtmlDivision DriveRatio = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Final Drive Ratios']/div[2]");  //DriveRatio
			if(DriveRatio!=null) {
				finalDriveRatio = DriveRatio.asText();
			}

			HtmlDivision ExteriorPaint = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Exterior Paint']/div[2]");  //ExteriorPaint
			if(ExteriorPaint!=null) {
				exteriorColor = ExteriorPaint.asText();
			}

			HtmlDivision AirConditioning = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Air Conditioning']/div[2]");  //AirConditioning
			if(AirConditioning!=null) {
				airCond = AirConditioning.asText();
			}
			
			HtmlDivision Series = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Series']/div[2]");  //Series
			if(Series!=null) {
				series = Series.asText();
			}

			HtmlDivision InteriorFabric = vehTable.getFirstByXPath("//div[@id='vinfoBasic_Interior Fabric']/div[2]");  //InteriorFabric
			if(InteriorFabric!=null) {
				intFabric = InteriorFabric.asText();
			}
			
//			HtmlDivision Territories = vehTable.getFirstByXPath("//div[2]/div[1]/div[2]/div[@id='vinfoBasic_Territories']/div[2]");  //Territories
//			if(Territories!=null) {
//				str15 = Territories.asText();
//			}
		
			//				}
			//			}

			String equipLandrover = "";
			String optionsLandrover = "";
			HtmlDivision equipmentTable = htmlPage.getFirstByXPath("//div[@id='companion_and_content']/div[@id='companion_content']/div[@id='companion_vehicle_info']/div[2]/div[3]/div[2]/div[2]/div[1]/div[2]");
			int  listSize = equipmentTable.getChildElementCount();
//			hmPrVinLR = new HashMap<String,String>();
			for(int i = 0; i < listSize; i++){
				HtmlDivision Group =  htmlPage.getFirstByXPath("//div[@id='companion_and_content']/div[@id='companion_content']/div[@id='companion_vehicle_info']/div[2]/div[3]/div[2]/div[2]/div[1]/div[2]/div["+(i+1)+"]/div[1]");
				HtmlDivision GroupDesc = equipmentTable.getFirstByXPath("//div[@id='companion_and_content']/div[@id='companion_content']/div[@id='companion_vehicle_info']/div[2]/div[3]/div[2]/div[2]/div[1]/div[2]/div["+(i+1)+"]/div[2]");

				equipLandrover=equipLandrover+Group.asText()+"::"+GroupDesc.asText()+";";
				//equipCitroen=equipCitroen+code+"::"+group+"::"+description+";";
				equipLandrover=equipLandrover.replaceAll("\\s+"," ");
//				hmPrVinLR.put(Group.asText(),GroupDesc.asText());
			}
			if(equipLandrover.contains("AUTO GEARBOX") || equipLandrover.contains("Auto gearbox") || equipLandrover.contains("Automatic gearbox")
					|| equipLandrover.contains("AUTOMATIC GEARBOX"))
			{
				transmission="Automatic transmission";
			}
			else if (equipLandrover.contains("MANUAL GEARBOX") || equipLandrover.contains("Manual gearbox")) 
			{
				transmission="Manual transmission";
			}
			
			if(equipLandrover.contains("FUEL::LEAD FREE PETROL"))
			{
				fuelType="Petrol - Unleaded";
			}
			else if(equipLandrover.contains("FUEL::PETROL FUEL"))
			{
				fuelType="Petrol";
			}
			else if (equipLandrover.contains("FUEL::DIESEL FUEL")) 
			{
				fuelType="Diesel";
			}

			if(equipLandrover.contains("DRIVING POSITION::LEFT HAND DRIVE"))
			{
				driveSide="Left hand drive";
			}
			else if(equipLandrover.contains("DRIVING POSITION::RIGHT HAND DRIVE"))
			{
				driveSide="Right hand drive";
			}

// 			String s=str11.substring(str11.indexOf("/")+1, str11.length()).trim();
//			String ce = str3 + str3 + str4 + s.trim();
//
//
//			HtmlAnchor an=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
//			String vaga=an.getAttribute("title");
//			partsMapModel=vaga.substring(0, vaga.lastIndexOf(" "));
//
//			////////// SCRAPING PR NUMBERS///////////////
//
//			HtmlTable prTable = htmlPage.getFirstByXPath("//div[@id='vinTabsPrNumbers']/table[@class='vinInfoTable']");
//			int rowSize = prTable.getRows().size();
//			String prcodes = "";
//
//			for (int i = 0; i < rowSize; i++) 
//			{
//				prcodes += prTable.getCellAt(i, 1).getTextContent();
//			}
//
//			hmPrGrpDesc = new HashMap<String,List<String>>();
//
//			List<HtmlTableRow> prRows=prTable.getRows(); 
//
//			if(!prRows.isEmpty())
//			{
//				for(HtmlTableRow tr:prRows)
//				{
//					List<String> values = new ArrayList<String>();
//					values.add(tr.getCell(0).asText());
//					values.add(tr.getCell(2).asText());
//					hmPrGrpDesc.put(tr.getCell(1).asText(), values);
//
//				}
//			}
			//			VagVehicle v = new VagVehicle();
			//			String vin = v.setVin(str1);
			//			String model=v.setModel(str10);
			//			String salesType = v.setSalesType(str2);
			//			String colorEquip = v.setColorEquip(ce);
			//			String engineCode = v.setEngineCode(str5);
			//			String subModel = "";
			//			String transCode = v.setTransCode(str6);
			//			String axleCode = v.setAxleCode(str7);
			//			String dom = v.setDom(date);
			//			String spmod = "";
			//			String year = v.setYear(str9);
			//			String wmi = str1.substring(0, 3);
			//			String equipm = str4;
			//			String roofcol = str3;
			//			String carColCode = str12;
			//			String paintCode = str11;
			//			String seatcombNo = str13;
			//			String noofzorders = str14;
			String optEquip = "";
			insertIntoGenVehTable(equipLandrover, optEquip, optionsLandrover);

			// insertLRPrCodes(hmPrVinLR);

			// portal button click to get back to welcome page to search next VIN
			gotoHomePage();

		}
	}

	
	public static void man() throws Exception
	{
		make="MAN";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinDialog']/div[2]/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows();

		for (HtmlTableRow tr : vehRows) 
		{
			for (HtmlTableCell td : tr.getCells()) 
			{
				HtmlSpan type = td.getFirstByXPath("//*[@id='_infoTypeValue']");
				str1=type.asText();

				HtmlSpan typePet=htmlPage.getFirstByXPath("//*[@id='_infoTypePetValue']");
				str2=typePet.asText();

				HtmlSpan typeDesc = td.getFirstByXPath("//*[@id='_infoTypeDescriptionValue']");
				str3=typeDesc.asText();

				HtmlSpan viN = td.getFirstByXPath("//*[@id='_infoVinValue']");
				str4=viN.asText();

				HtmlSpan group = td.getFirstByXPath("//*[@id='_infoGroupValue']");
				str5=group.asText();

				HtmlSpan table = td.getFirstByXPath("//*[@id='_infoLayoutValue']");
				str6=table.asText();

				HtmlSpan refNo = td.getFirstByXPath("//*[@id='_infoReferenceNumberValue']");
				str7=refNo.asText();

				HtmlSpan refPet = td.getFirstByXPath("//*[@id='_infoReferencePetValue']");
				str8=refPet.asText();

				HtmlSpan refPat = td.getFirstByXPath("//*[@id='_infoReferencePatValue']");
				str9=refPat.asText();

				HtmlSpan refDesc = td.getFirstByXPath("//*[@id='_infoReferenceDescriptionValue']");
				str10=refDesc.asText();

			}
		}

		HtmlTableBody engineTable=htmlPage.getFirstByXPath("//*[@id='nav-engines-table']/tbody");
		List<HtmlTableRow> engineRows=engineTable.getRows();

		for (HtmlTableRow tr : engineRows) 
		{
			for (HtmlTableCell td : tr.getCells()) 
			{
				HtmlTableCell td1 = td.getFirstByXPath("//*[@id='_nav-engines-table0']/td[1]");
				str11=td1.asText();

				HtmlTableCell td2=htmlPage.getFirstByXPath("//*[@id='_nav-engines-table0']/td[2]");
				str12=td2.asText();

				HtmlTableCell td3 = td.getFirstByXPath("//*[@id='_nav-engines-table0']/td[3]");
				str13=td3.asText();				
			}
		}

		NoneVagVeh v=new NoneVagVeh();
		vinNo=v.setVinNo(str4);
		model=v.setModel(str3);
		if(model.contains("ME"))
		{
			model="ME";
			bodyType="Truck";
		}
		else if (model.contains("LE")) 
		{
			model="LE";
			bodyType="Truck";
		}
		else if (model.contains("TGL")) 
		{
			model="TGL";
			bodyType="Truck";
		}
		else if (model.contains("FE")) 
		{
			model="FE";
			bodyType="Truck";
		}
		else if (model.contains("CLA")) 
		{
			model="CLA";
			bodyType="Truck";
		}
		else if (model.contains("TGM")) 
		{
			model="TGM";
			bodyType="Truck";
		}
		else if (model.contains("TGA")) 
		{
			model="TGA";
			bodyType="Truck";
		}
		else if (model.contains("TGX")) 
		{
			model="TGX";
			bodyType="Truck";
		}
		else if (model.contains("TGS")) 
		{
			model="TGS";
			bodyType="Truck";
		}
		else if (model.contains("TGE")) 
		{
			model="TGE";
			bodyType="Truck";
		}
		else if (model.contains("HX")) 
		{
			model="HX";
			bodyType="Truck";
		}
		else if (model.contains("LX")) 
		{
			model="LX";
			bodyType="Truck";
		}
		else if (model.contains("FX")) 
		{
			model="FX";
			bodyType="Truck";
		}
		else if (model.contains("SX")) 
		{
			model="SX";
			bodyType="Truck";
		}
		else if (model.contains("LION'S COACH")) 
		{
			model="Lion's Coach";
			bodyType="Bus";
		}
		else if (model.contains("LION'S CITY")) 
		{
			model="Lion's City";
			bodyType="Bus";
		}
		else if (model.contains("LION'S INTERCTY")) 
		{
			model="Lion's Intercity";
			bodyType="Bus";
		}

		petMAN=str2;
		descMAN=str3;


		ManVehicle mv=new ManVehicle();
		String en=mv.setEngine3(str13);
		en=en.replaceFirst(" ", "");
		engine=en;
		String[] split=en.split(" ");
		String en1=split[0];
		String query="select `cc`,`fuel` from `man_enginecodes` where `engine` LIKE '%" + en1 + "%'";
		Statement stmt=connect.createStatement();
		ResultSet rs=stmt.executeQuery(query);
		if(rs.next())
		{
			engineCapacity=rs.getString("cc");
			fuelType=rs.getString("fuel");

		}

		String desc=mv.setTypeDesc(str3);

		if(desc.contains("4X2") || desc.contains("6X2"))
		{
			driveType="2 wheel drive";
		}
		else if (desc.contains("4X4") || desc.contains("6X4") || desc.contains("8X4")) 
		{
			driveType="4 wheel drive";
		}
		else if (desc.contains("6X6")) 
		{
			driveType="6 wheel drive";
		}
		else if (desc.contains("8X8")) 
		{
			driveType="8 wheel drive";
		}


		pet=mv.setTypePet(str2);

		typeCode=v.setTypeCode(str1);

		String equipMan = null,optionsMan = null, optEquip=null;

		insertIntoGenVehTable(equipMan, optEquip, optionsMan);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();


	}

	public static void iveco() throws Exception
	{
		make="Iveco";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		
		HashMap<String, String> hm=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		List<HtmlTableRow> subVehRows=vehRows.subList(0, 10);

		HashMap<String, String> hmSubVehRows=new HashMap<String,String>();
		for(HtmlTableRow tr:subVehRows)
		{
			hmSubVehRows.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		vinNo=hmSubVehRows.get("Vehicle Identification No.").toString();

		if(hmSubVehRows.containsKey("Engine"))
		{
			engine=hmSubVehRows.get("Engine").toString();
		}

		if(hmSubVehRows.containsKey("Steering"))
		{
			driveSide=hmSubVehRows.get("Steering").toString();
			if(driveSide.contains("LHD"))
			{
				driveSide="Left hand drive";
			}
			else if (driveSide.contains("RHD")) 
			{
				driveSide="Right hand drive";
			}
		}

		if(hmSubVehRows.containsKey("Suspension"))
		{
			suspension=hmSubVehRows.get("Suspension").toString();
			suspensionIveco=hmSubVehRows.get("Suspension").toString();
			String tr=hmSubVehRows.get("Suspension").toString();
			if(tr.contains("MECHANICAL") || tr.contains("PNEUMATIC"))
			{
				transmission="Manual transmission";
			}
			else if (tr.contains("EUROTRONIC")) 
			{
				transmission="Automatic transmission";
			}
			else if (tr.contains("MIXED")) 
			{
				transmission="";
			}
			else if(hmSubVehRows.containsKey("Transmission"))
			{
				transmission=hmSubVehRows.get("Transmission");
			}
			else{
				transmission="";
			}
		}	

		if(hmSubVehRows.containsKey("Version"))
		{
			version=hm.get("Version").toString();
			bodyType=hmSubVehRows.get("Version").toString();
			if(bodyType.contains("VAN"))
			{
				bodyType="Van";
			}
			else if(bodyType.contains("CITY BUS"))
			{
				bodyType="City bus";
			}
			else if (bodyType.contains("CHASSIS BUS"))
			{
				bodyType="Chassis bus";
			}
			else if (bodyType.contains("BUS")) 
			{
				bodyType="Bus";
			}
			else if (bodyType.contains("TRUCK")) 
			{
				bodyType="Truck";
			}
			else{
				bodyType="";
			}
		}

		if(hmSubVehRows.containsKey("Wheel base"))
		{
			wheelBase=hmSubVehRows.get("Wheel base").toString();
		}

		if(hmSubVehRows.containsKey("Cabin"))
		{
			cabinIveco=hmSubVehRows.get("Cabin").toString();

		}

		if(hmSubVehRows.containsKey("Transmission"))
		{
			transCode=hmSubVehRows.get("Transmission").toString();
		}

		String serialNoIveco="";
		if(hm.containsKey("Serial Numbers"))
		{
			List<HtmlTableRow> serNoRows=vehRows.subList(11, vehRows.size());
			String td1,td2;
			for(HtmlTableRow tr:serNoRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				td1=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				td2=cell2.getTextContent();

				serialNoIveco=serialNoIveco+td1+"::"+td2+";";
			}
			serialNosIveco=serialNoIveco;
		}

		if(hmSubVehRows.containsKey("PIC"))
		{
			picIveco=hm.get("PIC").toString();
		}

		if(hmSubVehRows.containsKey("VP"))
		{
			vpIveco=hm.get("VP").toString();
		}

		String equipIveco="";
		String optionsIveco=""; 

		if(htmlPage.asXml().contains("vinStandardEquipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String c,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				c=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				IvecoEquip eq=new IvecoEquip();
				String code=eq.setCode(c);
				String description=eq.setDesc(d);

				equipIveco=equipIveco+code+"::"+description+";";
				//equipCitroen=equipCitroen+code+"::"+group+"::"+description+";";
				equipIveco=equipIveco.replaceAll("\\s+"," ");
			}
		}

		String optEquip=null;

		insertIntoGenVehTable(equipIveco, optEquip, optionsIveco);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void jeep() throws Exception
	{
		make="Jeep";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		MultiHashMap mhm=new MultiHashMap();

		List<HtmlTableRow> subVehRows=vehRows.subList(8, vehRows.size());
		String td1,td2,td3;
		for(HtmlTableRow tr:subVehRows)
		{
			td1=tr.getCell(0).getTextContent();
			td2=tr.getCell(1).getTextContent();
			td3=tr.getCell(2).getTextContent();

			String attribute=td1;
			String codeValue=td2;
			String description=td3;

			allfieldsFARJL=allfieldsFARJL+attribute+"::"+codeValue+"::"+description+";";
			allfieldsFARJL=allfieldsFARJL.replaceAll("\\s+"," ");

			mhm.put(td1, td2);
			mhm.put(td1, td3);

		}

		for (HtmlTableRow tr : vehRows) 
		{
			for (HtmlTableCell td : tr.getCells()) 
			{
				HtmlTableCell viN = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[1]/td[2]");
				str1=viN.asText();

				String str=null;
				HtmlTableCell tb=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[1]");
				str=tb.asText();

				if(str.equals("Model"))
				{
					HtmlTableCell mod = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[2]");
					str2=mod.asText();
				}

				HtmlTableCell dop = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[4]/td[2]");
				str3=dop.asText();
				HtmlTableCell sow = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[5]/td[2]");
				str4=sow.asText();
				HtmlTableCell engNo = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[7]/td[2]");
				str5=engNo.asText();
				HtmlTableCell carBody = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[8]/td[2]");
				str6=carBody.asText();

				HtmlTableCell mod1 = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[2]/td[2]");
				str7=mod1.asText();

				HtmlTableCell cha = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[6]/td[2]");
				str8=cha.asText();

			}
		}

		FiatVehicle v=new FiatVehicle();
		vinNo=v.setVin(str1);

		String modTest=null;
		modTest=v.setModel(str2);
		model1FARJL=str7;
		model2FARJL=str2;
		chassisFARJL=str8;

		String[] splitSt=null;		
		Pattern p=Pattern.compile("([0-9][.][0-9])");
		Matcher m=p.matcher(modTest);
		if(m.find())
		{		
			engineCapacity=m.group();
			splitSt=modTest.split(m.group());
			model=splitSt[0];
			engine=m.group()+splitSt[1];
		}

		if(mhm.containsKey("CC"))
		{
			List<?> listCC = (List<?>) mhm.get("CC");
			System.out.println(mhm.get("CC"));
			engineCapacity=listCC.get(0).toString();
		}

		engineCapacity=engineCapacity.replace(".", "");
		engineCapacity=engineCapacity+"00";
		if(str3 != null && !str3.trim().equals(""))
		{
			Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(str3);
			String a=date1.toString();
			String[] b=a.split(" ");
			dateOfProd=b[1]+" "+b[2]+", "+b[5];	

			if(!dateOfProd.equals(""))
			{
				String[] splitYr=dateOfProd.split(",");
				yearOfProd=splitYr[1].trim();
			}
		}
		if(mhm.containsKey("P"))
		{
			List<?> listDoors = (List<?>) mhm.get("P");
			System.out.println(mhm.get("P"));
			doors=listDoors.get(0).toString();
		}

		engineNo=v.setEngNo(str5);
		carBody=v.setCarBody(str6);
		startOfWarr=v.setSow(str4);



		if(mhm.containsKey("C_TRA"))
		{
			List<?> listTrans = (List<?>) mhm.get("C_TRA");
			transCode=listTrans.get(0).toString();
			transmission=listTrans.get(1).toString();
			if(transmission.contains("MANUAL"))
			{
				if(transmission.contains("5-SPEED") || transmission.contains("5-SPD") || transmission.contains("5 SPD"))
				{
					transmission="5-speed manual transmission";
				}
				else if(transmission.contains("4-SPEED") || transmission.contains("4-SPD") || transmission.contains("4 SPD"))
				{
					transmission="4-speed manual transmission";
				}
				else if(transmission.contains("6-SPEED") || transmission.contains("6-SPD") || transmission.contains("6 SPD"))
				{
					transmission="6-speed manual transmission";
				}
				else if(transmission.contains("3-SPEED") || transmission.contains("3-SPD") || transmission.contains("3 SPD"))
				{
					transmission="3-speed manual transmission";
				}
				else if(transmission.contains("7-SPEED") || transmission.contains("7-SPD") || transmission.contains("7 SPD"))
				{
					transmission="7-speed manual transmission";
				}
				else 
				{
					transmission="manual transmission";
				}
			}
			else if(transmission.contains("AUTO"))
			{
				if(transmission.contains("4 SPEED") || transmission.contains("4-SPEED") || transmission.contains("4 SPD"))
				{
					transmission="4-speed automatic transmission";
				}
				else if(transmission.contains("3 SPEED") || transmission.contains("3-SPEED") || transmission.contains("3 SPD"))
				{
					transmission="3-speed automatic transmission";
				}
				else if(transmission.contains("5 SPEED") || transmission.contains("5-SPEED") || transmission.contains("5 SPD"))
				{
					transmission="5-speed automatic transmission";
				}
				else if(transmission.contains("6 SPEED") || transmission.contains("6-SPEED") || transmission.contains("6 SPD"))
				{
					transmission="6-speed automatic transmission";
				}
				else if(transmission.contains("8 SPEED") || transmission.contains("8-SPEED") || transmission.contains("8 SPD"))
				{
					transmission="8-speed automatic transmission";
				}
				else if(transmission.contains("9 SPEED") || transmission.contains("9-SPEED") || transmission.contains("9 SPD"))
				{
					transmission="9-speed automatic transmission";
				}
				else 
				{
					transmission="automatic transmission";
				}
			}
		}

		if(mhm.containsKey("TT"))
		{
			List<?> listDriveType = (List<?>) mhm.get("TT");
			String dt=listDriveType.get(0).toString();
			driveType=listDriveType.get(1).toString();
			if(dt.contains("FWD"))
			{
				driveType="Front wheel drive";
			}
			else if (dt.contains("AWD")) 
			{
				driveType="All wheel drive";
			}
			else if (dt.contains("RWD")) 
			{
				driveType="Rear wheel drive";
			}
			else if (dt.contains("4WD")) 
			{
				driveType="4 wheel drive";
			}
			else if (dt.contains("2WD")) 
			{
				driveType="2 wheel drive";
			}
		}

		Pattern pPS=Pattern.compile("([0-9]{2,}[HP])\\w|([0-9]{2,}\\s[HP])\\w");
		if(engine != null)
		{
			Matcher mPS=pPS.matcher(engine);
			if(mPS.find())
			{
				PS=mPS.group();
				PS=PS.replace("HP", "").trim();
				double divider=1.36;
				int psint=Integer.parseInt(PS);
				double kw=psint/divider;
				int kwint=(int) Math.round(kw);
				kW=Integer.toString(kwint);
			}
		}

		else if(mhm.containsKey("KW"))
		{
			List<?> listKW = (List<?>) mhm.get("KW");
			kW=listKW.get(0).toString();
			double multiplier=1.36;
			int kwint=Integer.parseInt(kW);
			double ps=kwint*multiplier;
			int psint=(int) Math.round(ps);
			PS=Integer.toString(psint);
		}

		if(mhm.containsKey("CMB"))
		{
			List<?> listFuel = (List<?>) mhm.get("CMB");
			fuelType=listFuel.get(1).toString();
			if(fuelType.contains("DIESEL"))
			{
				fuelType="Diesel";
			}
			else if(fuelType.contains("PETROL"))
			{
				fuelType="Petrol";
			}
		}

		if(mhm.containsKey("G"))
		{
			List<?> listDriveSide = (List<?>) mhm.get("G");
			driveSide=listDriveSide.get(1).toString();
			if(driveSide.contains("LEFT"))
			{
				driveSide="Left hand drive";
			}
			else if (driveSide.contains("RIGHT")) 
			{
				driveSide="Right hand drive";
			}
		}

		if(mhm.containsKey("COLEST"))
		{
			List<?> listExCol = (List<?>) mhm.get("COLEST");
			extColorCode=listExCol.get(0).toString();
			String aext=listExCol.get(1).toString();

			if(aext.contains("Exterior color"))
			{
				exteriorColor=aext.replace("Exterior color ", "").replace("(", "").replace(")", "").trim();
			}

			else if(aext.contains("Colore Esterno"))
			{
				exteriorColor=aext.replace("Colore Esterno ", "").replace("(", "").replace(")", "").trim();
			}
		}

		if(mhm.containsKey("COLINT"))
		{
			List<?> listIntCol = (List<?>) mhm.get("COLINT");
			upholIntCode=listIntCol.get(0).toString();
			String aint=listIntCol.get(1).toString();
			if(aint.contains("Interior color"))
			{
				interiorColor=aint.replace("Interior color ", "").replace("(", "").replace(")", "").trim();
			}

			else if(aint.contains("Colore Interno"))
			{
				interiorColor=aint.replace("Colore Interno ", "").replace("(", "").replace(")", "").trim();
			}
		}

		if(mhm.containsKey("ALMC"))
		{
			List<?> listAlmc = (List<?>) mhm.get("ALMC");
			//			String almcCode=listAlmc.get(0).toString();
			String almc=listAlmc.get(1).toString();
			marketTrimLevel=almc.replace("COMMERCIAL MARKET VERSION", "").replace("(", "").replace(")", "").trim();

		}
		if(mhm.containsKey("C_BS"))
		{
			List<?> listBs = (List<?>) mhm.get("C_BS");
			bodyStyleCode=listBs.get(0).toString();
		}

		if(mhm.containsKey("AM"))
		{
			List<?> listAm = (List<?>) mhm.get("AM");
			String mar=listAm.get(1).toString();
			marketVer=mar.replace("MARKET VERSION", "").replace("(", "").replace(")", "").trim();

		}

		if(mhm.containsKey("ECO"))
		{
			List<?> listEco = (List<?>) mhm.get("ECO");
			String eco=listEco.get(1).toString();
			ecology=eco.replace("ECOLOGY", "").replace("(", "").replace(")", "").trim();
		}



		//EQUIPMENT DATA

		String equipJeep="";
		String optionsJeep=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String at,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				at=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(2);
				d=cell2.getTextContent();

				FiatEquip eq=new FiatEquip();
				String attribute=eq.setAttr(at);
				String description=eq.setDesc(d);

				equipJeep=equipJeep+attribute+"::"+description+";";
				//equipJeep=equipJeep+attribute+"::"+group+"::"+description+";";
				equipJeep=equipJeep.replaceAll("\\s+"," ");
			}
		}

		if(equipJeep.contains("005::5 SPEED GEARBOX�"))
		{
			transmission="5 speed transmission";
		}

		HtmlAnchor anJe=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
		String jea=anJe.getAttribute("title");
		partsMapModel=jea.substring(jea.indexOf(":")+1, jea.length()).trim().replaceAll("\\s+", " ").replace(" -", "");

		String optEquip=null;

		insertIntoGenVehTable(equipJeep, optEquip, optionsJeep);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void volvo() throws Exception
	{
		make="Volvo";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 

		for(HtmlTableRow tr:vehRows) 
		{
			for(HtmlTableCell td:tr.getCells())
			{
				HtmlTableCell cell1=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[1]/td[2]");  //vin
				str1=cell1.asText();

				HtmlTableCell cell2=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[1]/td[4]");  //year
				str2=cell2.asText();

				HtmlTableCell cell3=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[2]/td[2]");  //model
				str3=cell3.asText();

				HtmlTableCell cell4=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[2]/td[4]");  //kmph
				str4=cell4.asText();

				HtmlTableCell cell5=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[2]");  //factory code
				str5=cell5.asText();

				HtmlTableCell cell6=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[4]");  //stearegearpodno
				str6=cell6.asText();

				HtmlTableCell cell7=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[4]/td[2]"); //structureweek
				str7=cell7.asText();

				HtmlTableCell cell8=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[4]/td[4]");  //type
				str8=cell8.asText();

				HtmlTableCell cell9=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[5]/td[2]");  //chassis
				str9=cell9.asText();

				HtmlTableCell cell10=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[5]/td[4]");  //partnergroup
				str10=cell10.asText();

				HtmlTableCell cell11=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[7]/td[2]");  //upholsteryinterior
				str11=cell11.asText();

				HtmlTableCell cell12=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[7]/td[4]");  //uphoslteryintcode
				str12=cell12.asText();

				HtmlTableCell cell13=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[8]/td[2]");  //exteriorColorCode
				str13=cell13.asText();

				HtmlTableCell cell14=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[8]/td[4]");  //exteriorColor
				str14=cell14.asText();

				HtmlTableCell cell15=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[9]/td[2]");  //bodyStyleCode
				str15=cell15.asText();

				HtmlTableCell cell16=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[9]/td[4]");  //bodyStyle
				str16=cell16.asText();

				HtmlTableCell cell17=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[10]/td[2]");  //specialVehCode
				str17=cell17.asText();

				HtmlTableCell cell18=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[10]/td[4]");  //specialVehicle
				str18=cell18.asText();

				HtmlTableCell cell19=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[11]/td[2]");  //salesTypeCode
				str19=cell19.asText();

				HtmlTableCell cell20=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[11]/td[4]");  //salesType
				str20=cell20.asText();

				HtmlTableCell cell21=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[12]/td[2]"); //marketCode
				str21=cell21.asText();

				HtmlTableCell cell22=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[12]/td[4]"); //market
				str22=cell22.asText();

				HtmlTableCell cell23=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[14]/td[2]");  //engineCode
				str23=cell23.asText();

				HtmlTableCell cell24=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[14]/td[4]");  //engine
				str24=cell24.asText();

				HtmlTableCell cell25=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[15]/td[2]");  //enginePartNo
				str25=cell25.asText();

				HtmlTableCell cell26=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[15]/td[4]");  //engineSerialNo
				str26=cell26.asText();

				HtmlTableCell cell27=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[17]/td[2]");  //transmissionCode
				str27=cell27.asText();

				HtmlTableCell cell28=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[17]/td[4]");  //transmission
				str28=cell28.asText();

				HtmlTableCell cell29=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[18]/td[2]");  //transmissionPartNo
				str29=cell29.asText();

				HtmlTableCell cell30=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[18]/td[4]");  //transmissionSerialNo
				str30=cell30.asText();

				HtmlTableCell cell31=td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[20]/td[2]");  //chassisCode
				str31=cell31.asText();

			}

		}

		NoneVagVeh v=new NoneVagVeh();
		regNo="";
		vinNo=v.setVinNo(str1);
		model=v.setModel(str3);
		String[] m = model.split(" ");
		model = m[0];
		partsMapModel=str3;
		engine=v.setEngine(str24);
		bodyType=v.setBodyType(str16);
		fuelMixture="";
		yearOfProd=v.setYearOfProd(str2);
		dateOfProd="";
		doors="";
		grade="";
		driveSide="";
		weatherType="";
		exteriorColor=v.setExteriorColor(str14);
		interiorColor=v.setInteriorColor(str12);
		marketCode=v.setMarketCode(str21);
		combNo="";
		engineNo="";
		engineCode=v.setEngineCode(str23);
		transmissionNo="";
		transCode=v.setTransCode(str27);
		kmph=v.setKmph(str4);
		factoryCode=v.setFactoryCode(str5);
		steerProdNo=v.setSteerProdNo(str6);
		structureWeek=v.setStructureWeek(str7);
		type=v.setType(str8);
		chassis=v.setChassis(str9);
		partnerGroup=v.setPartnerGroup(str10);
		upholIntCode=v.setUpholIntCode(str11);
		extColorCode=v.setExtColorCode(str13);
		bodyStyleCode=v.setBodyStyleCode(str15);
		specialVehCode=v.setSpecialVehCode(str17);
		specialVeh=v.setSpecialVeh(str18);
		salesTypeCode=v.setSalesTypeCode(str19);
		salesType=v.setSalesType(str20);
		market=v.setMarket(str22);
		enginePartNo=v.setEnginePartNo(str25);
		engineSerialNo=v.setEngineSerialNo(str26);			
		transPartNo=v.setTransPartNo(str29);
		transSerialNo=v.setTransSerialNo(str30);
		chassisCode=v.setChassisCode(str31);
		modelDesignation="";
		series="";
		typeCode="";
		orderId="";
		motorNo="";
		euApprovDate="";
		euApprovNo="";
		salesTerm="";


		String priOption="";
		if(htmlPage.asText().contains("Primary option"))
		{
			HtmlTableBody proptBody=htmlPage.getFirstByXPath("//div[@id='vinTabsStandardFeature']/table[@class='vinInfoTable']/tbody");
			List<HtmlTableRow> proptRows=proptBody.getRows();
			String e,d;
			for(HtmlTableRow tr:proptRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				e=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				VolvoPrimaryOption po=new VolvoPrimaryOption();
				String equipment=po.setEquipment(e);
				String description=po.setDescription(d);

				priOption=priOption+equipment+"::"+description+";";
				priOption=priOption.replaceAll("\\s+"," ");
			}

		}

		String extOption="";
		if(htmlPage.asText().contains("Extended options"))
		{
			HtmlTableBody extoptBody=htmlPage.getFirstByXPath("//div[@id='vinTabsOptions']/table[@class='vinInfoTable']/tbody");
			List<HtmlTableRow> extoptRows=extoptBody.getRows();
			String e,d;
			for(HtmlTableRow tr:extoptRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				e=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				VolvoExtendedOptions eo=new VolvoExtendedOptions();
				String equipment=eo.setEquipment(e);
				String description=eo.setDescription(d);

				extOption=extOption+equipment+"::"+description+";";
				extOption=extOption.replaceAll("\\s+"," ");
			}
		}
		String optionsVolvo=priOption+extOption;


		String equipVolvo="";
		if(htmlPage.asText().contains("Technical info"))
		{
			HtmlTableBody techinfoBody=htmlPage.getFirstByXPath("//div[@id='vinTabsVariDesign']/table[@class='vinInfoTable']/tbody");
			List<HtmlTableRow> techinfoRows=techinfoBody.getRows();
			String e,d,equipment = null,description=null;
			for(HtmlTableRow tr:techinfoRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				e=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				VolvoTechinfo ti=new VolvoTechinfo();
				equipment=ti.setEquipment(e);
				description=ti.setDescription(d);

				equipVolvo=equipVolvo+equipment+"::"+description+";";
				//equipVolvo=equipVolvo+equipment+"::"+group+"::"+description+";";
				equipVolvo=equipVolvo.replaceAll("\\s{2,}"," ");
			}
		}

		transmission=v.setTransmission(str28); //extract speed trans only
		if(transmission.contains("M66") || transmission.contains("6spd") || transmission.contains("6-MAN"))
		{
			transmission="6-speed manual transmission";
		}
		else if( transmission.contains("5spd") || transmission.contains("M41") || transmission.contains("M410") || transmission.contains("M46") || transmission.contains("M47") 
				|| transmission.contains("M55") || transmission.contains("M56") || transmission.contains("M56H") || transmission.contains("MT5") || transmission.contains("5-MAN"))
		{
			transmission="5-speed manual transmission";
		}
		else if(transmission.contains("M4") || transmission.contains("M31") || transmission.contains("M40") || transmission.contains("M400") 
				|| transmission.contains("M45"))
		{
			transmission="4-speed manual transmission";
		}
		else if(transmission.contains("H6") || transmission.contains("M3") || transmission.contains("M30") || transmission.contains("manual"))
		{
			transmission="3-speed manual transmission";
		}
		else if(transmission.contains("TF-80SC") || transmission.contains("6-AUT") || transmission.contains("AW30-43"))
		{
			transmission="6-speed automatic transmission";
		}
		else if(transmission.contains("AW50-50") || transmission.contains("AW55-50") || transmission.contains("5spd_automatic") || transmission.contains("5spd_autostick")
				|| transmission.contains("5-AUT"))
		{
			transmission="5-speed automatic transmission";
		}
		else if(transmission.contains("AW42") || transmission.contains("AW70") || transmission.contains("AW71") || transmission.contains("AW72") 
				|| transmission.contains("AW30-40") || transmission.contains("ZF-4HP22L") || transmission.contains("4spd_automatic") )
		{
			transmission="4-speed automatic transmission";
		}
		else if(transmission.contains("BW35") || transmission.contains("BW55") || transmission.contains("AW55") || transmission.contains("automatic"))
		{
			transmission="3-speed automatic transmission";
		}

		else if(equipVolvo!="")
		{
			String[] trans=null;
			String transTest=null;
			Pattern p=Pattern.compile("(GEARBOX)(.*)[(8-speed)|(6-speed)]");
			Matcher mVo=p.matcher(equipVolvo);
			if(mVo.find())
			{
				transTest=mVo.group();
				trans=transTest.split(";");
			}
			if(trans[0].contains("Powershift"))
			{
				if(trans[0].contains("6-speed"))
				{
					transmission="6-speed dual clutch semi-automatic";
				}
				else if (trans[0].contains("8-speed")) 
				{
					transmission="8-speed dual clutch semi-automatic";
				}
			}
			else if(trans[0].contains("Automatic") || trans[0].contains("automatic"))
			{
				if(trans[0].contains("6-speed"))
				{
					transmission="6-speed automatic";
				}
				else if (trans[0].contains("8-speed")) 
				{
					transmission="8-speed automatic";
				}
			}
			else if(trans[0].contains("Manual") || trans[0].contains("manual"))
			{
				if(trans[0].contains("6-speed"))
				{
					transmission="6-speed manual";
				}
				else if (trans[0].contains("8-speed")) 
				{
					transmission="8-speed manual";
				}
			}
			else
			{
				transmission="";
			}
		}
		else{
			transmission="";
		}

		//drivetype extraction
		driveType=v.setTransmission(str28); //extract WD only

		if(driveType.contains("4WD"))
		{
			driveType="4-wheel drive";
		}
		else if(driveType.contains("FWD"))
		{
			driveType="Front wheel drive";
		}
		else if(driveType.contains("2WD"))
		{
			driveType="2-wheel drive";
		}
		else if(equipVolvo.contains("2-wheel drive") || equipVolvo.contains("2 wheel drive"))
		{
			driveType="2-wheel drive";
		}
		else if(equipVolvo.contains("4-wheel drive"))
		{
			driveType="4-wheel drive";
		}
		else if(equipVolvo.contains("All wheel drive"))
		{
			driveType="All wheel drive";
		}
		else if(driveType.contains("AWD"))
		{
			driveType="All wheel drive";
		}
		else
		{
			driveType="";
		}

		if(equipVolvo.contains("CG01::FUEL Petrol"))
		{
			fuelType="Petrol";
		}
		else if(equipVolvo.contains("CG02::FUEL Diesel"))
		{
			fuelType="Diesel";
		}
		else{
			fuelType="";
		}

		Pattern pPS=Pattern.compile("[0-9]+(PS)");
		Matcher mPS=pPS.matcher(equipVolvo);
		String psTest=null;
		if(mPS.find())
		{
			psTest=mPS.group();
			PS=psTest.replaceAll("[a-zA-Z]+", "");

		}
		else{
			PS="";
		}

		Pattern pkW=Pattern.compile("[0-9]+(kW)|[0-9]+\\s(kW)");
		Matcher mkW=pkW.matcher(equipVolvo);
		String kwTest=null;
		if(mkW.find())
		{
			kwTest=mkW.group();
			kW=kwTest.replaceAll("[a-zA-Z]+", "");	
		}
		else if(!PS.equals(""))
		{
			double divider=1.36;
			int psint=Integer.parseInt(PS);
			double kw=psint/divider;
			int kwint=(int) Math.round(kw);
			kW=Integer.toString(kwint);
		}
		else{
			kW="";
		}

		Pattern pCC=Pattern.compile("[0-9][0-9][0-9]+(CC)|[0-9](,[0-9]+)(L)");
		Matcher mCC=pCC.matcher(equipVolvo);
		String ccTest=null;
		if(mCC.find())
		{
			ccTest=mCC.group();
			engineCapacity=ccTest.replaceAll("[a-zA-Z]+", "");
			if(engineCapacity.contains(","))
			{
				engineCapacity=engineCapacity.replace(",", "");
			}

		}
		else{
			engineCapacity="";
		}

		transmissionCode=str28;

		String optEquip=null;

		insertIntoGenVehTable(equipVolvo, optEquip, optionsVolvo);

		//portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void kia() throws Exception
	{
		make="Kia";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 

		HashMap<String, String> hmKia=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hmKia.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		regNo="";
		vinNo=hmKia.get("Vehicle Identification No.").toString();
		model=hmKia.get("Model").toString();  //extract
		modelOrg=hmKia.get("Model").toString();
		String[] m = model.split("[0-9]"); // String array, each element is text between dots
		model = m[0];
		String am=model.toLowerCase();
		model=am.substring(0, 1).toUpperCase() + am.substring(1);

		if(hmKia.containsKey("ENGINE TYPE"))
		{
			engine=hmKia.get("ENGINE TYPE").toString();				

		}
		else
		{				
			String strEng=hmKia.get("FUEL TYPE").toString();
			if(strEng.contains("DOHC") || strEng.contains("SOHC"))
			{
				engine=hmKia.get("FUEL TYPE").toString();				

			}
			else{
				engine="";
			}
		}
		if(hmKia.containsKey("TRANSMISSION"))
		{
			transmission=hmKia.get("TRANSMISSION").toString(); //extract
			transOrg=hmKia.get("TRANSMISSION").toString();
			if(transmission.contains("MT"))
			{
				if(transmission.contains("5 SPEED"))
				{
					transmission="5-speed manual transmission";
				}
				else if (transmission.contains("6 SPEED")) 
				{
					transmission="6-speed manual transmission";
				}
			}
			else if(transmission.contains("AT"))
			{
				if (transmission.contains("4 SPEED")) 
				{
					transmission="4-speed automatic transmission";
				}
				else if (transmission.contains("5 SPEED")) 
				{
					transmission="5-speed automatic transmission";
				}
				else if (transmission.contains("6 SPEED")) 
				{
					transmission="6-speed automatic transmission";
				}
				else if (transmission.contains("8 SPEED")) 
				{
					transmission="8-speed automatic transmission";
				}
			}

			else if (transmission.contains("DCT")) 
			{
				transmission="7-speed dual clutch transmission";
			}
			else if (transmission.contains("AMT")) 
			{
				transmission="Automatic manual transmission";
			}
			else if (transmission.contains("CVT")) 
			{
				transmission="Continuously variable transmission";
			}
		}

		else if(hmKia.containsKey("TRANSAXLE"))
		{
			transmission=hmKia.get("TRANSAXLE").toString(); //extract
			transaxleOrg=hmKia.get("TRANSAXLE").toString();
			if(transmission.contains("MANUAL T/M"))
			{
				if(transmission.contains("5 SPEED"))
				{
					transmission="5-speed manual transmission";
				}
				else if (transmission.contains("6 SPEED")) 
				{
					transmission="6-speed manual transmission";
				}
			}
			else if(transmission.contains("AUTO"))
			{
				if (transmission.contains("4 SPEED")) 
				{
					transmission="4-speed automatic transmission";
				}
				else if (transmission.contains("5 SPEED")) 
				{
					transmission="5-speed automatic transmission";
				}
				else if (transmission.contains("6 SPEED")) 
				{
					transmission="6-speed automatic transmission";
				}
				else if (transmission.contains("8 SPEED")) 
				{
					transmission="8-speed automatic transmission";
				}
			}
			else if (transmission.contains("DCT")) 
			{
				transmission="7-speed dual clutch transmission";
			}
			else if (transmission.contains("AMT")) 
			{
				transmission="Automatic manual transmission";
			}
			else if (transmission.contains("CVT")) 
			{
				transmission="Continuously variable transmission";
			}
		}

		if(hmKia.containsKey("TRANSMISSION"))
		{
			driveType=hmKia.get("TRANSMISSION").toString(); //extract

			if(driveType.contains("AWD"))
			{
				driveType="All wheel drive";
			}
			else if(driveType.contains("FWD"))
			{
				driveType="Front wheel drive";
			}
			else if(driveType.contains("2WD"))
			{
				driveType="2-wheel drive";
			}
			else if(driveType.contains("4WD"))
			{
				driveType="4-wheel drive";
			}
			else{
				driveType="";
			}
		}

		else if(hmKia.containsKey("TRANSAXLE"))
		{
			driveType=hmKia.get("TRANSAXLE").toString(); //extract

			if(driveType.contains("AWD"))
			{
				driveType="All wheel drive";
			}
			else if(driveType.contains("FWD"))
			{
				driveType="Front wheel drive";
			}
			else if(driveType.contains("2WD"))
			{
				driveType="2-wheel drive";
			}
			else if(driveType.contains("4WD"))
			{
				driveType="4-wheel drive";
			}
			else{
				driveType="";
			}
		}

		bodyType=hmKia.get("BODY TYPE").toString();
		orgBodyType=hmKia.get("BODY TYPE").toString();
		if(bodyType.contains("SEDAN"))
		{
			bodyType="Sedan";
		}
		else if(bodyType.contains("WAGON") || bodyType.contains("WGN"))
		{
			bodyType="Wagon";
		}
		else if(bodyType.contains("MINIVAN"))
		{
			bodyType="Minivan";
		}
		else if (bodyType.contains("SUV"))
		{
			bodyType="SUV";
		}
		else{
			bodyType="";
		}
		kW="";
		PS="";
		engineCapacity=hmKia.get("ENGINE CAPACITY").toString(); // extract only till "cc"
		ecKiaHyundai=hmKia.get("ENGINE CAPACITY").toString();
		String[] cc = engineCapacity.split(" "); 
		engineCapacity = cc[0];

		fuelMixture="";
		yearOfProd=hmKia.get("Date of production").toString(); //extract from dop
		String[] year = yearOfProd.split(","); // String array, each element is text between dots
		yearOfProd= year[1];

		dateOfProd=hmKia.get("Date of production").toString();
		doors=hmKia.get("BODY TYPE").toString(); //extract
		if(doors.contains("5DR") || doors.contains("5 DR"))
		{
			doors="5";
		}
		else if(doors.contains("4DR") || doors.contains("4 DR"))
		{
			doors="4";
		}
		else if(doors.contains("3DR") || doors.contains("3 DR"))
		{
			doors="3";
		}
		else if(doors.contains("2DR") || doors.contains("2DR"))
		{
			doors="2";
		}
		else{
			doors="";
		}

		if(hmKia.containsKey("GRADE"))
		{
			grade=hmKia.get("GRADE").toString();
			String ag=grade.toLowerCase();
			grade=ag.substring(0, 1).toUpperCase() + ag.substring(1);
		}
		else
		{
			grade="";
		}

		if(hmKia.containsKey("DRIVE TYPE"))
		{
			driveSide=hmKia.get("DRIVE TYPE").toString(); 
			if(driveSide.contains("LHD"))
			{
				driveSide="Left hand drive";
			}
			else if(driveSide.contains("RHD"))
			{
				driveSide="Right hand drive";
			}
		}
		else
		{
			driveSide="";
		}
		if(hmKia.containsKey("WEATHER TYPE"))
		{
			weatherType=hmKia.get("WEATHER TYPE").toString();
			String aw=weatherType.toLowerCase();
			weatherType=aw.substring(0, 1).toUpperCase() + aw.substring(1);
		}
		else
		{
			weatherType="";
		}
		exteriorColor=hmKia.get("Exterior color").toString();
		interiorColor=hmKia.get("Interior color").toString();
		marketCode=hmKia.get("Market code").toString();
		combNo=hmKia.get("Comb.No.").toString();
		engineNo=hmKia.get("Eng.Number").toString();
		engineCode=hmKia.get("Engine Code").toString();
		transmissionNo=hmKia.get("Transmission Number").toString();
		transCode=hmKia.get("Transmission Code").toString();

		String optionsKia="";

		String equip="";
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody proptBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> proptRows=proptBody.getRows();
			String a,d;
			for(HtmlTableRow tr:proptRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				a=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				KiaEquipment eq=new KiaEquipment();
				String attribute=eq.setAttrEquipKn(a);
				String description=eq.setDescEquipKn(d);
				equip=equip+attribute+"::"+description+";";
				//equip=equip+attribute+"::"+group+"::"+description+";";
				equip=equip.replaceAll("\\s+"," ");
			}
		}

		String optEquip="";
		if(htmlPage.asText().contains("Optional equipment"))
		{
			HtmlTableBody extoptBody=htmlPage.getFirstByXPath("//*[@id='vinOptionalEquipment']/table/tbody");
			List<HtmlTableRow> extoptRows=extoptBody.getRows();
			String a,d;
			for(HtmlTableRow tr:extoptRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				a=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				KiaOptionalEquipments oe=new KiaOptionalEquipments();
				String attribute=oe.setAttriOptEquipKn(a);
				String description=oe.setDescOptEquipKn(d);
				optEquip=optEquip+attribute+"::"+description+";";
				//optEquip=optEquip+attribute+"::"+group+"::"+description+";";
				optEquip=optEquip.replaceAll("\\s+"," ");
			}
		}

		String equipKia=equip+optEquip;

		fuelType=hmKia.get("FUEL TYPE").toString(); //check using if condition for fuel and should not be repeated
		if(fuelType.contains("DIESEL - DIESEL") || equipKia.contains("DIESEL"))
		{
			fuelType="Diesel";
		}
		else if (fuelType.contains("GASOLINE - UNLEADED") || equipKia.contains("UNLEADED"))
		{
			fuelType="Petrol - Unleaded";
		}
		else if(fuelType.contains("PETROL") || equipKia.contains("PETROL") || equipKia.contains("GASOLINE"))
		{
			fuelType="Petrol";
		}
		else
		{
			fuelType="";
		}

		HtmlAnchor an=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
		String kiaa=an.getAttribute("title");

		partsMapModel=kiaa.substring(kiaa.indexOf(":")+1, kiaa.length()).trim();

		insertIntoGenVehTable(equip, optEquip, optionsKia);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void hyundai() throws Exception
	{
		make="Hyundai";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows();

		HashMap<String, String> hmHyundai=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hmHyundai.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		regNo="";
		vinNo=hmHyundai.get("Vehicle Identification No.").toString();
		model=hmHyundai.get("Model").toString(); //extract only model name
		modelOrg=hmHyundai.get("Model").toString();
		String[] m = model.split(" "); // String array, each element is text between dots
		model = m[0];
		String am=model.toLowerCase();
		model=am.substring(0, 1).toUpperCase() + am.substring(1);

		if(hmHyundai.containsKey("ENGINE TYPE"))
		{
			engine=hmHyundai.get("ENGINE TYPE").toString(); 
		}
		else
		{
			String strEng=hmHyundai.get("FUEL TYPE").toString();
			if(strEng.contains("DOHC") || strEng.contains("SOHC"))
			{
				engine=hmHyundai.get("FUEL TYPE").toString();				

			}
			else{
				engine="";
			}
		}
		if(hmHyundai.containsKey("TRANSMISSION"))
		{
			transmission=hmHyundai.get("TRANSMISSION").toString(); //extract
			transOrg=hmHyundai.get("TRANSMISSION").toString();
			if(transmission.contains("MT"))
			{
				if(transmission.contains("5 SPEED"))
				{
					transmission="5-speed manual transmission";
				}
				else if (transmission.contains("6 SPEED")) 
				{
					transmission="6-speed manual transmission";
				}
			}
			else if(transmission.contains("AT"))
			{
				if (transmission.contains("4 SPEED")) 
				{
					transmission="4-speed automatic transmission";
				}
				else if (transmission.contains("5 SPEED")) 
				{
					transmission="5-speed automatic transmission";
				}
				else if (transmission.contains("6 SPEED")) 
				{
					transmission="6-speed automatic transmission";
				}
				else if (transmission.contains("8 SPEED")) 
				{
					transmission="8-speed automatic transmission";
				}
			}

			else if (transmission.contains("DCT")) 
			{
				transmission="7-speed dual clutch transmission";
			}
			else if (transmission.contains("AMT")) 
			{
				transmission="Automatic manual transmission";
			}
			else if (transmission.contains("CVT")) 
			{
				transmission="Continuously variable transmission";
			}
		}
		else if(hmHyundai.containsKey("TRANSAXLE"))
		{
			transmission=hmHyundai.get("TRANSAXLE").toString(); //extract
			transaxleOrg=hmHyundai.get("TRANSAXLE").toString();
			if(transmission.contains("MANUAL T/M"))
			{
				if(transmission.contains("5 SPEED"))
				{
					transmission="5-speed manual transmission";
				}
				else if (transmission.contains("6 SPEED")) 
				{
					transmission="6-speed manual transmission";
				}
			}
			else if(transmission.contains("AUTO"))
			{
				if (transmission.contains("4 SPEED")) 
				{
					transmission="4-speed automatic transmission";
				}
				else if (transmission.contains("5 SPEED")) 
				{
					transmission="5-speed automatic transmission";
				}
				else if (transmission.contains("6 SPEED")) 
				{
					transmission="6-speed automatic transmission";
				}
				else if (transmission.contains("8 SPEED")) 
				{
					transmission="8-speed automatic transmission";
				}
			}
			else if (transmission.contains("DCT")) 
			{
				transmission="7-speed dual clutch transmission";
			}
			else if (transmission.contains("AMT")) 
			{
				transmission="Automatic manual transmission";
			}
			else if (transmission.contains("CVT")) 
			{
				transmission="Continuously variable transmission";
			}
		}

		if(hmHyundai.containsKey("TRANSMISSION"))
		{
			driveType=hmHyundai.get("TRANSMISSION").toString(); //extract
			if(driveType.contains("AWD"))
			{
				driveType="All wheel drive";
			}
			else if(driveType.contains("FWD"))
			{
				driveType="Front wheel drive";
			}
			else if(driveType.contains("2WD"))
			{
				driveType="2-wheel drive";
			}
			else if(driveType.contains("4WD"))
			{
				driveType="4-wheel drive";
			}
			else{
				driveType="";
			}
		}

		else if(hmHyundai.containsKey("TRANSAXLE"))
		{
			driveType=hmHyundai.get("TRANSAXLE").toString(); //extract
			if(driveType.contains("AWD"))
			{
				driveType="All wheel drive";
			}
			else if(driveType.contains("FWD"))
			{
				driveType="Front wheel drive";
			}
			else if(driveType.contains("2WD"))
			{
				driveType="2-wheel drive";
			}
			else if(driveType.contains("4WD"))
			{
				driveType="4-wheel drive";
			}
			else{
				driveType="";
			}
		}

		bodyType=hmHyundai.get("BODY TYPE").toString(); //extract
		orgBodyType=hmHyundai.get("BODY TYPE").toString();
		if(bodyType.contains("SEDAN"))
		{
			bodyType="Sedan";
		}
		else if(bodyType.contains("WAGON") || bodyType.contains("WGN"))
		{
			bodyType="Wagon";
		}
		else if(bodyType.contains("MINIVAN"))
		{
			bodyType="Minivan";
		}
		else if (bodyType.contains("SUV"))
		{
			bodyType="SUV";
		}
		else{
			bodyType="";
		}
		kW="";
		PS="";
		engineCapacity=hmHyundai.get("ENGINE CAPACITY").toString(); //extract only till "cc"
		ecKiaHyundai=hmHyundai.get("ENGINE CAPACITY").toString();
		String[] cc = engineCapacity.split(" "); 
		engineCapacity = cc[0];
		fuelType=hmHyundai.get("FUEL TYPE").toString(); //check using if condition for fuel and should not be repeated

		fuelMixture="";
		yearOfProd=hmHyundai.get("Date of production").toString(); //extract year from dop
		String[] year = yearOfProd.split(","); // String array, each element is text between dots
		yearOfProd= year[1];
		dateOfProd=hmHyundai.get("Date of production").toString();
		doors=hmHyundai.get("BODY TYPE").toString(); //extract
		if(doors.contains("5DR") || doors.contains("5 DR") || doors.contains("WGN SHORT 7"))
		{
			doors="5";
		}
		else if(doors.contains("4DR") || doors.contains("4 DR"))
		{
			doors="4";
		}
		else if(doors.contains("3DR") || doors.contains("3 DR"))
		{
			doors="3";
		}
		else if(doors.contains("2DR") || doors.contains("2DR"))
		{
			doors="2";
		}
		else{
			doors="";
		}

		if(hmHyundai.containsKey("GRADE"))
		{
			grade=hmHyundai.get("GRADE").toString();
			String ag=grade.toLowerCase();
			grade=ag.substring(0, 1).toUpperCase() + ag.substring(1);
		}
		else
		{
			grade="";
		}

		if(hmHyundai.containsKey("DRIVE TYPE"))
		{
			driveSide=hmHyundai.get("DRIVE TYPE").toString(); 
			if(driveSide.contains("LHD"))
			{
				driveSide="Left hand drive";
			}
			else if(driveSide.contains("RHD"))
			{
				driveSide="Right hand drive";
			}
		}
		else
		{
			driveSide="";
		}
		if(hmHyundai.containsKey("WEATHER TYPE"))
		{
			weatherType=hmHyundai.get("WEATHER TYPE").toString();
			String aw=weatherType.toLowerCase();
			weatherType=aw.substring(0, 1).toUpperCase() + aw.substring(1);
		}
		else
		{
			weatherType="";
		}
		exteriorColor=hmHyundai.get("Exterior color").toString();
		interiorColor=hmHyundai.get("Interior color").toString();
		marketCode=hmHyundai.get("Market code").toString();
		combNo=hmHyundai.get("Comb.No.").toString();
		engineNo=hmHyundai.get("Eng.Number").toString();
		engineCode=hmHyundai.get("Engine Code").toString();
		transmissionNo=hmHyundai.get("Transmission Number").toString();
		transCode=hmHyundai.get("Transmission Code").toString();


		String equip="";
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody proptBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> proptRows=proptBody.getRows();
			String a,d;
			for(HtmlTableRow tr:proptRows) {
				HtmlTableCell cell1=tr.getCell(0);
				a=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				HyundaiEquipment eq=new HyundaiEquipment();
				String attribute=eq.setAttrEquipHy(a);
				String description=eq.setDescEquipHy(d);
				equip=equip+attribute+"::"+description+";";
				//equip=equip+attribute+"::"+group+"::"+description+";";
				equip=equip.replaceAll("\\s+"," ");
			}
		}

		String optEquip="";
		if(htmlPage.asText().contains("Optional equipment"))
		{
			HtmlTableBody extoptBody=htmlPage.getFirstByXPath("//*[@id='vinOptionalEquipment']/table/tbody");
			List<HtmlTableRow> extoptRows=extoptBody.getRows();
			String a,d;
			for(HtmlTableRow tr:extoptRows) {
				HtmlTableCell cell1=tr.getCell(0);
				a=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				HyundaiOptionalEquipments oe=new HyundaiOptionalEquipments();
				String attribute=oe.setAttriOptEquipHy(a);
				String description=oe.setDescOptEquipHy(d);
				optEquip=optEquip+attribute+"::"+description+";";
				//optEquip=optEquip+attribute+"::"+group+"::"+description+";";
				optEquip=optEquip.replaceAll("\\s+"," ");
			}
		}

		String equipHyundai=equip+optEquip;
		String optionsHyundai="";

		if(fuelType.contains("DIESEL - DIESEL") || equipHyundai.contains("DIESEL"))
		{
			fuelType="Diesel";
		}
		else if (fuelType.contains("GASOLINE - UNLEADED") || equipHyundai.contains("UNLEADED"))
		{
			fuelType="Petrol - Unleaded";
		}
		else if(fuelType.contains("PETROL") || equipHyundai.contains("PETROL") || equipHyundai.contains("GASOLINE"))
		{
			fuelType="Petrol";
		}
		else
		{
			fuelType="";
		}

		HtmlAnchor an=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
		String hyundaia=an.getAttribute("title");

		partsMapModel=hyundaia.substring(hyundaia.indexOf(":")+1, hyundaia.length()).trim();


		insertIntoGenVehTable(equip, optEquip, optionsHyundai);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void bmw() throws Exception
	{
		make="BMW";

		if (htmlPage.asXml().contains("ui-widget-overlay")) 
		{
			IsFound2();
		}
		else
		{

			HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
			List<HtmlTableRow> vehRows=vehTable.getRows(); 

			HashMap<String, String> hmBmw=new HashMap<String,String>();
			for(HtmlTableRow tr:vehRows)
			{
				hmBmw.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
			}

			regNo="";
			vinNo=hmBmw.get("Vehicle Identification No.").toString();
			if(hmBmw.containsKey("Model Designation"))
			{
				modelDesignation=hmBmw.get("Model Designation").toString(); 

			}
			if(hmBmw.containsKey("Date of production")) {
				dateOfProd=hmBmw.get("Date of production").toString(); 
			}
			if(hmBmw.containsKey("Colour"))
			{
				exteriorColor=hmBmw.get("Colour").toString(); 
			}
			if(hmBmw.containsKey("Upholstery"))
			{
				interiorColor=hmBmw.get("Upholstery").toString(); 
			}
			if(hmBmw.containsKey("Drive"))
			{
				driveType=hmBmw.get("Drive").toString(); 
				driveBmwMini=hmBmw.get("Drive").toString();
				if(driveType.contains("HECK"))
				{
					driveType="Rear wheel drive";
				}
				else if (driveType.contains("ALLR")) 
				{
					driveType="All wheel drive";
				}
				else
				{
					driveType="";
				}
			}
			if(hmBmw.containsKey("Type code"))
			{
				typeCode=hmBmw.get("Type code").toString(); 
			}
			if(hmBmw.containsKey("Model"))
			{
				model=hmBmw.get("Model").toString(); 
				String[] m = model.split(" ");
				model = m[0];
			}
			if(hmBmw.containsKey("Series"))
			{
				series=hmBmw.get("Series").toString(); 
			}
			if(hmBmw.containsKey("Body"))
			{
				bodyType=hmBmw.get("Body").toString(); 
				if(bodyType.contains("doors"))
				{
					bodyType="";
				}
			}
			if(hmBmw.containsKey("Steering"))
			{
				driveSide=hmBmw.get("Steering").toString(); 
				steeringOrg=hmBmw.get("Steering").toString(); 
				if(driveSide.contains("L"))
				{
					driveSide="Left hand drive";
				}
				else if(driveSide.contains("R"))
				{
					driveSide="Right hand drive";
				}
				else
				{
					driveSide="";
				}
			}
			if(hmBmw.containsKey("Doors"))
			{
				doors=hmBmw.get("Doors").toString(); 
			}
			if(hmBmw.containsKey("EC"))
			{
				engine=hmBmw.get("EC").toString(); 
				fuelType=hmBmw.get("EC").toString(); 
				engineCode=hmBmw.get("EC").toString();
				if(engine.contains("M56") || engine.contains("B57") || engine.contains("M21"))
				{
					engine="6 cyl. ";
				}
				else if(engine.contains("M50") || engine.contains("N52") || engine.contains("M88/S38") || engine.contains("S50")
						|| engine.contains("M52") || engine.contains("S52") || engine.contains("S54") || engine.contains("S55") 
						|| engine.contains("N57") || engine.contains("M57")|| engine.contains("N54") || engine.contains("N55") 
						|| engine.contains("B58") || engine.contains("M54")|| engine.contains("N52") || engine.contains("N53"))
				{
					engine="6 cyl. DOHC ";
				}
				else if(engine.contains("M20") || engine.contains("M30") || engine.contains("M102") || engine.contains("M106"))
				{
					engine="6 cyl. SOHC ";
				}
				else if(engine.contains("M328") || engine.contains("M337") || engine.contains("M335"))
				{
					engine="6 cyl. OHV ";
				}
				else if(engine.contains("M51"))
				{
					engine="6 cyl. OHC ";
				}
				else if(engine.contains("N13") || engine.contains("M41") || engine.contains("M47") || engine.contains("N47") 
						|| engine.contains("B47") || engine.contains("N12") || engine.contains("N14") || engine.contains("N16") 
						|| engine.contains("N18"))
				{
					engine="4 cyl. ";
				}
				else if(engine.contains("N20") ||  engine.contains("N26") || engine.contains("B48") || engine.contains("N40") 
						||  engine.contains("N45") || engine.contains("N43") || engine.contains("S14") ||  engine.contains("M42")
						|| engine.contains("M44") || engine.contains("N42") ||  engine.contains("N46"))
				{
					engine="4 cyl. DOHC ";
				}
				else if(engine.contains("M40") || engine.contains("M10") || engine.contains("M43"))
				{
					engine="4 cyl. SOHC ";
				}
				else if(engine.contains("M78"))
				{
					engine="4 cyl. OHV ";
				}
				else if(engine.contains("OHV V8"))
				{
					engine="OHV ";
				}
				else if(engine.contains("M70") || engine.contains("S70") || engine.contains("M73") || engine.contains("N73"))
				{
					engine="V12 SOHC ";
				}
				else if(engine.contains("B37"))
				{
					engine="3 cyl. ";
				}
				else if(engine.contains("B38"))
				{
					engine="3 cyl. DOHC ";
				}
				else if(engine.contains("S85"))
				{
					engine="V10 ";
				}
				else if(engine.contains("M67") || engine.contains("M60") || engine.contains("M62") || engine.contains("S62")
						|| engine.contains("P60") || engine.contains("N62") || engine.contains("S65") || engine.contains("N63") 
						|| engine.contains("S63"))
				{
					engine="V8 DOHC ";
				}
				else if(engine.contains("N74"))
				{
					engine="V12 DOHC ";
				}

				if(fuelType.contains("M50") || fuelType.contains("N20") || fuelType.contains("M40") || fuelType.contains("M20") || fuelType.contains("N52")
						|| fuelType.contains("B38") || fuelType.contains("M10") || fuelType.contains("S14") || fuelType.contains("M42") || fuelType.contains("M43")
						|| fuelType.contains("M44") || fuelType.contains("N40") || fuelType.contains("N42") || fuelType.contains("N46") || fuelType.contains("N45") 
						|| fuelType.contains("N43")	|| fuelType.contains("N20") || fuelType.contains("N13") || fuelType.contains("N26") || fuelType.contains("B48") 
						|| fuelType.contains("M78")	|| fuelType.contains("M328") || fuelType.contains("M335") || fuelType.contains("M337") || fuelType.contains("M30") 
						|| fuelType.contains("M20") || fuelType.contains("M88/S38")	|| fuelType.contains("M102") || fuelType.contains("M106") || fuelType.contains("M50")
						|| fuelType.contains("S50") || fuelType.contains("M52")	|| fuelType.contains("S52") || fuelType.contains("M54") || fuelType.contains("S54") 
						|| fuelType.contains("M56") || fuelType.contains("N52") || fuelType.contains("N54")	|| fuelType.contains("N53") || fuelType.contains("N55") 
						|| fuelType.contains("S55") || fuelType.contains("B58") || fuelType.contains("OHV V8") || fuelType.contains("M60") || fuelType.contains("M62") 
						|| fuelType.contains("S62") || fuelType.contains("P60") || fuelType.contains("N62") || fuelType.contains("S65") || fuelType.contains("N63") 
						|| fuelType.contains("S63") || fuelType.contains("S85") || fuelType.contains("M70") || fuelType.contains("S70") || fuelType.contains("M73")
						|| fuelType.contains("N73") || fuelType.contains("N74"))
				{
					fuelType="Petrol";
				}
				else if (fuelType.contains("N57") || fuelType.contains("N47") || fuelType.contains("B37") || fuelType.contains("M41") || fuelType.contains("M47")
						|| fuelType.contains("B47") || fuelType.contains("M21") || fuelType.contains("M51") || fuelType.contains("M57") || fuelType.contains("B57")
						|| fuelType.contains("M67")) 
				{
					fuelType="Diesel";
				}
				else{
					fuelType="";
				}
			}
			if(hmBmw.containsKey("Displacement"))
			{
				engineCapacity=hmBmw.get("Displacement").toString(); 
				engineCapacity=engineCapacity.replace(".", "");
				engineCapacity=engineCapacity+"0";
			}
			if(hmBmw.containsKey("Power"))
			{
				kW=hmBmw.get("Power").toString(); 
				double multiplier=1.36;
				int kwint=Integer.parseInt(kW);
				double ps=kwint*multiplier;
				int psint=(int) Math.round(ps);
				PS=Integer.toString(psint);
			}



			String stdequipBmw="";
			if(htmlPage.asText().contains("Standard equipment"))
			{
				HtmlTableBody stdEquipBody=htmlPage.getFirstByXPath("//*[@id='vinTabsSeries']/table/tbody");
				List<HtmlTableRow> stdEquipRows=stdEquipBody.getRows();
				String e,d;
				for(HtmlTableRow tr:stdEquipRows) 
				{
					HtmlTableCell cell1=tr.getCell(0);
					e=cell1.getTextContent();
					HtmlTableCell cell2=tr.getCell(1);
					d=cell2.getTextContent();

					BmwStdEquip se=new BmwStdEquip();
					String equipment=se.setEquipWba(e);
					String description=se.setDescWba(d);
					stdequipBmw=stdequipBmw+equipment+"::"+description+";";
					//stdequipBmw=stdequipBmw+equipment+"::"+group+"::"+description+";";
					stdequipBmw=stdequipBmw.replaceAll("\\s+"," ");
				}
			}

			String optionsBmw="";
			if(htmlPage.asText().contains("Options"))
			{
				HtmlTableBody stdEquipBody=htmlPage.getFirstByXPath("//*[@id='vinTabsOrder']/table/tbody");
				List<HtmlTableRow> stdEquipRows=stdEquipBody.getRows();
				String o,d;
				for(HtmlTableRow tr:stdEquipRows) 
				{
					HtmlTableCell cell1=tr.getCell(0);
					o=cell1.getTextContent();
					HtmlTableCell cell2=tr.getCell(1);
					d=cell2.getTextContent();

					BmwOptions op=new BmwOptions();
					String option=op.setOptionWba(o);
					String description=op.setDescWba(d);

					optionsBmw=optionsBmw+option+"::"+description+";";
					optionsBmw=optionsBmw.replaceAll("\\s+"," ");
				}
			}

			if(stdequipBmw.contains("S205A::Automatic transmission") || optionsBmw.contains("S205A::Automatic transmission")
					|| stdequipBmw.contains("S205 ::Automatic transmission") || optionsBmw.contains("S205 ::Automatic transmission")  
					||  optionsBmw.contains("S2TBA::Sport automatic gearbox") || stdequipBmw.contains("S2TBA::Sport automatic gearbox"))
			{
				transmission="automatic transmission"; 
			}

			else if (stdequipBmw.contains("S2TEA::Automatic transmission w/ shift paddles") || optionsBmw.contains("S2TEA::Automatic transmission w/ shift paddles")) 
			{
				transmission="automatic transmission with shift paddles";
			}
			else if (stdequipBmw.contains("S2TDA::Automatic transm. with w/ twin clutch") || optionsBmw.contains("S2TDA::Automatic transm. with w/ twin clutch")
					|| stdequipBmw.contains("S2TDA::Automatic transmission with w/ twin clutch") || optionsBmw.contains("S2TDA::Automatic transmission with w/ twin clutch")) 
			{
				transmission="automatic transmission with twin clutch";
			}
			else if(stdequipBmw.contains("S2MAA::Manual gearbox") ||  optionsBmw.contains("S2MAA::Manual gearbox")
					|| stdequipBmw.contains("S2MAA::Manual Transmission") ||  optionsBmw.contains("S2MAA::Manual Transmission"))
			{
				transmission="manual transmission";
			}
			else if (stdequipBmw.contains("S207A::6-speed manual transmission") || optionsBmw.contains("S207A::6-speed manual transmission")) 
			{
				transmission="6-speed manual transmission";
			}
			else if (stdequipBmw.contains("S206A::Sequential manual transmission (SMG)") ||  optionsBmw.contains("S206A::Sequential manual transmission (SMG)")
					|| stdequipBmw.contains("S793A::Sequential M Gearbox Drivelogic") ||  optionsBmw.contains("S793A::Sequential M Gearbox Drivelogic")) 
			{
				transmission="sequential manual transmission";
			}
			else if (stdequipBmw.contains("S2TBA::7-speed sport manual gearbox") || stdequipBmw.contains("S2TBA::7-speed sport manual gearbox")) 
			{
				transmission="7-speed manual transmission";
			}
			else if (stdequipBmw.contains("S2TCA::Sport gearbox with twin clutch") || optionsBmw.contains("S2TCA::Sport gearbox with twin clutch")) 
			{
				transmission="twin clutch transmission";
			}
			else if (stdequipBmw.contains("S2TFA::Steptronic with twin-clutch gearbox") ||  optionsBmw.contains("S2TFA::Steptronic with twin-clutch gearbox")) 
			{
				transmission="steptronic twin-clutch transmission";
			}
			else if (stdequipBmw.contains("S202A::Steptronic") ||  optionsBmw.contains("S202A::Steptronic")) 
			{
				transmission="steptronic transmission";
			}
			else
			{
				transmission="";
			}


			partsMapModel=modelDesignation;

			String optEquip=null;

			insertIntoGenVehTable(stdequipBmw, optEquip, optionsBmw);
		}
		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void renault() throws Exception
	{
		make="Renault";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 	

		for(HtmlTableRow tr:vehRows) 
		{
			for(HtmlTableCell td:tr.getCells())
			{
				HtmlTableCell cell1=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[1]/td"); //vin
				str1=cell1.asText();

				HtmlTableCell cell2=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[2]/td"); //model
				str2=cell2.getTextContent();

				HtmlTableCell cell3=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[3]/td"); //year
				str3=cell3.asText();

				HtmlTableCell cell4=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[4]/td"); //engine
				str4=cell4.asText();

				HtmlTableCell cell5=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[5]/td"); //transmission
				str5=cell5.asText();
			}
		}

		NoneVagVeh v=new NoneVagVeh();
		vinNo=v.setVinNo(str1);
		String mod=v.setModel(str2);
		modelOrg=str2;
		String[] split=str2.split("\\s{2,}");
		partsMapModel=split[0].trim();

		Pattern p=Pattern.compile("([(][A-Z][0-9]+[)])");
		Matcher m=p.matcher(mod);
		if (m.find()) 
		{
			String mc=m.group();
			mc=mc.replace("(", "");
			modelCode=mc.replace(")", "");
		}

		if(mod.contains("("))
		{
			String[] b=mod.split("\\(");
			model=b[0].trim();
		}

		int i=model.lastIndexOf(" ");
		if(i>=0)
		{
			model=model.substring(0, i);
		}

		engine=v.setEngine(str4);
		engineOrg=str4;

		Pattern pEncp=Pattern.compile("([0-9][.][0-9])");
		Matcher mEncp=pEncp.matcher(engine);
		if(mEncp.find())
		{
			String str=mEncp.group();
			String enCap=str.replace(".", "");
			enCap=enCap+"00";
			char c=enCap.charAt(0);
			if(c != 0)
			{
				String strPattern = "^0";        
				engineCapacity=enCap.replaceAll(strPattern, "");
			}
		}

		transmission=v.setTransmission(str5);
		transOrg=str5;
		if(transmission.contains("MECHANICAL") || transmission.contains("MECANIQUE"))
		{
			if(transmission.contains("5 RAPPORTS") || transmission.contains("5 GEARS"))
			{
				transmission="5-speed manual transmission";
			}
			else if(transmission.contains("4 RAPPORTS") || transmission.contains("4 GEARS"))
			{
				transmission="4-speed manual transmission";
			}
			else if(transmission.contains("6 RAPPORTS") || transmission.contains("6 GEARS"))
			{
				transmission="6-speed manual transmission";
			}
			else{
				transmission="";
			}
		}
		else if(transmission.contains("AUTOMATIC") || transmission.contains("AUTOMATIQUE"))
		{
			if(transmission.contains("4 RAPPORTS") || transmission.contains("4 GEARS"))
			{
				transmission="4-speed automatic transmission";
			}
			else if(transmission.contains("3 RAPPORTS") || transmission.contains("3 GEARS"))
			{
				transmission="3-speed automatic transmission";
			}
			else if(transmission.contains("5 RAPPORTS") || transmission.contains("5 GEARS"))
			{
				transmission="5-speed automatic transmission";
			}
			else{
				transmission="";
			}
		}
		else if (transmission.contains("EDC 6 RAPPORTS / EDC 6 GEARS")) 
		{
			transmission="6-speed efficient dual clutch transmission";
		}
		else{
			transmission="";
		}

		bodyType=v.setBodyType(str2);
		if(bodyType.contains("Berline/Hatch/Hatchback/Sedan"))
		{
			bodyType="Berline/Hatch/Hatchback/Sedan";
		}
		else if(bodyType.contains("Coupe/Sport Hatch/Sedan"))
		{
			bodyType="Coupe/Sport Hatch/Sedan";
		}
		else if(bodyType.contains("Nevada/Grandtour/Sport Tourer/Touring/Wagon"))
		{
			bodyType="Nevada/Grandtour/Sport Tourer/Touring/Wagon";
		}
		else if(bodyType.contains("Estate/Sport Tourer/Grandtour/Touring"))
		{
			bodyType="Estate/Sport Tourer/Grandtour/Touring";
		}
		else if(bodyType.contains("Estate/Grandtour/Sport Tourer/Touring/Wagon"))
		{
			bodyType="Estate/Grandtour/Sport Tourer/Touring/Wagon";
		}
		else if(bodyType.contains("Berline/Classic/Sedan"))
		{
			bodyType="Berline/Classic/Sedan";
		}
		else if(bodyType.contains("Scenic"))
		{
			bodyType="Compact MPV";
		}
		else if(bodyType.contains("Kangoo"))
		{
			bodyType="Van/MPV";
		}
		else{
			bodyType="";
		}

		yearOfProd=v.setYearOfProd(str3);
		series=v.setSeries(str2);
		String[] s = series.split(" ");
		series = s[1];


		String equipRenault="";
		String optionsRenault="";
		List<HtmlTableRow> equipRows=vehTable.getRows().subList(6, vehRows.size());

		for(HtmlTableRow tr:equipRows) 
		{
			String a,d;
			HtmlTableCell cell1=tr.getCell(0);
			a=cell1.getTextContent();
			HtmlTableCell cell2=tr.getCell(1);
			d=cell2.getTextContent();

			RenaultEquipment oe=new RenaultEquipment();
			String attribute=oe.setAttr(a);
			String description=oe.setDesc(d);

			equipRenault=equipRenault+attribute+"::"+description+";";
			//equipRenault=equipRenault+code+"::"+attribute+"::"+description+";";
			equipRenault=equipRenault.replaceAll("\\s+"," ");
		}


		if(equipRenault.contains("Driveability::4x2"))
		{
			driveType="2-wheel drive";
		}
		else if(equipRenault.contains("Driveability::4x4"))
		{
			driveType="4-wheel drive";
		}
		else if(equipRenault.contains("Driveability::Front wheel drive"))
		{
			driveType="Front wheel drive";
		}
		else if(equipRenault.contains("Driveability::Rear wheel drive"))
		{
			driveType="Rear wheel drive";
		}
		else if(equipRenault.contains("Driveability::All wheel drive"))
		{
			driveType="All wheel drive";
		}
		else
		{
			driveType="";
		}


		fuelType=v.setFuelType(str4);
		if(fuelType.contains("F8M") || fuelType.contains("F8Q") || fuelType.contains("F8QT") || fuelType.contains("F9Q") || fuelType.contains("K9K")
				|| fuelType.contains("^(G)(.*)") || fuelType.contains("^(J)(.*)") || fuelType.contains("M9R") || fuelType.contains("^(P)(.*)") 
				|| fuelType.contains("^(R)(.*)") || fuelType.contains("^(S)(.*)") || fuelType.contains("^(V)(.*)") 
				|| equipRenault.contains("Type of fuel or energy::Diesel"))
		{
			fuelType="Diesel";
		}
		else if(fuelType.contains("B16F") || fuelType.contains("F1N") || fuelType.contains("F2N") || fuelType.contains("F3N") || fuelType.contains("B18KP")
				|| fuelType.contains("B18E") || fuelType.contains("B18EP") || fuelType.contains("B18F") || fuelType.contains("B18FT") || fuelType.contains("F7P")
				|| fuelType.contains("F4P") || fuelType.contains("F3P") || fuelType.contains("B18U") || fuelType.contains("F2R") || fuelType.contains("F3R")
				|| fuelType.contains("F3R") || fuelType.contains("F7R") || fuelType.contains("F5R") || fuelType.contains("F4R") || fuelType.contains("F4RT") 
				|| fuelType.contains("B20F") || fuelType.contains("K4M") || fuelType.contains("K4J") || fuelType.contains("K7M") || fuelType.contains("E7")
				|| fuelType.contains("^(A)(.*)") || fuelType.contains("^(E)(.*)") || fuelType.contains("^(EF)(.*)") || fuelType.contains("^(E)(.*)") 
				|| fuelType.contains("^(H)(.*)") || fuelType.contains("^(M)(.*)") || fuelType.contains("^(X)(.*)") || fuelType.contains("^(Z)(.*)") 
				|| fuelType.contains("^(B1B") || fuelType.contains("^(C)(.*)") || fuelType.contains("^(CH)(.*)") || fuelType.contains("^(D)(.*)") 
				|| fuelType.contains("^(L)(.*)") || equipRenault.contains("Type of fuel or energy::Petrol"))
		{
			fuelType="Petrol";
		}
		else
		{
			fuelType="";
		}

		if(equipRenault.contains("Steering wheel location::Left"))
		{
			driveSide="Left hand drive";
		}
		else if(equipRenault.contains("Steering wheel location::Right"))
		{
			driveSide="Right hand drive";
		}

		String optEquip=null;

		insertIntoGenVehTable(equipRenault, optEquip, optionsRenault);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void mercedes() throws Exception
	{
		make="Mercedes";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		if (vehTable != null)
		{
			List<HtmlTableRow> vehRows=vehTable.getRows(); 		

			HashMap<String, String> hm=new HashMap<String,String>();
			for(HtmlTableRow tr:vehRows)
			{
				hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
			}

			vinNo=hm.get("Vehicle Identification No.").toString();
			if(hm.containsKey("Sales term"))
			{
				String m=hm.get("Sales term").toString();
				if(m.contains("116") || m.contains("109") || m.contains("111") || m.contains("119") || m.contains("123") || m.contains("110")) 
				{
					String st=m.substring(0,3);
					model="Vito "+st;
				}
				else if(m.contains("208") || m.contains("308") || m.contains("408") || m.contains("211") || m.contains("311") || m.contains("411")
						|| m.contains("213") || m.contains("313") || m.contains("413") || m.contains("216") || m.contains("316") || m.contains("416")
						|| m.contains("616") || m.contains("214") || m.contains("314") || m.contains("414") || m.contains("209") || m.contains("309")
						|| m.contains("509") || m.contains("511") || m.contains("215") || m.contains("315") || m.contains("415") || m.contains("515")
						|| m.contains("516") || m.contains("218") || m.contains("318") || m.contains("418") || m.contains("518") || m.contains("319")
						|| m.contains("519") || m.contains("224") || m.contains("324") || m.contains("424") || m.contains("524"))
				{
					String[] st=m.split(" ");
					model="Sprinter "+st[0];
				}
				else if(m.contains("CDI"))
				{
					model=m.replace("CDI", "");
				}
				else
				{
					model=m;
				}
			}

			char ch =vinNo.charAt(9);
			if(ch=='1')
			{
				driveSide="Left hand drive";
			}
			else if (ch=='2') 
			{
				driveSide="Right hand drive";
			}
			else
			{
				driveSide="";
			}

			if(hm.containsKey("Paint Code"))
			{
				exteriorColor=hm.get("Paint Code").toString();
			}

			if(hm.containsKey("Interior"))
			{
				interiorColor=hm.get("Interior").toString();
			}
			else
			{
				interiorColor="";
			}

			orderId=hm.get("Order ID").toString();
			if(hm.containsKey("Delivery date"))
			{
				dateOfProd=hm.get("Delivery date").toString();
				if(dateOfProd != null && !dateOfProd.trim().equals(""))
				{
					final String OLD_FORMAT = "dd.MM.yyyy";
					final String NEW_FORMAT = "MMM dd, yyyy";

					SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
					Date d = sdf.parse(dateOfProd.trim());
					sdf.applyPattern(NEW_FORMAT);
					dateOfProd = sdf.format(d);
				}
			}

			if(!dateOfProd.equals(""))
			{
				String[] splitYr=dateOfProd.split(",");
				yearOfProd=splitYr[1].trim();
			}			

			if(hm.containsKey("Sales term"))
			{
				salesTerm=hm.get("Sales term").toString();
			}

			if(hm.containsKey("Motor number"))
			{
				motorNo=hm.get("Motor number").toString();
			}

			if(hm.containsKey("Other"))
			{
				String other=hm.get("Other").toString();

				Pattern p1=Pattern.compile("(EU approval date:[0-9\\s]+)");
				Matcher m1=p1.matcher(other);
				Pattern p2=Pattern.compile("(EU approval number:\\s\\w\\d[*]\\d+[/]\\d+[*]\\d+[*]\\d+)");
				Matcher m2=p2.matcher(other);
				if(m1.find())
				{
					euApprovDate=m1.group();
					int ind=euApprovDate.indexOf(":");
					euApprovDate=euApprovDate.substring(ind+1).trim();
				}

				if(m2.find())
				{
					euApprovNo=m2.group();
					int ind=euApprovNo.indexOf(":");
					euApprovNo=euApprovNo.substring(ind+1).trim();
				}	
			}		

			if(hm.containsKey("Engine"))
			{
				engine=hm.get("Engine").toString();
				engineOrg=hm.get("Engine").toString();
			}

			if(hm.containsKey("Steering"))
			{
				steeringOrg=hm.get("Steering");
			}

			//AGGREGATES DATA

			String aggsMerc="";
			if(htmlPage.asText().contains("Aggregates"))
			{
				HtmlTableBody aggBody=htmlPage.getFirstByXPath("//*[@id='vinAggregates']/table/tbody");
				List<HtmlTableRow> aggRows=aggBody.getRows();
				String t,d;
				for(HtmlTableRow tr:aggRows) 
				{
					HtmlTableCell cell1=tr.getCell(0);
					t=cell1.getTextContent();
					HtmlTableCell cell2=tr.getCell(1);
					d=cell2.getTextContent();

					MercAggs ag=new MercAggs();
					String type=ag.setType(t);
					String description=ag.setDesc(d);

					aggsMerc=aggsMerc+type+"::"+description+";";
					aggsMerc=aggsMerc.replaceAll("\\s+"," ");
				}
				aggMercSmart=aggsMerc;
			}

			//EQUIPMENT DATA

			String equipMerc="";
			if(htmlPage.asText().contains("Equipment"))
			{
				//*[@id='vinSaCodes']/table/tbody
				HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinEquipmentCodes']/table/tbody");
				List<HtmlTableRow> equipRows=equipBody.getRows();
				String a,d;
				for(HtmlTableRow tr:equipRows) 
				{
					HtmlTableCell cell1=tr.getCell(0);
					a=cell1.getTextContent();
					HtmlTableCell cell2=tr.getCell(1);
					d=cell2.getTextContent();

					MercEquip eq=new MercEquip();
					String attrMerc=eq.setAttr(a);
					String descMerc=eq.setDesc(d);

					equipMerc=equipMerc+attrMerc+"::"+descMerc+";";
					//equipMerc=equipMerc+attrMerc+"::"+group+"::"+descMerc+";";
					equipMerc=equipMerc.replaceAll("\\s+"," ");
				}
			}

			if(htmlPage.asText().contains("VPD-Data"))
			{
				HtmlTableBody vpdBody=htmlPage.getFirstByXPath("//*[@id=\"vinVpds\"]/table/tbody");
				List<HtmlTableRow> vpdRows=vpdBody.getRows();
				String a,b,c;
				for(HtmlTableRow tr:vpdRows) 
				{
					HtmlTableCell cell1=tr.getCell(0);
					a=cell1.getTextContent();
					HtmlTableCell cell2=tr.getCell(1);
					b=cell2.getTextContent();
					HtmlTableCell cell3=tr.getCell(2);
					c=cell3.getTextContent();

					String attr=a;
					String desc1=b;
					String desc2=c;

					vpdDataMercSmart=vpdDataMercSmart+attr+"::"+desc1+"::"+desc2+";";
					//equipMerc=equipMerc+attrMerc+"::"+group+"::"+descMerc+";";
					vpdDataMercSmart=vpdDataMercSmart.replaceAll("\\s+"," ");
				}
			}

			String s="(ENGINE\\s[M|OM]+[0-9]+)|(ENGINE\\s[M|OM]+\\s[0-9]+)";
			Pattern pEng=Pattern.compile(s);
			Matcher mEng=pEng.matcher(equipMerc);
			if(mEng.find())
			{
				String a=mEng.group();
				int in=a.indexOf(" ");
				a=a.substring(in);
				char b=a.charAt(3);
				if (b==' ') 
				{
					String[] splitEng=a.split(" ");
					engine=splitEng[1]+splitEng[2];
				}
				else
				{
					String[] splitEng=a.split(" ");
					engine=splitEng[1];
				}				
			}
			else
			{
				engine="";
			}
			Pattern pEn=Pattern.compile("(Engine - [0-9\\s]+)|(Engine::[0-9\\s]+)");
			Matcher mEn=pEn.matcher(aggsMerc);
			if(mEn.find())
			{
				String ab=mEn.group();
				ab=ab.substring(8);
				if(!(engine.isEmpty()))
				{
					engine=engine+"("+ab+")";
				}
				else
				{
					engine=ab;
				}

				engineCode=ab;
			}

			if(hm.containsKey("Automatic transmission"))
			{
				transmission="automatic transmission";
				transCode=hm.get("Automatic transmission").toString();
				transOrg=hm.get("Automatic transmission").toString();
			}
			else if(hm.containsKey("Manual transmission")) 
			{
				transmission="manual transmission";
				transCode=hm.get("Manual transmission").toString();
				transOrg=hm.get("Manual transmission").toString();
			}	
			else if(hm.containsKey("Gearbox")) 
			{
				transmission="manual transmission";
				transCode=hm.get("Gearbox").toString();
				transOrg=hm.get("Gearbox").toString();
			}
			else if(hm.containsKey("Transmission")) 
			{
				transCode=hm.get("Transmission").toString();
				transOrg=hm.get("Transmission").toString();
			}	
			else if (equipMerc.contains("MANUAL TRANSMISSION")) 
			{
				transmission="manual transmission";
			}
			else if(equipMerc.contains("AUTOMATIC TRANSMISSION"))
			{
				if(equipMerc.contains("DUAL CLUTCH") && equipMerc.contains("7-SPEED"))
				{
					transmission="7-speed automatic dual clutch transmission";
				}
				else if(equipMerc.contains("7-SPEED"))
				{
					transmission="7-speed automatic transmission";
				}
				else if (equipMerc.contains("5-SPEED")) 
				{
					transmission="5-speed automatic transmission";
				}
				else if (equipMerc.contains("4-SPEED")) 
				{
					transmission="4-speed automatic transmission";
				}
				else if (equipMerc.contains("3-SPEED")) 
				{
					transmission="3-speed automatic transmission";
				}
				else
				{
					transmission="automatic transmission";
				}
			}
			else
			{
				transmission=" ";
			}

			Pattern a=Pattern.compile("^(A)");
			Matcher ma=a.matcher(model);
			Pattern b=Pattern.compile("^(B)");
			Matcher mb=b.matcher(model);
			Pattern c=Pattern.compile("^(C[^LA|LK|LA|LC])");
			Matcher mc=c.matcher(model);
			Pattern e=Pattern.compile("^(E)");
			Matcher me=e.matcher(model);
			Pattern ss=Pattern.compile("^(S[^LK|LC|L|LS|LR])");
			Matcher mss=ss.matcher(model);
			Pattern cla=Pattern.compile("^(CLA)");
			Matcher mcla=cla.matcher(model);
			Pattern cls=Pattern.compile("^(CLS)");
			Matcher mcls=cls.matcher(model);
			Pattern clc=Pattern.compile("^(CLC)");
			Matcher mclc=clc.matcher(model);
			Pattern clk=Pattern.compile("^(CLK)");
			Matcher mclk=clk.matcher(model);
			Pattern cl=Pattern.compile("^(CL[^CLA|CLK|CLS|CLC])");
			Matcher mcl=cl.matcher(model);
			Pattern sl=Pattern.compile("^(SL)");
			Matcher msl=sl.matcher(model);
			Pattern gt=Pattern.compile("(GT)");
			Matcher mgt=gt.matcher(model);
			Pattern r=Pattern.compile("^(R)");
			Matcher mr=r.matcher(model);
			Pattern v=Pattern.compile("^(V[^Vito])");
			Matcher mv=v.matcher(model);
			Pattern gla=Pattern.compile("^(GLA)");
			Matcher mgla=gla.matcher(model);
			Pattern glk=Pattern.compile("^(GLK)");
			Matcher mglk=glk.matcher(model);
			Pattern glc=Pattern.compile("^(GLC)");
			Matcher mglc=glc.matcher(model);
			Pattern mix=Pattern.compile("^(M)|^(GL[^GLA|GLK|GLC])|^(G[^GL|GLE|GLS|GLA|GLK|GLC])");
			Matcher mmix=mix.matcher(model);
			Pattern x=Pattern.compile("^(X)");
			Matcher mx=x.matcher(model);
			if(ma.find())
			{
				bodyType="Hatchback/Sedan";
				doors="";
			}
			else if(model.contains("Sprinter"))
			{
				bodyType="Van";
				doors="";
			}
			else if (model.contains("Vito")) 
			{
				bodyType="Van";
				doors="";
			}
			else if (mb.find()) 
			{
				bodyType="MPV/Hatchback";
				doors="4";
			}

			else if (mc.find()) 
			{
				bodyType="Sedan/Estate";
				doors="";
			}
			else if (me.find()) 
			{
				bodyType="Sedan/Estate";
				doors="";
			}
			else if (mss.find()) 
			{
				bodyType="Sedan/Coupe";
				doors="";
			}
			else if (mcla.find()) 
			{
				bodyType="Coupe/Shooting-brake";
				doors="";
			}
			else if (mcls.find()) 
			{
				bodyType="Coupe/Shooting-brake";
				doors="";
			}
			else if (mclc.find()) 
			{
				bodyType="Sedan/Estate/Coupe/Cabriolet";
				doors="";
			}
			else if (mclk.find()) 
			{
				bodyType="Coupe/Convertible";
				doors="2";
			}
			else if (mcl.find()) 
			{
				bodyType="Coupe";
				doors="2";
			}
			else if (msl.find()) 
			{
				bodyType="Roadster/Coupe";
				doors="2";
			}

			else if (mgt.find()) 
			{
				bodyType="Fastback Coupe/Roadster";
				doors="2";
			}

			else if (mr.find()) 
			{
				bodyType="MPV";
				doors="5";
			}
			else if (mv.find()) 
			{
				bodyType="MPV";
				doors="";
			}
			else if (mgla.find()) 
			{
				bodyType="SUV";
				doors="4";
			}
			else if (mglk.find()) 
			{
				bodyType="SUV";
				doors="";
			}
			else if (mglc.find()) 
			{
				bodyType="SUV";
				doors="";
			}
			else if (mmix.find()) 
			{
				bodyType="SUV";
				doors="";
			}

			else if (mx.find()) 
			{
				bodyType="Pickup truck";
				doors="";
			}

			else{
				driveType="";
				bodyType="";
				doors="";
			}

			Pattern p= Pattern.compile("([0-9]+ KW)|([0-9]+KW)");
			Matcher mkW=p.matcher(equipMerc);
			if(mkW.find())
			{
				String s1=mkW.group();
				String[] splitkW=s1.split(" ");
				kW=splitkW[0];
				kW=kW.replace("KW", "");
			}
			else{
				kW="";
			}


			Pattern p1= Pattern.compile("([0-9]+ HP)|([0-9]+HP)");
			Matcher m1=p1.matcher(equipMerc);
			if(m1.find())
			{
				String s2=m1.group();
				String[] splitPs=s2.split(" ");
				PS=splitPs[0];
				PS=PS.replace("HP", "");
			}
			else{
				PS="";
			}

			Pattern pEngCap1=Pattern.compile("(DISPLACEMENT\\s[0-9].[0-9]\\sLITER)");
			Pattern pEngCap2=Pattern.compile("([0-9][,|.][0-9]\\sLITER\\sDISPLACEMENT)");
			Pattern pEngCap3=Pattern.compile("(CAPACITY\\s[0-9][,|.][0-9]\\sLITRE)");
			Matcher mEngCap1=pEngCap1.matcher(equipMerc);
			Matcher mEngCap2=pEngCap2.matcher(equipMerc);
			Matcher mEngCap3=pEngCap3.matcher(equipMerc);
			if(mEngCap1.find())
			{
				String aec1=mEngCap1.group();
				String[] bec1=aec1.split(" ");
				engineCapacity=bec1[1].replace(".", "");
				engineCapacity=engineCapacity+"00";		
			}
			if(mEngCap2.find())
			{
				String aec2=mEngCap2.group();
				String[] bec2=aec2.split(" ");
				engineCapacity=bec2[0].replace(".", "");
				engineCapacity=engineCapacity+"00";		
			}
			if(mEngCap3.find())
			{
				String aec3=mEngCap3.group();
				String[] bec3=aec3.split(" ");
				engineCapacity=bec3[1].replace(",", "");		
				engineCapacity=engineCapacity+"00";	
			}
			else if (model.contains("SLS")) 
			{
				engineCapacity="4000";
			}
			else if (model.contains("SLR")) 
			{
				engineCapacity="5400";
			}
			else{
				engineCapacity="";
			}

			if (equipMerc.contains("DIESEL")) 
			{
				fuelType="Diesel";
			}
			else if(equipMerc.contains("GASOLINE") || equipMerc.contains("PETROL"))
			{
				fuelType="Petrol";
			}
			else
			{
				fuelType="";
			}

			HtmlAnchor an=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[4]/a");
			String merca=an.getAttribute("title");
			partsMapModel=merca.replace("Model", "").trim();
			String[] split = partsMapModel.split(" ");
			modelCode = split[0].trim();

			//OPTIONS DATA

			String optionsMerc="";
			if(htmlPage.asText().contains("Options"))
			{
				HtmlTableBody optBody=htmlPage.getFirstByXPath("//*[@id='vinSaNumbers']/table/tbody");
				List<HtmlTableRow> optRows=optBody.getRows();
				String o,d;
				for(HtmlTableRow tr:optRows) 
				{
					HtmlTableCell cell1=tr.getCell(0);
					o=cell1.getTextContent();
					HtmlTableCell cell2=tr.getCell(1);
					d=cell2.getTextContent();

					MercOptions op=new MercOptions();
					String optionMerc=op.setOpt(o);
					String descMerc=op.setDesc(d);

					optionsMerc=optionsMerc+optionMerc+"::"+descMerc+";";
					optionsMerc=optionsMerc.replaceAll("\\s+"," ");
				}
			}

			String optEquip=null;

			insertIntoGenVehTable(equipMerc, optEquip, optionsMerc);

			// portal button click to get back to welcome page to search next VIN
			gotoHomePage();
		}
		else {
			IsFound2();
		}
	}

	public static void opelvauxhall() throws Exception
	{
		make="Opel";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		HashMap<String, String> hm=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		vinNo=hm.get("Vehicle Identification No.").toString();
		modelCode=hm.get("Model Code").toString();
		bodyStyleCode=hm.get("Body").toString();
		packageCode=hm.get("Package Code").toString();
		yearOfProd=hm.get("Year").toString();
		String[] split=yearOfProd.split(" ");
		yearOfProd=split[0];
		dateOfProd=hm.get("Date of production").toString();
		regDate=hm.get("Registration Date").toString();
		engineCode=hm.get("Engine Code").toString();
		transCode=hm.get("Transmission Code").toString();
		engineType=hm.get("Engine Type").toString();
		engineSerialNo=hm.get("Engine serial no").toString();
		extColorCode=hm.get("Color Option").toString();
		upholIntCode=hm.get("Upholstery Code").toString();



		HtmlAnchor an=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
		String a=an.getAttribute("title");
		String modstr=a.substring(a.indexOf(":")+1, a.indexOf("[")).trim();

		model=modstr.substring(modstr.indexOf("-")+1, modstr.length()).trim();

		String c=vinNo.substring(7, 9);

		if(c.equals("48"))
		{
			bodyType="Hatchback";
		}
		else if (c.equals("08")) 
		{
			bodyType="Sedan, fastback";
			doors="2";
		}
		else if(c.equals("06") || c.equals("35") || c.equals("75"))
		{
			bodyType="Estate";
			doors="4";
		}
		else if(c.equals("07"))
		{
			bodyType="Coupe, fastback";
			doors="2";
		}
		else if(c.equals("19") || c.equals("69"))
		{
			bodyType="Sedan, notchback";
			doors="4";
		}
		else if(c.equals("25"))
		{
			bodyType="Van";
			doors="3";
		}
		else if(c.equals("67"))
		{
			bodyType="Convertible";
			doors="2";
		}
		else if(c.equals("68"))
		{
			bodyType="Sedan, fastback";
			doors="4";
		}
		else if(c.equals("70"))
		{
			bodyType="Van";
			doors="2";
		}
		else if(c.equals("92"))
		{
			bodyType="Targa";
			doors="2";
		}
		else if(c.equals("97"))
		{
			bodyType="Roadster";
			doors="2";
		}
		else if(model.equals("Crossland X"))
		{
			bodyType="SUV";
		}

		//EQUIPMENT DATA

		String equipOpel="";
		String optionsOpel=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String at,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				at=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				OpelEquip eq=new OpelEquip();
				String attribute=eq.setAttr(at);
				String description=eq.setDesc(d);

				equipOpel=equipOpel+attribute+"::"+description+";";
				//equipOpel=equipOpel+attribute+"::"+group+"::"+description+";";
				equipOpel=equipOpel.replaceAll("\\s+"," ");
			}
		}

		//driveside
		if(equipOpel.contains("LEFT HAND DRIVE"))
		{
			driveSide="Left hand drive";
		}
		else if (equipOpel.contains("RIGHT HAND DRIVE")) 
		{
			driveSide="Right hand drive";
		}

		//fueltype
		if(equipOpel.contains("PETROL") || equipOpel.contains("GASOLINE"))
		{
			fuelType="Petrol";
		}
		else if (equipOpel.contains("DIESEL")) 
		{
			fuelType="Diesel";
		}

		//transmission
		if(equipOpel.contains("TRANS-MAN"))
		{
			if(equipOpel.contains("5-SPEED") || equipOpel.contains("5-SPD"))
			{
				transmission="5-speed manual transmission";
			}
			else if(equipOpel.contains("4-SPEED") || equipOpel.contains("4-SPD"))
			{
				transmission="4-speed manual transmission";
			}
			else if(equipOpel.contains("6-SPEED") || equipOpel.contains("6-SPD"))
			{
				transmission="6-speed manual transmission";
			}
			else if(equipOpel.contains("3-SPEED") || equipOpel.contains("3-SPD"))
			{
				transmission="3-speed manual transmission";
			}
			else if(equipOpel.contains("7-SPEED") || equipOpel.contains("7-SPD"))
			{
				transmission="7-speed manual transmission";
			}
			else 
			{
				transmission="manual transmission";
			}
		}
		else if (equipOpel.contains("TRANS-AUTO")) 
		{
			if(equipOpel.contains("4 SPEED") || equipOpel.contains("4-SPD"))
			{
				transmission="4-speed automatic transmission";
			}
			else if(equipOpel.contains("3 SPEED") || equipOpel.contains("3-SPD"))
			{
				transmission="3-speed automatic transmission";
			}
			else if(equipOpel.contains("5 SPEED") || equipOpel.contains("5-SPD"))
			{
				transmission="5-speed automatic transmission";
			}
			else if(equipOpel.contains("6 SPEED") || equipOpel.contains("6-SPD"))
			{
				transmission="6-speed automatic transmission";
			}
			else if(equipOpel.contains("8 SPEED") || equipOpel.contains("8-SPD"))
			{
				transmission="8-speed automatic transmission";
			}
			else if(equipOpel.contains("9 SPEED") || equipOpel.contains("9-SPD"))
			{
				transmission="9-speed automatic transmission";
			}
			else 
			{
				transmission="automatic transmission";
			}
		}

		//engine
		Pattern p=Pattern.compile("("+engineCode+"::(.*);)");
		Matcher m=p.matcher(equipOpel);
		if(m.find())
		{
			String str=m.group();
			String[] s=str.split(";");
			engine=s[0].replace(""+engineCode+"::", "");
			if(engine.contains("PETROL"))
			{
				fuelType="Petrol";
			}
			else if (engine.contains("DIESEL")) 
			{
				fuelType="Diesel";
			}

		}

		Pattern pencap=Pattern.compile("([0-9].[0-9]L)");
		Matcher mencap=pencap.matcher(engine);
		if(mencap.find())
		{
			String str=mencap.group();
			engineCapacity=str.replace("L", "00");
			engineCapacity=engineCapacity.replace(".", "");
		}

		else if(engineType.contains("10"))
		{
			engineCapacity="1000";
		}
		else if(engineType.contains("12"))
		{
			engineCapacity="1200";
		}
		else if(engineType.contains("13"))
		{
			engineCapacity="1300";
		}
		else if(engineType.contains("14") || engineType.contains("L95") || engineType.contains("LDT") || engineType.contains("LUV")
				|| engineType.contains("LV7") || engineType.contains("LE2"))
		{
			engineCapacity="1400";
		}
		else if(engineType.contains("15") || engineType.contains("LV8") || engineType.contains("L3A") || engineType.contains("LFV")
				|| engineType.contains("LYX"))
		{
			engineCapacity="1500";
		}
		else if(engineType.contains("16") || engineType.contains("L73") || engineType.contains("L91") || engineType.contains("LXT") 
				|| engineType.contains("LDE") || engineType.contains("LXV") || engineType.contains("R9M-408") || engineType.contains("R9M-413")
				|| engineType.contains("R9M-450") || engineType.contains("R9M-452"))
		{
			engineCapacity="1600";
		}
		else if(engineType.contains("17"))
		{
			engineCapacity="1700";
		}
		else if(engineType.contains("18") || engineType.contains("LH8") || engineType.contains("LA5") || engineType.contains("LKN"))
		{
			engineCapacity="1800";
		}
		else if(engineType.contains("F9Q-760") || engineType.contains("F8Q-600") || engineType.contains("F8Q-606") || engineType.contains("F9Q-762") 
				|| engineType.contains("F9Q-770") || engineType.contains("F9Q-772") || engineType.contains("F9Q-774"))
		{
			engineCapacity="1900";
		}
		else if(engineType.contains("20") || engineType.contains("LT2") || engineType.contains("LE4") || engineType.contains("LT3")
				|| engineType.contains("M9R-780") || engineType.contains("M9R-782") || engineType.contains("M9R-786") 
				|| engineType.contains("M9R-630") || engineType.contains("M9R-784") || engineType.contains("M9R-788") 
				|| engineType.contains("M9R-692") || engineType.contains("4F-C1"))
		{
			engineCapacity="2000";
		}
		else if(engineType.contains("22") || engineType.contains("G9T-720") || engineType.contains("G9T-722") || engineType.contains("G9T-750"))
		{
			engineCapacity="2200";
		}
		else if(engineType.contains("M9T-670") || engineType.contains("M9T-676") || engineType.contains("M9T-694")
				|| engineType.contains("M9T-698") || engineType.contains("M9T-704"))
		{
			engineCapacity="2300";
		}
		else if(engineType.contains("24"))
		{
			engineCapacity="2400";
		}
		else if(engineType.contains("25") || engineType.contains("G9U-630") || engineType.contains("G9U-730") 
				|| engineType.contains("S8U-782") || engineType.contains("S8U-758") || engineType.contains("S8U-770")
				|| engineType.contains("S8U-772") || engineType.contains("S8U-780") || engineType.contains("G9U-754") 
				|| engineType.contains("G9U-632") || engineType.contains("G9U-650") || engineType.contains("G9U-720")
				|| engineType.contains("G9U-724") || engineType.contains("G9U-750"))
		{
			engineCapacity="2500";
		}
		else if(engineType.contains("S9W-700") || engineType.contains("S9W-702"))
		{
			engineCapacity="2800";
		}
		else if(engineType.contains("30"))
		{
			engineCapacity="3000";
		}
		else if(engineType.contains("32"))
		{
			engineCapacity="3200";
		}


		if(equipOpel.contains("FWD::CHASSIS FRONT WHEEL DRIVE-FWD"))	
		{
			driveType="Front wheel drive";
		}
		else if(equipOpel.contains("RWD::CHASSIS REAR WHEEL DRIVE-RWD"))	
		{
			driveType="Rear wheel drive";
		}

		HtmlAnchor anOpel=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
		String opela=anOpel.getAttribute("title");
		partsMapModel=opela.substring(opela.indexOf(":")+1, opela.length()).trim().replaceAll("\\s+", " ").replace("[", "").replace("]", "");

		String query="select `modelCode`,`model`,`carline`,`body`,`cc`,`fuelType`,`kw`,`ps`,`package` from `opel_models` where `model`='"+modelCode+"' and `package`='"+packageCode+"'";
		Statement stmt=connect.createStatement();
		ResultSet rs=stmt.executeQuery(query);
		if(rs.next())
		{
			model=rs.getString("carline");
			engineCapacity=rs.getString("cc");
			bodyType=rs.getString("body");
			fuelType=rs.getString("fuelType");
			kW=rs.getString("kw");
			PS=rs.getString("ps");

		}

		String optEquip=null;

		insertIntoGenVehTable(equipOpel, optEquip, optionsOpel);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void vag() throws Exception
	{
		HtmlTableBody vehTable = htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");

		if (vehTable != null) 
		{
			//			List<HtmlTableRow> vehRows = vehTable.getRows();

			String date = null, str1 = null, str2 = null, str3 = null, str4 = null, str5 = null, str6 = null, str7 = null, str8 = null, 
					str9 = null,str10=null,str11=null,str12 = null,str13=null,str14=null;
			//			for (HtmlTableRow tr : vehRows) 
			//			{
			//				for (HtmlTableCell td : tr.getCells()) 
			//				{
			HtmlTableCell vin = vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[1]/td"); //vin
			str1 = vin.asText();

			HtmlTableCell model=vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[2]/td");  //model
			str10=model.asText();
			str10=str10.replaceAll("\\s{2,}", " ");

			HtmlTableCell salesType = vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[5]/td");  //salestype
			str2 = salesType.asText();

			HtmlTableCell color = vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[10]/td");  //roof color
			str3 = color.asText();

			HtmlTableCell equip = vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[9]/td");  //equipment
			str4 = equip.asText();

			HtmlTableCell engineCode = vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[6]/td");  //engine code
			str5 = engineCode.asText();

			HtmlTableCell transCode = vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[7]/td");  //transmission code
			str6 = transCode.asText();

			HtmlTableCell axleCode = vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[8]/td");  //axle drive
			str7 = axleCode.asText();

			HtmlTableCell dom = vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td");  //dop
			str8 = dom.asText();
			date = str8.replace(".", "");

			HtmlTableCell year = vehTable.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[4]/td");  //model year
			str9 = year.asText();

			HtmlTableCell paintCol = vehTable.getFirstByXPath("//*[@id=\"vinTabsGeneral\"]/table/tbody/tr[12]/td");  //ext col/paint code
			str11 = paintCol.asText();

			HtmlTableCell carpetColCode = vehTable.getFirstByXPath("//*[@id=\"vinTabsGeneral\"]/table/tbody/tr[11]/td");  //carpet colour code
			str12 = carpetColCode.asText();

			HtmlTableCell seatCombNo = vehTable.getFirstByXPath("//*[@id=\"vinTabsGeneral\"]/table/tbody/tr[13]/td");  //seat combination no.
			str13 = seatCombNo.asText();

			HtmlTableCell noofZOrd = vehTable.getFirstByXPath("//*[@id=\"vinTabsGeneral\"]/table/tbody/tr[14]/td");  //no.of z-orders
			str14 = noofZOrd.asText();
			//				}
			//			}

			String s=str11.substring(str11.indexOf("/")+1, str11.length()).trim();
			String ce = str3 + str3 + str4 + s.trim();


			HtmlAnchor an=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
			String vaga=an.getAttribute("title");
			partsMapModel=vaga.substring(0, vaga.lastIndexOf(" "));

			////////// SCRAPING PR NUMBERS///////////////

			HtmlTable prTable = htmlPage.getFirstByXPath("//div[@id='vinTabsPrNumbers']/table[@class='vinInfoTable']");
			int rowSize = prTable.getRows().size();
			String prcodes = "";

			for (int i = 0; i < rowSize; i++) 
			{
				prcodes += prTable.getCellAt(i, 1).getTextContent();
			}


			hmPrGrpDesc = new HashMap<String,List<String>>();

			List<HtmlTableRow> prRows=prTable.getRows(); 

			if(!prRows.isEmpty())
			{
				for(HtmlTableRow tr:prRows)
				{
					List<String> values = new ArrayList<String>();
					values.add(tr.getCell(0).asText());
					values.add(tr.getCell(2).asText());
					hmPrGrpDesc.put(tr.getCell(1).asText(), values);

				}
			}
			//			VagVehicle v = new VagVehicle();
			//			String vin = v.setVin(str1);
			//			String model=v.setModel(str10);
			//			String salesType = v.setSalesType(str2);
			//			String colorEquip = v.setColorEquip(ce);
			//			String engineCode = v.setEngineCode(str5);
			//			String subModel = "";
			//			String transCode = v.setTransCode(str6);
			//			String axleCode = v.setAxleCode(str7);
			//			String dom = v.setDom(date);
			//			String spmod = "";
			//			String year = v.setYear(str9);
			//			String wmi = str1.substring(0, 3);
			//			String equipm = str4;
			//			String roofcol = str3;
			//			String carColCode = str12;
			//			String paintCode = str11;
			//			String seatcombNo = str13;
			//			String noofzorders = str14;

			insertIntoVagVehTable(str1, str10, partsMapModel, str2, ce, str5, "", str6, str7, date, str4,
					str3, str12, str11, str13, str14, "",str9, prcodes, str1.substring(0, 3), apiKeyId);			


			insertPrCodes(hmPrGrpDesc);

			// portal button click to get back to welcome page to search next VIN
			gotoHomePage();

		}
	}

//	public static void insertLRPrCodes(HashMap<String,String> hmPrGrpDesc) throws Exception
//	{
//		String sqlQuery = "insert into `lrproptions` (`Vin`,`group`,`description`) values (?,?,?)";
//		PreparedStatement modelValueInsert = connect.prepareStatement(sqlQuery);
//		for (String key2 : hmPrGrpDesc.keySet()) 
//		{
//		
//				modelValueInsert.setString(1, vin);
//				modelValueInsert.setString(2, key2);
//				modelValueInsert.setString(3, hmPrGrpDesc.get(key2));
//				modelValueInsert.addBatch();
//			
//		}
//		int[] result = modelValueInsert.executeBatch();
//		System.out.println("The number of rows inserted in proptions: "+ result.length);
//	}
//	
	public static void insertPrCodes(HashMap<String, List<String>> hmPrGrpDesc) throws Exception
	{

		HashMap<String, String> hmPrVin=new HashMap<String,String>();
		String sqlQuery = "";
		if(Service.equals("VAG"))
		{
			sqlQuery = "insert into `vagproptions` (PrNumber,`group`,`description`) values (?,?,?)";
			hmPrVin = hmPrVinVAG;
		}
		else if (Service.equals("POR"))
		{
			sqlQuery = "insert into `porscheproptions` (PrNumber,`group`,`description`) values (?,?,?)";
			hmPrVin = hmPrVinPOR;
		}
		PreparedStatement modelValueInsert = connect.prepareStatement(sqlQuery);

		for (String key2 : hmPrGrpDesc.keySet()) 
		{
			if(hmPrVin.get(key2) == null)
			{
				hmPrVin.put(key2, key2);
				modelValueInsert.setString(1, key2);
				modelValueInsert.setString(2, hmPrGrpDesc.get(key2).get(0));
				modelValueInsert.setString(3, hmPrGrpDesc.get(key2).get(1));
				modelValueInsert.addBatch();
			}
		}

		int[] result = modelValueInsert.executeBatch();
		System.out.println("The number of rows inserted in proptions: "+ result.length);
		if(Service.equals("VAG"))
		{
			hmPrVinVAG = hmPrVin;
		}
		else if (Service.equals("POR"))
		{
			hmPrVinPOR = hmPrVin;
		}
	}

	public static void citroen() throws Exception
	{
		make="Citroen";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		HashMap<String, String> hm=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		vinNo=hm.get("Vehicle Identification No.").toString();
		model=hm.get("Model").toString();
		partsMapModel=model;
		if(hm.containsKey("ENGINE"))
		{
			engine=hm.get("ENGINE").toString();
		}

		Pattern pPs=Pattern.compile("[0-9]+\\sHP");
		Matcher mPs=pPs.matcher(engine);
		if(mPs.find())
		{
			String s=mPs.group();
			System.out.println("S::"+s);
			String[] split=s.split(" ");
			PS=split[0];

		}

		if(!PS.equals(""))
		{
			double divider=1.36;
			int psint=Integer.parseInt(PS);
			double kw=psint/divider;
			int kwint=(int) Math.round(kw);
			kW=Integer.toString(kwint);
		}	


		if(hm.containsKey("COMMERCIAL MARQUE/COMPONENT TYPE"))
		{
			commMarCompTypeCitroenPeugeot=hm.get("COMMERCIAL MARQUE/COMPONENT TYPE");
		}

		if(hm.containsKey("SILHOUETTE"))
		{
			String silhouette=hm.get("SILHOUETTE").toString();
			silhoutteCitroenPeugeot=hm.get("SILHOUETTE").toString();
			if(silhouette.contains("VAN"))
			{
				bodyType="Van";
			}
			else if(silhouette.contains("S.U.V."))
			{
				bodyType="SUV";
			}
			else 
			{
				String[] split=silhouette.split(" ");
				if(silhouette.matches(".*\\d+.*"))
				{
					if(silhouette.contains("-"))
					{
						bodyType=split[1];
					}
					else 
					{
						bodyType=split[2];
					}	
				}
				else if(split.length > 1)
				{
					bodyType=split[1];
				}
				else if(split.length > 0)
				{
					bodyType=split[0];
				}
			}	
		}

		if(hm.containsKey("Start of warranty"))
		{
			startOfWarr=hm.get("Start of warranty").toString();
			startOfWarr = startOfWarr.trim();
		}
		if(!startOfWarr.equals(""))
		{
			String[] split=startOfWarr.split(",");
			yearOfProd=split[1];
		}

		dam=hm.get("DAM").toString();
		if(hm.containsKey("Factory code"))
		{
			factoryCode=hm.get("Factory code").toString();
		}

		if(hm.containsKey("Service Information"))
		{
			euApprovNo=hm.get("Service Information").toString();
		}
		if(hm.containsKey("Engine serial no"))
		{
			engineSerialNo=hm.get("Engine serial no").toString();
		}
		if(hm.containsKey("Transmission serial no"))
		{
			transSerialNo=hm.get("Transmission serial no").toString();
		}
		if(hm.containsKey("Car Body"))
		{
			carBody=hm.get("Car Body").toString();
		}
		if(hm.containsKey("PRODUCT TYPE"))
		{
			prodType=hm.get("PRODUCT TYPE").toString();
		}
		if(hm.containsKey("TRIM LEVEL"))
		{
			trimLevel=hm.get("TRIM LEVEL").toString();
		}	
		if(hm.containsKey("COUNTRY TYPE"))
		{
			market=hm.get("COUNTRY TYPE").toString();
		}
		if(hm.containsKey("SPECIAL SPECIFICATION"))
		{
			speSpec=hm.get("SPECIAL SPECIFICATION").toString();
		}
		if(hm.containsKey("MODEL YEAR"))
		{
			modelYear=hm.get("MODEL YEAR").toString();
		}
		if(hm.containsKey("MODIF. DURING MODEL YEAR"))
		{
			modifDurModYear=hm.get("MODIF. DURING MODEL YEAR").toString();
		}
		if(hm.containsKey("PAINT TYPE"))
		{
			paintType=hm.get("PAINT TYPE").toString();
		}
		if(hm.containsKey("BODY COLOUR"))
		{
			exteriorColor=hm.get("BODY COLOUR").toString();
		}
		if(hm.containsKey("INTERIOR TRIM TYPE"))
		{
			intTrimType=hm.get("INTERIOR TRIM TYPE").toString();
		}
		if(hm.containsKey("UPHOLSTERY COLOUR"))
		{
			upholIntCode=hm.get("UPHOLSTERY COLOUR").toString();
		}

		//EQUIPMENT DATA

		String equipCitroen="";
		String optionsCitroen=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String g,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				g=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				CitroenEquip eq=new CitroenEquip();
				String group=eq.setGroup(g);
				String description=eq.setDesc(d);

				equipCitroen=equipCitroen+group+"::"+description+";";
				//equipCitroen=equipCitroen+code+"::"+group+"::"+description+";";
				equipCitroen=equipCitroen.replaceAll("\\s+"," ");
			}
		}

		if(equipCitroen.contains("AUTO GEARBOX") || equipCitroen.contains("Auto gearbox") || equipCitroen.contains("Automatic gearbox")
				|| equipCitroen.contains("AUTOMATIC GEARBOX"))
		{
			transmission="Automatic transmission";
		}
		else if (equipCitroen.contains("MANUAL GEARBOX") || equipCitroen.contains("Manual gearbox")) 
		{
			transmission="Manual transmission";
		}
		else if(hm.containsKey("TRANSMISSION"))
		{
			String tr=hm.get("TRANSMISSION").toString();
			if(tr.contains("Auto gearbox"))
			{
				transmission="Automatic transmission";
			}
			else
			{
				transCode=hm.get("TRANSMISSION").toString();
			}
		}

		if(equipCitroen.contains("FUEL::LEAD FREE PETROL"))
		{
			fuelType="Petrol - Unleaded";
		}
		else if(equipCitroen.contains("FUEL::PETROL FUEL"))
		{
			fuelType="Petrol";
		}
		else if (equipCitroen.contains("FUEL::DIESEL FUEL")) 
		{
			fuelType="Diesel";
		}

		if(equipCitroen.contains("DRIVING POSITION::LEFT HAND DRIVE"))
		{
			driveSide="Left hand drive";
		}
		else if(equipCitroen.contains("DRIVING POSITION::RIGHT HAND DRIVE"))
		{
			driveSide="Right hand drive";
		}

		Pattern pEngCapCitEquip=Pattern.compile("(CAPACITY::[0-9]+\\sCM3)");
		Matcher mEngCapCitEquip=pEngCapCitEquip.matcher(equipCitroen);
		if(mEngCapCitEquip.find())
		{
			String cap=mEngCapCitEquip.group();
			cap=cap.replace("::", " ");
			String[] splitCap=cap.split(" ");
			engineCapacity=splitCap[1];	
		}
		else
		{
			String ec = null;
			Pattern pEngCap=Pattern.compile("([A-Z]+[0-9]+)");
			Matcher mEngCap=pEngCap.matcher(engine);
			if(mEngCap.find())
			{
				ec=mEngCap.group();
			}
			String query="select `cc` from `citroen_enginecodes` where `engineCode`='"+ec+"'";
			Statement stmt=connect.createStatement();
			ResultSet rs=stmt.executeQuery(query);
			if(rs.next())
			{
				engineCapacity=rs.getString("cc");

			}
		}				

		String optEquip=null;

		insertIntoGenVehTable(equipCitroen, optEquip, optionsCitroen);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void ford() throws Exception
	{
		make="Ford";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		HashMap<String, String> hm=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		vinNo=hm.get("Vehicle Identification No.").toString();
		model=hm.get("Vehicle Line").toString();
		partsMapModel=model;
		String[] splitM=model.split(" ");
		model=splitM[0];
		if(hm.containsKey("Engine Type"))
		{
			engine=hm.get("Engine Type").toString();
		}
		if(hm.containsKey("Transmission"))
		{
			String tran=hm.get("Transmission").toString();
			transOrg=hm.get("Transmission").toString();
			if(!(tran.isEmpty()))
			{
				if(tran.length()>3)
				{
					transmission=tran.substring(0, tran.lastIndexOf(" "));
				}
				else
				{
					transmission=tran;
				}
				if(tran.contains("Speed"))
				{
					transmission=tran.substring(0, tran.lastIndexOf(" "));
				}

				if(transmission.contains("-"))
				{
					transmission=transmission.replace("-", " ");
				}
				if(transmission.contains("Automatic"))
				{
					transmission=transmission.replace("Automatic", "automatic");
				}
				else if(transmission.contains("Auto"))
				{
					transmission=transmission.replace("Auto", "automatic");
				}
				else if(transmission.contains("Manual"))
				{
					transmission=transmission.replace("Manual", "manual");
				}
				if(transmission.contains("Transaxle"))
				{
					transmission=transmission.replace("Transaxle", "transmission");
				}
				else if(transmission.contains("Transmission"))
				{
					transmission=transmission.replace("Transmission", "transmission");
				}	
				else if(transmission.contains("Trans"))
				{
					transmission=transmission.replace("Trans", "transmission");
				}			
				if(transmission.contains("Speed") && !(transmission.contains("transmission")))
				{
					transmission=transmission+" transmission";
					Pattern p=Pattern.compile("([0-9][A-Z])");
					Matcher m=p.matcher(transmission);
					if(m.find())
					{
						transmission=transmission.replace(m.group(), "");
						transmission=transmission.replaceAll("\\s+", " ");
					}
				}			
			}

		}
		if(hm.containsKey("Drive"))
		{
			String drive=hm.get("Drive").toString();
			if(!(drive.isEmpty()))
			{
				driveType=drive.substring(drive.indexOf(" "), drive.length()).trim();
				if(driveType.contains("FWD"))
				{
					driveType="Front wheel drive";
				}
				else if(driveType.contains("4WD"))
				{
					driveType="4 wheel drive";
				}
				else if(driveType.contains("AWD"))
				{
					driveType="All wheel drive";
				}
				else if(driveType.contains("2WD"))
				{
					driveType="2 wheel drive";
				}
				else if(driveType.contains("RWD"))
				{
					driveType="Rear wheel drive";
				}

				driveSide=drive.substring(0, drive.indexOf(" "));
				if(driveSide.contains("LHD"))
				{
					driveSide="Left hand drive";
				}
				else
				{
					driveSide="Right hand drive";
				}
			}

		}
		if(hm.containsKey("Body Style"))
		{
			String bdy=hm.get("Body Style").toString();
			bodyType=bdy.substring(bdy.indexOf("r")+1,bdy.length()).trim();
			doors=bdy.substring(0, bdy.indexOf("r")+1);
			doors=doors.replace("Door", "");
		}
		if(hm.containsKey("Engine Type"))
		{
			String eng=hm.get("Engine Type").toString();
			if(!(eng.isEmpty()))
			{
				String[] splitA=eng.split(" ");
				engineCapacity=splitA[0];
				engineCapacity=engineCapacity.replace("L", "");
				engineCapacity=engineCapacity.replace(".", "");
				int i=engineCapacity.length();
				if(i==3)
				{
					engineCapacity=engineCapacity+"0";
				}
				else{
					engineCapacity=engineCapacity+"00";
				}

				Pattern p=Pattern.compile("[0-9]+(PS)");
				Matcher m=p.matcher(eng);
				if(m.find())
				{
					String ps=m.group();
					PS=ps.replace("PS", "");
					double divider=1.36;
					int psint=Integer.parseInt(PS);
					double kw=psint/divider;
					int kwint=(int) Math.round(kw);
					kW=Integer.toString(kwint);
				}	
			}

		}
		if(hm.containsKey("Date of production"))
		{

			String date= hm.get("Date of production").toString();
			if(date != null && !date.trim().equals(""))
			{
				final String OLD_FORMAT = "MM/dd/yy";
				final String NEW_FORMAT = "MMM dd, yyyy";

				SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
				Date d=null;
				try {
					d = sdf.parse(date.trim());
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				sdf.applyPattern(NEW_FORMAT);
				dateOfProd = sdf.format(d);

				yearOfProd=dateOfProd.substring(dateOfProd.lastIndexOf(" "), dateOfProd.length()).trim();
			}
		}

		if(hm.containsKey("Interior Environment"))
		{
			interiorColor=hm.get("Interior Environment").toString();
		}

		if(hm.containsKey("Exterior Paint"))
		{
			exteriorColor=hm.get("Exterior Paint").toString();
		}

		if(hm.containsKey("Series"))
		{
			series=hm.get("Series").toString();
		}

		if(hm.containsKey("Positive Territories"))
		{
			posTerr=hm.get("Positive Territories").toString();
		}

		if(hm.containsKey("Emission Requirements"))
		{
			emissReq=hm.get("Emission Requirements").toString();
		}

		if(hm.containsKey("Air Conditioning"))
		{
			airCond=hm.get("Air Conditioning").toString();
		}

		if(hm.containsKey("Final Drive Ratios"))
		{
			finalDriveRatio=hm.get("Final Drive Ratios").toString();
		}

		if(hm.containsKey("Version"))
		{
			version=hm.get("Version").toString();
		}

		if(hm.containsKey("Wheel Base"))
		{
			wheelBase=hm.get("Wheel Base").toString();
		}

		if(hm.containsKey("Cab Style"))
		{
			cabStyle=hm.get("Cab Style").toString();
		}

		if(hm.containsKey("Interior Fabric"))
		{
			intFabric=hm.get("Interior Fabric").toString();
		}

		//EQUIPMENT DATA

		String equipFord="";
		String optionsFord=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String g,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				g=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				FordEquip eq=new FordEquip();
				String group=eq.setGroup(g);
				String description=eq.setDesc(d);

				equipFord=equipFord+group+"::"+description+";";
				//equipCitroen=equipCitroen+code+"::"+group+"::"+description+";";
				equipFord=equipFord.replaceAll("\\s+"," ");
			}
		}

		if(equipFord.contains("Fuel Capability Type::With Diesel Fuel Capability") || engine.contains("Diesel"))
		{
			fuelType="Diesel";
		}
		else if(equipFord.contains("Fuel Capability Type::With Petrol Fuel Capability") || equipFord.contains("Petrol") || engine.contains("Petrol")) 
		{
			fuelType="Petrol";
		}

		String optEquip=null;

		insertIntoGenVehTable(equipFord, optEquip, optionsFord);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void mini() throws Exception
	{
		make="Mini";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 

		HashMap<String, String> hmMini=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hmMini.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		regNo="";
		vinNo=hmMini.get("Vehicle Identification No.").toString();
		if(hmMini.containsKey("Model Designation"))
		{
			modelDesignation=hmMini.get("Model Designation").toString(); 
		}
		if(hmMini.containsKey("Colour"))
		{
			exteriorColor=hmMini.get("Colour").toString(); 
		}
		if(hmMini.containsKey("Upholstery"))
		{
			interiorColor=hmMini.get("Upholstery").toString(); 
		}
		if(hmMini.containsKey("Drive"))
		{
			driveType=hmMini.get("Drive").toString(); 
			driveBmwMini=hmMini.get("Drive").toString(); 
			if(driveType.contains("HECK"))
			{
				driveType="Rear wheel drive";
			}
			else if (driveType.contains("ALLR")) 
			{
				driveType="All wheel drive";
			}
			else
			{
				driveType="";
			}
		}
		if(hmMini.containsKey("Type code"))
		{
			typeCode=hmMini.get("Type code").toString(); 
		}
		if(hmMini.containsKey("Model"))
		{
			model=hmMini.get("Model").toString(); 
			String[] m = model.split(" ");
			model = m[0];
		}
		if(hmMini.containsKey("Series"))
		{
			series=hmMini.get("Series").toString(); 
		}
		if(hmMini.containsKey("Body"))
		{
			bodyType=hmMini.get("Body").toString(); 
			if(bodyType.contains("doors"))
			{
				bodyType="";
			}
		}
		if(hmMini.containsKey("Steering"))
		{
			driveSide=hmMini.get("Steering").toString(); 
			steeringOrg=hmMini.get("Steering").toString(); 
			if(driveSide.contains("L"))
			{
				driveSide="Left hand drive";
			}
			else if(driveSide.contains("R"))
			{
				driveSide="Right hand drive";
			}
			else
			{
				driveSide="";
			}
		}
		if(hmMini.containsKey("Doors"))
		{
			doors=hmMini.get("Doors").toString(); 
		}
		if(hmMini.containsKey("EC"))
		{
			engine=hmMini.get("EC").toString(); 
			fuelType=hmMini.get("EC").toString(); 
			engineCode=hmMini.get("EC").toString();
			if(engine.contains("M56") || engine.contains("B57") || engine.contains("M21"))
			{
				engine="6 cyl. ";
			}
			else if(engine.contains("M50") || engine.contains("N52") || engine.contains("M88/S38") || engine.contains("S50")
					|| engine.contains("M52") || engine.contains("S52") || engine.contains("S54") || engine.contains("S55") 
					|| engine.contains("N57") || engine.contains("M57")|| engine.contains("N54") || engine.contains("N55") 
					|| engine.contains("B58") || engine.contains("M54")|| engine.contains("N52") || engine.contains("N53"))
			{
				engine="6 cyl. DOHC ";
			}
			else if(engine.contains("M20") || engine.contains("M30") || engine.contains("M102") || engine.contains("M106"))
			{
				engine="6 cyl. SOHC ";
			}
			else if(engine.contains("M328") || engine.contains("M337") || engine.contains("M335"))
			{
				engine="6 cyl. OHV ";
			}
			else if(engine.contains("M51"))
			{
				engine="6 cyl. OHC ";
			}
			else if(engine.contains("N13") || engine.contains("N12") || engine.contains("N14") || engine.contains("N16") 
					|| engine.contains("N18")|| engine.contains("M41") || engine.contains("M47") || engine.contains("N47") 
					|| engine.contains("B47"))
			{
				engine="4 cyl. ";
			}
			else if(engine.contains("N20") ||  engine.contains("N26") || engine.contains("B48") || engine.contains("N40") 
					||  engine.contains("N45") || engine.contains("N43") || engine.contains("S14") ||  engine.contains("M42")
					|| engine.contains("M44") || engine.contains("N42") ||  engine.contains("N46"))
			{
				engine="4 cyl. DOHC ";
			}
			else if(engine.contains("M40") || engine.contains("M10") || engine.contains("M43"))
			{
				engine="4 cyl. SOHC ";
			}
			else if(engine.contains("M78"))
			{
				engine="4 cyl. OHV ";
			}
			else if(engine.contains("OHV V8"))
			{
				engine="OHV ";
			}
			else if(engine.contains("M70") || engine.contains("S70") || engine.contains("M73") || engine.contains("N73"))
			{
				engine="V12 SOHC ";
			}
			else if(engine.contains("B37"))
			{
				engine="3 cyl. ";
			}
			else if(engine.contains("B38"))
			{
				engine="3 cyl. DOHC ";
			}
			else if(engine.contains("S85"))
			{
				engine="V10 ";
			}
			else if(engine.contains("M67") || engine.contains("M60") || engine.contains("M62") || engine.contains("S62")
					|| engine.contains("P60") || engine.contains("N62") || engine.contains("S65") || engine.contains("N63") 
					|| engine.contains("S63"))
			{
				engine="V8 DOHC ";
			}
			else if(engine.contains("N74"))
			{
				engine="V12 DOHC ";
			}

			if(fuelType.contains("M50") || fuelType.contains("N20") || fuelType.contains("M40") || fuelType.contains("M20") || fuelType.contains("N52")
					|| fuelType.contains("B38") || fuelType.contains("M10") || fuelType.contains("S14") || fuelType.contains("M42") || fuelType.contains("M43")
					|| fuelType.contains("M44") || fuelType.contains("N40") || fuelType.contains("N42") || fuelType.contains("N46") || fuelType.contains("N45") 
					|| fuelType.contains("N43")	|| fuelType.contains("N20") || fuelType.contains("N13") || fuelType.contains("N26") || fuelType.contains("B48") 
					|| fuelType.contains("M78")	|| fuelType.contains("M328") || fuelType.contains("M335") || fuelType.contains("M337") || fuelType.contains("M30") 
					|| fuelType.contains("M20") || fuelType.contains("M88/S38")	|| fuelType.contains("M102") || fuelType.contains("M106") || fuelType.contains("M50")
					|| fuelType.contains("S50") || fuelType.contains("M52")	|| fuelType.contains("S52") || fuelType.contains("M54") || fuelType.contains("S54") 
					|| fuelType.contains("M56") || fuelType.contains("N52") || fuelType.contains("N54")	|| fuelType.contains("N53") || fuelType.contains("N55") 
					|| fuelType.contains("S55") || fuelType.contains("B58") || fuelType.contains("OHV V8") || fuelType.contains("M60") || fuelType.contains("M62") 
					|| fuelType.contains("S62") || fuelType.contains("P60") || fuelType.contains("N62") || fuelType.contains("S65") || fuelType.contains("N63") 
					|| fuelType.contains("S63") || fuelType.contains("S85") || fuelType.contains("M70") || fuelType.contains("S70") || fuelType.contains("M73")
					|| fuelType.contains("N73") || fuelType.contains("N74") || fuelType.contains("N12") || fuelType.contains("N14") || fuelType.contains("N16") 
					|| fuelType.contains("N18"))
			{
				fuelType="Petrol";
			}
			else if (fuelType.contains("N57") || fuelType.contains("N47") || fuelType.contains("B37") || fuelType.contains("M41") || fuelType.contains("M47")
					|| fuelType.contains("B47") || fuelType.contains("M21") || fuelType.contains("M51") || fuelType.contains("M57") || fuelType.contains("B57")
					|| fuelType.contains("M67")) 
			{
				fuelType="Diesel";
			}
			else{
				fuelType="";
			}
		}
		if(hmMini.containsKey("Displacement"))
		{
			engineCapacity=hmMini.get("Displacement").toString(); 
			engineCapacity=engineCapacity.replace(".", "");
			engineCapacity=engineCapacity+"0";
		}
		if(hmMini.containsKey("Power"))
		{
			kW=hmMini.get("Power").toString(); 
			double multiplier=1.36;
			int kwint=Integer.parseInt(kW);
			double ps=kwint*multiplier;
			int psint=(int) Math.round(ps);
			PS=Integer.toString(psint);
		}


		String stdequipMini="";
		if(htmlPage.asText().contains("Standard equipment"))
		{
			HtmlTableBody stdEquipBody=htmlPage.getFirstByXPath("//*[@id='vinTabsSeries']/table/tbody");
			List<HtmlTableRow> stdEquipRows=stdEquipBody.getRows();
			String e,d;
			for(HtmlTableRow tr:stdEquipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				e=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				MiniStdEquip se=new MiniStdEquip();
				String equipment=se.setEquip(e);
				String description=se.setDesc(d); 

				stdequipMini=stdequipMini+equipment+"::"+description+";";
				//stdequipBmw=stdequipBmw+equipment+"::"+group+"::"+description+";";
				stdequipMini=stdequipMini.replaceAll("\\s+"," ");
			}
		}

		String optionsMini="";
		if(htmlPage.asText().contains("Options"))
		{
			HtmlTableBody stdEquipBody=htmlPage.getFirstByXPath("//*[@id='vinTabsOrder']/table/tbody");
			List<HtmlTableRow> stdEquipRows=stdEquipBody.getRows();
			String o,d;
			for(HtmlTableRow tr:stdEquipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				o=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				MiniOptions op=new MiniOptions();
				String option=op.setOption(o);
				String description=op.setDesc(d);

				optionsMini=optionsMini+option+"::"+description+";";
				optionsMini=optionsMini.replaceAll("\\s+"," ");
			}
		}

		if(stdequipMini.contains("S205A::Automatic transmission") || optionsMini.contains("S205A::Automatic transmission")
				|| stdequipMini.contains("S205 ::Automatic transmission") || optionsMini.contains("S205 ::Automatic transmission")  
				||  optionsMini.contains("S2TBA::Sport automatic gearbox") || stdequipMini.contains("S2TBA::Sport automatic gearbox"))
		{
			transmission="automatic transmission"; 
		}

		else if (stdequipMini.contains("S2TEA::Automatic transmission w/ shift paddles") || optionsMini.contains("S2TEA::Automatic transmission w/ shift paddles")) 
		{
			transmission="automatic transmission with shift paddles";
		}
		else if (stdequipMini.contains("S2TDA::Automatic transm. with w/ twin clutch") || optionsMini.contains("S2TDA::Automatic transm. with w/ twin clutch")
				|| stdequipMini.contains("S2TDA::Automatic transmission with w/ twin clutch") || optionsMini.contains("S2TDA::Automatic transmission with w/ twin clutch")) 
		{
			transmission="automatic transmission with twin clutch";
		}
		else if(stdequipMini.contains("S2MAA::Manual gearbox") ||  optionsMini.contains("S2MAA::Manual gearbox")
				|| stdequipMini.contains("S2MAA::Manual Transmission") ||  optionsMini.contains("S2MAA::Manual Transmission"))
		{
			transmission="manual transmission";
		}
		else if (stdequipMini.contains("S207A::6-speed manual transmission") || optionsMini.contains("S207A::6-speed manual transmission")) 
		{
			transmission="6-speed manual transmission";
		}
		else if (stdequipMini.contains("S206A::Sequential manual transmission (SMG)") ||  optionsMini.contains("S206A::Sequential manual transmission (SMG)")
				|| stdequipMini.contains("S793A::Sequential M Gearbox Drivelogic") ||  optionsMini.contains("S793A::Sequential M Gearbox Drivelogic")) 
		{
			transmission="sequential manual transmission";
		}
		else if (stdequipMini.contains("S2TBA::7-speed sport manual gearbox") || optionsMini.contains("S2TBA::7-speed sport manual gearbox")) 
		{
			transmission="7-speed manual transmission";
		}
		else if (stdequipMini.contains("S2TCA::Sport gearbox with twin clutch") || optionsMini.contains("S2TCA::Sport gearbox with twin clutch")) 
		{
			transmission="twin clutch transmission";
		}
		else if (stdequipMini.contains("S2TFA::Steptronic with twin-clutch gearbox") ||  optionsMini.contains("S2TFA::Steptronic with twin-clutch gearbox")) 
		{
			transmission="steptronic twin-clutch transmission";
		}
		else if (stdequipMini.contains("S202A::Steptronic") ||  optionsMini.contains("S202A::Steptronic")) 
		{
			transmission="steptronic transmission";
		}
		else
		{
			transmission="";
		}


		partsMapModel=modelDesignation;

		String optEquip=null;


		insertIntoGenVehTable(stdequipMini, optEquip, optionsMini);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();
	}

	public static void infiniti() throws Exception
	{
		make="Infiniti";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		HashMap<String, String> hm=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		vinNo=hm.get("Vehicle Identification No.").toString();
		String mod=hm.get("Model").toString();
		modelOrg=hm.get("Model").toString();
		String[] splitM=mod.split("-", 2);
		modelCode=splitM[0];
		model=splitM[1].trim();
		String[] splitC=model.split("[(]([A-Z]\\w+)[)]");
		model=splitC[0];
		Pattern pMod=Pattern.compile("([A-Z]\\w MAKE)");
		Matcher mMod=pMod.matcher(model);
		if(mMod.find())
		{
			model=model.replace(mMod.group(), "");
		}
		String casee=model.toLowerCase();
		model=casee.substring(0, 1).toUpperCase() + casee.substring(1);

		if(hm.containsKey("Engine"))
		{
			engine=hm.get("Engine").toString();
			if(engine.contains("TYPE ENGINE"))
			{
				engine=engine.replace("TYPE ENGINE", "");
			}
		}

		if(hm.containsKey("Gearbox"))
		{
			transmission=hm.get("Gearbox").toString();
			gearboxInfiniti=hm.get("Gearbox").toString();
			if(transmission.contains("MCVT"))
			{
				transmission="MCVT";
			}
			else if(transmission.contains("CVT"))
			{
				transmission="CVT";
			}
			if(transmission.contains("MANUAL MISSION"))
			{
				if(transmission.contains("5"))
				{
					transmission="5 speed manual transmission";
				}
				else if(transmission.contains("4"))
				{
					transmission="4 speed manual transmission";
				}
				else if(transmission.contains("6"))
				{
					transmission="6 speed manual transmission";
				}
				String a=transmission.toLowerCase();
				transmission=a.substring(0, 1).toUpperCase() + a.substring(1);

			}
			else if(transmission.contains("AUTO MISSION"))
			{
				if(transmission.contains("5"))
				{
					transmission="5 speed automatic transmission";
				}
				else if(transmission.contains("4"))
				{
					transmission="4 speed automatic transmission";
				}
				else if(transmission.contains("6"))
				{
					transmission="6 speed automatic transmission";
				}
				String a=transmission.toLowerCase();
				transmission=a.substring(0, 1).toUpperCase() + a.substring(1);

			}
			if(transmission.contains("TRANS") && !(transmission.contains("TRANSMISSION")))
			{
				transmission=transmission.replace("TRANS", "TRANSMISSION");
				String a=transmission.toLowerCase();
				transmission=a.substring(0, 1).toUpperCase() + a.substring(1);
			}

			if(transmission.contains("("))
			{
				String[] b=transmission.split("\\(");
				transmission=b[0];
				transmission=transmission+" TRANSMISSION";
				String a=transmission.toLowerCase();
				transmission=a.substring(0, 1).toUpperCase() + a.substring(1);
			}
		}

		if(hm.containsKey("Distribution Area"))
		{
			distAreaOrg=hm.get("Distribution Area");
		}

		if(hm.containsKey("Powertrain"))
		{
			driveType=hm.get("Powertrain").toString();
			String a=driveType.toLowerCase();
			driveType=a.substring(0, 1).toUpperCase() + a.substring(1);
		}

		if(hm.containsKey("Car Body"))
		{
			String body=hm.get("Car Body").toString();
			Pattern p=Pattern.compile("DOOR");
			Matcher m=p.matcher(body);
			String[] split=null;
			if(m.find())
			{
				split=body.split(m.group());
				doors=split[0];
				bodyType=split[1].trim();
			}
			else
			{
				bodyType=body;
				if(bodyType.contains("("))
				{
					String[] b=bodyType.split("\\(");
					bodyType=b[0];
				}
			}
			String caseee=bodyType.toLowerCase();
			bodyType=caseee.substring(0, 1).toUpperCase() + caseee.substring(1);
		}

		if(hm.containsKey("Exterior color"))
		{
			extColorCode=hm.get("Exterior color").toString();
		}

		if(hm.containsKey("Interior color"))
		{
			upholIntCode=hm.get("Interior color").toString();
		}

		if(hm.containsKey("Power"))
		{
			kW=hm.get("Power").toString();
			kW=kW.replace("KW", "");
			double multiplier=1.36;
			int kwint=Integer.parseInt(kW);
			double ps=kwint*multiplier;
			int psint=(int) Math.round(ps);
			PS=Integer.toString(psint);
		}

		if(engine.contains("DIESEL"))
		{
			fuelType="Diesel";
		}
		else if (engine.contains("PETROL")) 
		{
			fuelType="Petrol";
		}

		Pattern p=Pattern.compile("([0-9].[0-9]L)");
		Matcher m=p.matcher(engine);
		if(m.find())
		{
			String str=m.group();
			String enCap=str.replace("L", "00");
			engineCapacity=enCap.replace(".", "");
		}

		String query="select `cc` from `nissan_enginecodes` where `engineCode`='"+engine+"'";
		Statement stmt=connect.createStatement();
		ResultSet rs=stmt.executeQuery(query);
		if(rs.next())
		{
			engineCapacity=rs.getString("cc");
		}

		if(hm.containsKey("Grade"))
		{
			grade=hm.get("Grade").toString();
		}

		final String OLD_FORMAT = "yyyy-MM";
		final String NEW_FORMAT = "MMM, yyyy";
		if(hm.containsKey("From"))
		{
			prodFrom=hm.get("From").toString();
			if(prodFrom != null && !prodFrom.trim().equals(""))
			{
				SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
				Date d = sdf.parse(prodFrom.trim());
				sdf.applyPattern(NEW_FORMAT);
				prodFrom = sdf.format(d);
			}
		}

		if(hm.containsKey("To"))
		{
			prodTo=hm.get("To").toString();
			if(prodTo != null && !prodTo.trim().equals(""))
			{
				SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
				Date d = sdf.parse(prodTo.trim());
				sdf.applyPattern(NEW_FORMAT);
				prodTo = sdf.format(d);
			}
		}

		if(hm.containsKey("Distribution Area"))
		{
			market=hm.get("Distribution Area").toString();
		}

		//EQUIPMENT DATA

		String equipInfiniti="";
		String optionsInfiniti=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinTabsOptions']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String c,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				c=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				InfinitiEquip eq=new InfinitiEquip();
				String code=eq.setCode(c);
				String description=eq.setDesc(d);

				equipInfiniti=equipInfiniti+code+"::"+description+";";
				//equipCitroen=equipCitroen+code+"::"+group+"::"+description+";";
				equipInfiniti=equipInfiniti.replaceAll("\\s+"," ");
			}
		}

		HtmlAnchor anInf=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
		String infa=anInf.getAttribute("title");
		partsMapModel=infa.substring(infa.indexOf(":")+1, infa.indexOf("(")).trim().replaceAll("\\s+", " ").replace("-", "");

		String optEquip=null;


		insertIntoGenVehTable(equipInfiniti, optEquip, optionsInfiniti);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();		
	}

	public static void nissan() throws Exception
	{
		make="Nissan";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		HashMap<String, String> hm=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		vinNo=hm.get("Vehicle Identification No.").toString();
		String mod=hm.get("Model").toString();
		modelOrg=hm.get("Model").toString();
		String[] splitM=mod.split("-", 2);
		modelCode=splitM[0];
		model=splitM[1].trim();
		String[] splitC=model.split("[(]([A-Z]\\w+)[)]");
		model=splitC[0];
		Pattern pMod=Pattern.compile("([A-Z]\\w MAKE)");
		Matcher mMod=pMod.matcher(model);
		if(mMod.find())
		{
			model=model.replace(mMod.group(), "");
		}
		String casee=model.toLowerCase();
		model=casee.substring(0, 1).toUpperCase() + casee.substring(1);

		if(hm.containsKey("Engine"))
		{
			engine=hm.get("Engine").toString();
			engineOrg=hm.get("Engine").toString();;
			if(engine.contains("TYPE ENGINE"))
			{
				engine=engine.replace("TYPE ENGINE", "");
			}
		}

		if(hm.containsKey("Gearbox"))
		{
			transmission=hm.get("Gearbox").toString();
			if(transmission.contains("MCVT"))
			{
				transmission="MCVT";
			}
			else if(transmission.contains("CVT"))
			{
				transmission="CVT";
			}
			if(transmission.contains("MANUAL MISSION"))
			{
				if(transmission.contains("5"))
				{
					transmission="5 speed manual transmission";
				}
				else if(transmission.contains("4"))
				{
					transmission="4 speed manual transmission";
				}
				else if(transmission.contains("6"))
				{
					transmission="6 speed manual transmission";
				}
				String a=transmission.toLowerCase();
				transmission=a.substring(0, 1).toUpperCase() + a.substring(1);
			}
			else if(transmission.contains("AUTO MISSION"))
			{
				if(transmission.contains("5"))
				{
					transmission="5 speed automatic transmission";
				}
				else if(transmission.contains("4"))
				{
					transmission="4 speed automatic transmission";
				}
				else if(transmission.contains("6"))
				{
					transmission="6 speed automatic transmission";
				}
				String a=transmission.toLowerCase();
				transmission=a.substring(0, 1).toUpperCase() + a.substring(1);	
			}
			if(transmission.contains("TRANS") && !(transmission.contains("TRANSMISSION")))
			{
				transmission=transmission.replace("TRANS", "TRANSMISSION");
				String a=transmission.toLowerCase();
				transmission=a.substring(0, 1).toUpperCase() + a.substring(1);
			}

			if(transmission.contains("("))
			{
				String[] b=transmission.split("\\(");
				transmission=b[0];
				transmission=transmission+" TRANSMISSION";
				String a=transmission.toLowerCase();
				transmission=a.substring(0, 1).toUpperCase() + a.substring(1);
			}
		}

		if(hm.containsKey("Distribution Area"))
		{
			distAreaOrg=hm.get("Distribution Area");
		}

		if(hm.containsKey("Powertrain"))
		{
			driveType=hm.get("Powertrain").toString();
			String a=driveType.toLowerCase();
			driveType=a.substring(0, 1).toUpperCase() + a.substring(1);
		}

		if(hm.containsKey("Car Body"))
		{
			String body=hm.get("Car Body").toString();
			Pattern p=Pattern.compile("DOOR");
			Matcher m=p.matcher(body);
			String[] split=null;
			if(m.find())
			{
				split=body.split(m.group());
				doors=split[0];
				bodyType=split[1].trim();
			}
			else
			{
				bodyType=body;
				if(bodyType.contains("("))
				{
					String[] b=bodyType.split("\\(");
					bodyType=b[0];
				}
			}
			String caseee=bodyType.toLowerCase();
			bodyType=caseee.substring(0, 1).toUpperCase() + caseee.substring(1);
		}

		if(hm.containsKey("Exterior color"))
		{
			extColorCode=hm.get("Exterior color").toString();
		}

		if(hm.containsKey("Interior color"))
		{
			upholIntCode=hm.get("Interior color").toString();
		}

		if(hm.containsKey("Power"))
		{
			kW=hm.get("Power").toString();
			kW=kW.replace("KW", "");
			double multiplier=1.36;
			int kwint=Integer.parseInt(kW);
			double ps=kwint*multiplier;
			int psint=(int) Math.round(ps);
			PS=Integer.toString(psint);
		}

		if(engine!=null)
		{
			if(engine.contains("DIESEL"))
			{
				fuelType="Diesel";
			}
			else if (engine.contains("PETROL")) 
			{
				fuelType="Petrol";
			}
		}

		if(engine!=null)
		{
			Pattern p=Pattern.compile("([0-9].[0-9]L)");
			Matcher m=p.matcher(engine);
			if(m.find())
			{
				String str=m.group();
				String enCap=str.replace("L", "00");
				engineCapacity=enCap.replace(".", "");
			}

			String query="select `cc` from `nissan_enginecodes` where `engineCode`='"+engine+"'";
			Statement stmt=connect.createStatement();
			ResultSet rs=stmt.executeQuery(query);
			if(rs.next())
			{
				engineCapacity=rs.getString("cc");

			}
		}

		if(hm.containsKey("Grade"))
		{
			grade=hm.get("Grade").toString();
		}

		final String OLD_FORMAT = "yyyy-MM";
		final String NEW_FORMAT = "MMM, yyyy";
		if(hm.containsKey("From"))
		{
			prodFrom=hm.get("From").toString();
			if(prodFrom != null && !prodFrom.trim().equals(""))
			{
				SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
				Date d = sdf.parse(prodFrom.trim());
				sdf.applyPattern(NEW_FORMAT);
				prodFrom = sdf.format(d);
			}
		}

		if(hm.containsKey("To"))
		{
			prodTo=hm.get("To").toString();
			if(prodTo != null && !prodTo.trim().equals(""))
			{
				SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
				Date d = sdf.parse(prodTo.trim());
				sdf.applyPattern(NEW_FORMAT);
				prodTo = sdf.format(d);
			}
		}

		//EQUIPMENT DATA

		String equipNissan="";
		String optionsNissan=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinTabsOptions']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String c,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				c=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				InfinitiEquip eq=new InfinitiEquip();
				String code=eq.setCode(c);
				String description=eq.setDesc(d);

				equipNissan=equipNissan+code+"::"+description+";";
				//equipCitroen=equipCitroen+code+"::"+group+"::"+description+";";
				equipNissan=equipNissan.replaceAll("\\s+"," ");
			}
		}

		HtmlAnchor anNis=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
		String nisa=anNis.getAttribute("title");
		partsMapModel=nisa.substring(nisa.indexOf(":")+1, nisa.indexOf("(")).trim().replaceAll("\\s+", " ").replace("-", "");


		String optEquip=null;

		insertIntoGenVehTable(equipNissan, optEquip, optionsNissan);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void smart() throws Exception
	{
		make="Smart";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		HashMap<String, String> hm=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		vinNo=hm.get("Vehicle Identification No.").toString();
		String mod=null;
		if(hm.containsKey("Sales term"))
		{
			mod=hm.get("Sales term").toString();
			if(mod.contains("("))
			{
				String[] b=mod.split("\\(");
				model=b[0];

			}
			else{
				model=mod;
			}
			model=model.substring(0, 1).toUpperCase() + model.substring(1);
		}

		exteriorColor=hm.get("Paint Code").toString();
		if(hm.containsKey("Interior"))
		{
			interiorColor=hm.get("Interior").toString();
		}
		else
		{
			interiorColor="";
		}

		orderId=hm.get("Order ID").toString();
		if(hm.containsKey("Delivery date"))
		{
			dateOfProd=hm.get("Delivery date").toString();

			if(dateOfProd != null && !dateOfProd.trim().equals(""))
			{
				final String OLD_FORMAT = "dd.MM.yyyy";
				final String NEW_FORMAT = "MMM dd, yyyy";

				SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
				Date d = sdf.parse(dateOfProd.trim());
				sdf.applyPattern(NEW_FORMAT);
				dateOfProd = sdf.format(d);
			}
		}

		if(!dateOfProd.equals(""))
		{
			String[] splitYr=dateOfProd.split(",");
			yearOfProd=splitYr[1].trim();
		}

		if(hm.containsKey("Sales term"))
		{
			salesTerm=hm.get("Sales term").toString();
		}
		if(hm.containsKey("Motor number"))
		{
			motorNo=hm.get("Motor number").toString();
		}

		if(hm.containsKey("Engine"))
		{
			engine=hm.get("Engine").toString();
			engineOrg=hm.get("Engine").toString();
		}

		if(hm.containsKey("Steering"))
		{
			steeringOrg=hm.get("Steering");
		}

		if(hm.containsKey("Other"))
		{
			String other=hm.get("Other").toString();

			Pattern p1=Pattern.compile("(EU approval date:[0-9\\s]+)");
			Matcher m1=p1.matcher(other);
			Pattern p2=Pattern.compile("(EU approval number:\\s\\w\\d[*]\\d+[/]\\d+[*]\\d+[*]\\d+)");
			Matcher m2=p2.matcher(other);
			if(m1.find())
			{
				euApprovDate=m1.group();
				int ind=euApprovDate.indexOf(":");
				euApprovDate=euApprovDate.substring(ind+1).trim();
			}

			if(m2.find())
			{
				euApprovNo=m2.group();
				int ind=euApprovNo.indexOf(":");
				euApprovNo=euApprovNo.substring(ind+1).trim();
			}		
		}						


		//AGGREGATES DATA

		String aggsSmart="";
		if(htmlPage.asText().contains("Aggregates"))
		{
			HtmlTableBody aggBody=htmlPage.getFirstByXPath("//*[@id='vinAggregates']/table/tbody");
			List<HtmlTableRow> aggRows=aggBody.getRows();
			String t,d;
			for(HtmlTableRow tr:aggRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				t=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				MercAggs ag=new MercAggs();
				String type=ag.setType(t);
				String description=ag.setDesc(d);

				aggsSmart=aggsSmart+type+"::"+description+";";
				aggsSmart=aggsSmart.replaceAll("\\s+"," ");
			}
			aggMercSmart=aggsSmart;
		}

		//EQUIPMENT DATA

		String equipSmart="";
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinEquipmentCodes']/table/tbody | //*[@id='vinSaCodes']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String a,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				a=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				MercEquip eq=new MercEquip();
				String attrSmart=eq.setAttr(a);
				String descSmart=eq.setDesc(d);

				equipSmart=equipSmart+attrSmart+"::"+descSmart+";";
				//equipMerc=equipMerc+attrMerc+"::"+group+"::"+descMerc+";";
				equipSmart=equipSmart.replaceAll("\\s+"," ");
			}
		}

		if(htmlPage.asText().contains("VPD-Data"))
		{
			HtmlTableBody vpdBody=htmlPage.getFirstByXPath("//*[@id=\"vinVpds\"]/table/tbody");
			List<HtmlTableRow> vpdRows=vpdBody.getRows();
			String a,b,c;
			for(HtmlTableRow tr:vpdRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				a=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				b=cell2.getTextContent();
				HtmlTableCell cell3=tr.getCell(2);
				c=cell3.getTextContent();

				String attr=a;
				String desc1=b;
				String desc2=c;

				vpdDataMercSmart=vpdDataMercSmart+attr+"::"+desc1+"::"+desc2+";";
				//equipMerc=equipMerc+attrMerc+"::"+group+"::"+descMerc+";";
				vpdDataMercSmart=vpdDataMercSmart.replaceAll("\\s+"," ");
			}
		}

		String s="(ENGINE\\s[M|OM]+[0-9]+)|(ENGINE\\s[M|OM]+\\s[0-9]+)";
		Pattern pEng=Pattern.compile(s);
		Matcher mEng=pEng.matcher(equipSmart);
		if(mEng.find())
		{
			String a=mEng.group();
			int in=a.indexOf(" ");
			a=a.substring(in);
			char b=a.charAt(3);
			if (b==' ') 
			{
				String[] splitEng=a.split(" ");
				engine=splitEng[1]+splitEng[2];
			}
			else
			{
				String[] splitEng=a.split(" ");
				engine=splitEng[1];
			}				
		}
		else
		{
			engine="";
		}

		Pattern pEn=Pattern.compile("(Engine::[0-9\\s]+)");
		Matcher mEn=pEn.matcher(aggsSmart);
		if(mEn.find())
		{
			String ab=mEn.group();
			ab=ab.substring(8);
			engine=engine+"("+ab+")";
			engineCode=ab;
		}

		if(hm.containsKey("Automatic transmission"))
		{
			transmission="automatic transmission";
			transCode=hm.get("Automatic transmission").toString();
			transOrg=hm.get("Automatic transmission").toString();
		}
		else if(hm.containsKey("Manual transmission")) 
		{
			transmission="manual transmission";
			transCode=hm.get("Manual transmission").toString();
			transOrg=hm.get("Manual transmission").toString();
		}	
		else if(hm.containsKey("Gearbox")) 
		{
			transmission="manual transmission";
			transCode=hm.get("Gearbox").toString();
			transOrg=hm.get("Gearbox").toString();
		}
		else if (hm.containsKey("Transmission")) 
		{
			transCode=hm.get("Transmission").toString();
			transOrg=hm.get("Transmission").toString();
		}
		else if (equipSmart.contains("MANUAL TRANSMISSION")) 
		{
			transmission="manual transmission";
		}
		else if(equipSmart.contains("AUTOMATIC TRANSMISSION"))
		{
			if(equipSmart.contains("DUAL CLUTCH") && equipSmart.contains("7-SPEED"))
			{
				transmission="7-speed automatic dual clutch transmission";
			}

			else if(equipSmart.contains("7-SPEED"))
			{
				transmission="7-speed automatic transmission";
			}
			else if (equipSmart.contains("5-SPEED")) 
			{
				transmission="5-speed automatic transmission";
			}
			else if (equipSmart.contains("4-SPEED")) 
			{
				transmission="4-speed automatic transmission";
			}
			else if (equipSmart.contains("3-SPEED")) 
			{
				transmission="3-speed automatic transmission";
			}
			else
			{
				transmission="automatic transmission";
			}
		}
		else{
			transmission=" ";
		}

		if(mod!=null)
		{
			Pattern p=Pattern.compile("([0-9]+ kW)|([0-9]+ KW)");
			Matcher m=p.matcher(mod);

			if(m.find())
			{
				kW=m.group();
				kW=kW.replaceAll("kW|KW", "").trim();
				double multiplier=1.36;
				int kwint=Integer.parseInt(kW);
				double ps=kwint*multiplier;
				int psint=(int) Math.round(ps);
				PS=Integer.toString(psint);
			}
		}

		Pattern p1=Pattern.compile("([0-9]+KW)|([0-9]+ KW)");
		Matcher m1=p1.matcher(equipSmart);
		if(m1.find())
		{
			kW=m1.group();
			kW=kW.replace("KW", "").trim();
			System.out.println(kW);
		}

		Pattern p2=Pattern.compile("([0-9]+HP)|([0-9]+ HP)");
		Matcher m2=p2.matcher(equipSmart);
		if(m2.find())
		{
			PS=m2.group();
			PS=PS.replace("HP", "").trim();
		}

		Pattern pEngCap1=Pattern.compile("(DISPLACEMENT\\s[0-9].[0-9]\\sLITER[S])");
		Pattern pEngCap2=Pattern.compile("([0-9][,|.][0-9]\\sLITER\\sDISPLACEMENT)");
		Pattern pEngCap3=Pattern.compile("(CAPACITY\\s[0-9][,|.][0-9]\\sLIT[RE][ER])");
		Matcher mEngCap1=pEngCap1.matcher(equipSmart);
		Matcher mEngCap2=pEngCap2.matcher(equipSmart);
		Matcher mEngCap3=pEngCap3.matcher(equipSmart);
		if(mEngCap1.find())
		{
			String aec1=mEngCap1.group();
			String[] bec1=aec1.split(" ");
			engineCapacity=bec1[1].replace(".", "");
			engineCapacity=engineCapacity+"00";

		}
		else if(mEngCap2.find())
		{
			String aec2=mEngCap2.group();
			String[] bec2=aec2.split(" ");
			engineCapacity=bec2[0].replace(".", "");
			engineCapacity=engineCapacity+"00";

		}
		else if(mEngCap3.find())
		{
			String aec3=mEngCap3.group();
			String[] bec3=aec3.split(" ");
			engineCapacity=bec3[1].replace(",", "");

			engineCapacity=engineCapacity+"00";

		}
		else{
			engineCapacity="";
		}


		if (equipSmart.contains("DIESEL")) 
		{
			fuelType="Diesel";
		}
		else if(equipSmart.contains("GASOLINE") || equipSmart.contains("PETROL"))
		{
			fuelType="Petrol";
		}
		else
		{
			fuelType="";
		}

		if(equipSmart.contains("LHD::LEFT-HAND STEERING") || equipSmart.contains("L::LEFT-HAND STEERING"))
		{
			driveSide="Left hand drive";
		}
		else if (equipSmart.contains("RHD::RIGHT-HAND STEERING") || equipSmart.contains("R::RIGHT-HAND STEERING")) 
		{
			driveSide="Right hand drive";
		}

		if(equipSmart.contains("CABRIO"))
		{
			bodyType="Cabrio";
		}
		else if (equipSmart.contains("ROADSTER")) 
		{
			bodyType="Roadster";
		}
		else if (equipSmart.contains("COUPE")) 
		{
			bodyType="Coupe";
		}

		Pattern pBd=Pattern.compile("(CITY COUP�)");
		Matcher mBd=pBd.matcher(equipSmart);
		if(mBd.find())
		{
			bodyType="City coupe";
		}

		if(equipSmart.contains("4X2"))
		{
			driveType="2 wheel drive";
		}
		else if (equipSmart.contains("4X4")) 
		{
			driveType="4 wheel drive";
		}
		else{
			driveType="";
		}

		HtmlAnchor an=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[4]/a");
		String smarta=an.getAttribute("title");
		partsMapModel=smarta.replace("Model", "").trim();

		//OPTIONS DATA

		String optionsSmart="";

		String optEquip=null;

		insertIntoGenVehTable(equipSmart, optEquip, optionsSmart);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}


	public static void dacia() throws Exception
	{
		make="Renault Dacia";
		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 	

		for(HtmlTableRow tr:vehRows) 
		{
			for(HtmlTableCell td:tr.getCells())
			{
				HtmlTableCell cell1=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[1]/td"); //vin
				str1=cell1.asText();

				HtmlTableCell cell2=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[2]/td"); //model
				str2=cell2.getTextContent();

				HtmlTableCell cell3=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[3]/td"); //year
				str3=cell3.asText();

				HtmlTableCell cell4=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[4]/td"); //engine
				str4=cell4.asText();

				HtmlTableCell cell5=td.getFirstByXPath("//*[@id='vinDialog']/div[2]/div/table/tbody/tr[5]/td"); //transmission
				str5=cell5.asText();
			}
		}

		NoneVagVeh v=new NoneVagVeh();
		vinNo=v.setVinNo(str1);
		String mod=v.setModel(str2);
		modelOrg=str2;
		String[] split=str2.split("\\s{2,}");
		partsMapModel=split[0].trim();

		Pattern p=Pattern.compile("([(][A-Z][0-9]+[)])");
		Matcher m=p.matcher(mod);
		if (m.find()) 
		{
			String mc=m.group();
			mc=mc.replace("(", "");
			modelCode=mc.replace(")", "");
		}

		if(mod.contains("("))
		{
			String[] b=mod.split("\\(");
			model=b[0].trim();
		}

		int i=model.lastIndexOf(" ");
		if(i>=0)
		{
			model=model.substring(0, i);
		}

		engine=v.setEngine(str4);

		Pattern pEngCap=Pattern.compile("([0-9][.][0-9])");
		Matcher mEngCap=pEngCap.matcher(engine);
		if(mEngCap.find())
		{
			String str=mEngCap.group();
			String enCap=str.replace(".", "");
			enCap=enCap+"00";
			char c=enCap.charAt(0);
			if(c != 0)
			{
				String strPattern = "^0";        
				engineCapacity=enCap.replaceAll(strPattern, "");
			}	
		}

		transmission=v.setTransmission(str5);
		transOrg=str5;
		if(transmission.contains("MECHANICAL") || transmission.contains("MECANIQUE"))
		{
			if(transmission.contains("5 RAPPORTS") || transmission.contains("5 GEARS"))
			{
				transmission="5-speed manual transmission";
			}
			else if(transmission.contains("4 RAPPORTS") || transmission.contains("4 GEARS"))
			{
				transmission="4-speed manual transmission";
			}
			else if(transmission.contains("6 RAPPORTS") || transmission.contains("6 GEARS"))
			{
				transmission="6-speed manual transmission";
			}
			else{
				transmission="";
			}
		}
		else if(transmission.contains("AUTOMATIC") || transmission.contains("AUTOMATIQUE"))
		{
			if(transmission.contains("4 RAPPORTS") || transmission.contains("4 GEARS"))
			{
				transmission="4-speed automatic transmission";
			}
			else if(transmission.contains("3 RAPPORTS") || transmission.contains("3 GEARS"))
			{
				transmission="3-speed automatic transmission";
			}
			else if(transmission.contains("5 RAPPORTS") || transmission.contains("5 GEARS"))
			{
				transmission="5-speed automatic transmission";
			}
			else{
				transmission="";
			}
		}
		else if (transmission.contains("EDC 6 RAPPORTS / EDC 6 GEARS")) 
		{
			transmission="6-speed efficient dual clutch transmission";
		}
		else{
			transmission="";
		}

		bodyType=v.setBodyType(str2);
		if(bodyType.contains("Berline/Hatch/Hatchback/Sedan"))
		{
			bodyType="Berline/Hatch/Hatchback/Sedan";
		}
		else if(bodyType.contains("Fourgon/Van"))
		{
			bodyType="Fourgon/Van";
		}
		else if(bodyType.contains("Van"))
		{
			bodyType="Van";
		}
		else if(bodyType.contains("Berline"))
		{
			bodyType="Berline";
		}
		else if(bodyType.contains("MCV"))
		{
			bodyType="MCV";
		}
		else if(bodyType.contains("MCV/Grandtour/Sport Tourer/Touring/Wagon"))
		{
			bodyType="MCV/Grandtour/Sport Tourer/Touring/Wagon";
		}
		else if(bodyType.contains("Pick-up"))
		{
			bodyType="Pick-up";
		}
		else{
			bodyType="";
		}

		yearOfProd=v.setYearOfProd(str3);
		series=v.setSeries(str2);
		String[] s = series.split(" ");
		series = s[1];


		String equipDacia="";
		String optionsDacia="";
		List<HtmlTableRow> equipRows=vehTable.getRows().subList(6, vehRows.size());

		for(HtmlTableRow tr:equipRows) 
		{
			String a,d;
			HtmlTableCell cell1=tr.getCell(0);
			a=cell1.getTextContent();
			HtmlTableCell cell2=tr.getCell(1);
			d=cell2.getTextContent();

			RenaultEquipment oe=new RenaultEquipment();
			String attribute=oe.setAttr(a);
			String description=oe.setDesc(d);

			equipDacia=equipDacia+attribute+"::"+description+";";
			//equipDacia=equipDacia+code+"::"+attribute+"::"+description+";";
			equipDacia=equipDacia.replaceAll("\\s+"," ");
		}

		if(equipDacia.contains("Driveability::4x2"))
		{
			driveType="2-wheel drive";
		}
		else if(equipDacia.contains("Driveability::4x4"))
		{
			driveType="4-wheel drive";
		}
		else if(equipDacia.contains("Driveability::Front wheel drive"))
		{
			driveType="Front wheel drive";
		}
		else if(equipDacia.contains("Driveability::Rear wheel drive"))
		{
			driveType="Rear wheel drive";
		}
		else if(equipDacia.contains("Driveability::All wheel drive"))
		{
			driveType="All wheel drive";
		}
		else
		{
			driveType="";
		}


		fuelType=v.setFuelType(str4);
		if(fuelType.contains("F8M") || fuelType.contains("F8Q") || fuelType.contains("F8QT") || fuelType.contains("F9Q") || fuelType.contains("K9K")
				|| fuelType.contains("^(G)(.*)") || fuelType.contains("^(J)(.*)") || fuelType.contains("M9R") || fuelType.contains("^(P)(.*)") 
				|| fuelType.contains("^(R)(.*)") || fuelType.contains("^(S)(.*)") || fuelType.contains("^(V)(.*)") 
				|| equipDacia.contains("Type of fuel or energy::Diesel"))
		{
			fuelType="Diesel";
		}
		else if(fuelType.contains("B16F") || fuelType.contains("F1N") || fuelType.contains("F2N") || fuelType.contains("F3N") || fuelType.contains("B18KP")
				|| fuelType.contains("B18E") || fuelType.contains("B18EP") || fuelType.contains("B18F") || fuelType.contains("B18FT") || fuelType.contains("F7P")
				|| fuelType.contains("F4P") || fuelType.contains("F3P") || fuelType.contains("B18U") || fuelType.contains("F2R") || fuelType.contains("F3R")
				|| fuelType.contains("F3R") || fuelType.contains("F7R") || fuelType.contains("F5R") || fuelType.contains("F4R") || fuelType.contains("F4RT") 
				|| fuelType.contains("B20F") || fuelType.contains("K4M") || fuelType.contains("K4J") || fuelType.contains("K7M") || fuelType.contains("E7")
				|| fuelType.contains("^(A)(.*)") || fuelType.contains("^(E)(.*)") || fuelType.contains("^(EF)(.*)") || fuelType.contains("^(E)(.*)") 
				|| fuelType.contains("^(H)(.*)") || fuelType.contains("^(M)(.*)") || fuelType.contains("^(X)(.*)") || fuelType.contains("^(Z)(.*)") 
				|| fuelType.contains("^(B1B") || fuelType.contains("^(C)(.*)") || fuelType.contains("^(CH)(.*)") || fuelType.contains("^(D)(.*)") 
				|| fuelType.contains("^(L)(.*)") || equipDacia.contains("Type of fuel or energy::Petrol"))
		{
			fuelType="Petrol";
		}

		else
		{
			fuelType="";
		}

		if(equipDacia.contains("Steering wheel location::Left"))
		{
			driveSide="Left hand drive";
		}
		else if(equipDacia.contains("Steering wheel location::Right"))
		{
			driveSide="Right hand drive";
		}

		String optEquip=null;

		insertIntoGenVehTable(equipDacia, optEquip, optionsDacia);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();
	}


	public static void mitsubishi() throws Exception
	{
		make="Mitsubishi";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		HashMap<String, String> hm=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		vinNo=hm.get("Vehicle Identification No.").toString();

		model=hm.get("Vehicle").toString();
		partsMapModel=model;
		if(model.contains("("))
		{
			String[] a=model.split("\\(");
			model=a[0];
			if(model.contains("<"))
			{
				String[] b=model.split("<");
				model=b[0];

			}
		}

		if(hm.containsKey("Model"))
		{
			String mod=hm.get("Model").toString();
			modelOrg=hm.get("Model").toString();
			engine=hm.get("Model").toString();
			String[] splitMod=mod.split(" ");
			modelCode=splitMod[0];

			Pattern p=Pattern.compile("([0-9]{4})");
			Matcher m=p.matcher(mod);
			if(m.find())
			{
				engineCapacity=m.group();
			}

			if(mod.contains("DIESEL"))
			{
				fuelType="Diesel";
			}
			else if (mod.contains("PETROL") || mod.contains("GASOLINE")) 
			{
				fuelType="Petrol";
			}

			if(mod.contains("4WD"))
			{
				driveType="4 wheel drive";
			}
			else if (mod.contains("2WD")) 
			{
				driveType="2 wheel drive";
			}
			else if (mod.contains("FWD")) 
			{
				driveType="Front wheel drive";
			}
			else if (mod.contains("AWD")) 
			{
				driveType="All wheel drive";
			}
			else if (mod.contains("RWD")) 
			{
				driveType="Rear wheel drive";
			}

		}

		String cl=null;

		if(hm.containsKey("Classification"))
		{
			cl=hm.get("Classification").toString();
			classMitsubishi=hm.get("Classification").toString();

			if(cl.contains("LHD"))
			{
				driveSide="Left hand drive";
			}
			else if (cl.contains("RHD")) 
			{
				driveSide="Right hand drive";
			}

			if(cl.contains("M/T"))
			{
				if(cl.contains("5F"))
				{
					transmission="5 speed manual transmission";
				}
				else if (cl.contains("4F")) 
				{
					transmission="4 speed manual transmission";
				}
				else if (cl.contains("6F")) 
				{
					transmission="6 speed manual transmission";
				}
				else
				{
					transmission="manual transmission";
				}
			}
			else if (cl.contains("A/T")) 
			{
				if(cl.contains("5F"))
				{
					transmission="5 speed automatic transmission";
				}
				else if (cl.contains("4F")) 
				{
					transmission="4 speed automatic transmission";
				}
				else if (cl.contains("6F")) 
				{
					transmission="6 speed automatic transmission";
				}
				else
				{
					transmission="automatic transmission";
				}
			}

			if(cl.contains("4WD"))
			{
				driveType="4 wheel drive";
			}
			else if (cl.contains("2WD")) 
			{
				driveType="2 wheel drive";
			}
			else if (cl.contains("FWD")) 
			{
				driveType="Front wheel drive";
			}
			else if (cl.contains("AWD")) 
			{
				driveType="All wheel drive";
			}
			else if (cl.contains("RWD")) 
			{
				driveType="Rear wheel drive";
			}			

		}

		if(hm.containsKey("Option"))
		{
			optionMitsubishi=hm.get("Option");
		}

		if(hm.containsKey("Date of production"))
		{
			dateOfProd =hm.get("Date of production").toString();
			if(dateOfProd != null && !dateOfProd.trim().equals(""))
			{
				final String OLD_FORMAT = "MM/dd/yy";
				final String NEW_FORMAT = "MMM dd, yyyy";

				SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
				Date d= sdf.parse(dateOfProd.trim());
				sdf.applyPattern(NEW_FORMAT);
				dateOfProd = sdf.format(d);
			}
		}

		if(hm.containsKey("Exterior color"))
		{
			extColorCode=hm.get("Exterior color");
		}

		if(hm.containsKey("Interior color"))
		{
			upholIntCode=hm.get("Interior color");
		}

		if(!dateOfProd.equals(""))
		{
			String[] splitYr=dateOfProd.split(",");
			yearOfProd=splitYr[1].trim();
		}


		if(model.contains("LONG WAGON") || cl.contains("LONG WAGON"))
		{
			bodyType="Long wagon";
		}
		else if(model.contains("WAGON") || cl.contains("WAGON"))
		{
			bodyType="Wagon";
		}
		else if(model.contains("SEDAN") || cl.contains("SEDAN"))
		{
			bodyType="Sedan";
		}
		else if(model.contains("LONG TRUCK") || cl.contains("LONG TRUCK"))
		{
			bodyType="Long truck";
		}
		else if(model.contains("TRUCK") || cl.contains("TRUCK"))
		{
			bodyType="Truck";
		} 
		else if(model.contains("HATCHBACK") || cl.contains("HATCHBACK") || model.contains("HATCH BACK") || cl.contains("HATCH BACK"))
		{
			bodyType="Hatchback";
		}
		else if(model.contains("SINGLE CAB") || cl.contains("SINGLE CAB"))
		{
			bodyType="Single cab";
		}
		else if(model.contains("DOUBLE CAB") || cl.contains("DOUBLE CAB"))
		{
			bodyType="Double cab";
		}
		else if(model.contains("CLUB CAB") || cl.contains("CLUB CAB") || model.contains("C-CAB") || cl.contains("C-CAB"))
		{
			bodyType="Club cab";
		}
		else if(model.contains("W-CAB") || cl.contains("W-CAB"))
		{
			bodyType="Wide cab";
		}
		else if(model.contains("SUV") || cl.contains("SUV"))
		{
			bodyType="SUV";
		}

		//EQUIPMENT DATA

		String equipMitsubishi="";
		String optionsMitsubishi=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String c,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				c=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				MitsubishiEquip eq=new MitsubishiEquip();
				String code=eq.setCode(c);
				String description=eq.setDesc(d);

				equipMitsubishi=equipMitsubishi+code+"::"+description+";";
				//equipCitroen=equipCitroen+code+"::"+group+"::"+description+";";
				equipMitsubishi=equipMitsubishi.replaceAll("\\s+"," ");
			}
		}
		String optEquip=null;

		insertIntoGenVehTable(equipMitsubishi, optEquip, optionsMitsubishi);


		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}


	public static void peugeot() throws Exception
	{
		make="Peugeot";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		HashMap<String, String> hm=new HashMap<String,String>();
		for(HtmlTableRow tr:vehRows)
		{
			hm.put(tr.getCell(0).asText(), tr.getCell(1).getTextContent());
		}

		vinNo=hm.get("Vehicle Identification No.").toString();
		model=hm.get("Model").toString();
		partsMapModel=model;
		if(hm.containsKey("ENGINE"))
		{
			engine=hm.get("ENGINE").toString();
			Pattern pKw=Pattern.compile("[0-9]\\wKW");
			Matcher mkW=pKw.matcher(engine);
			if(mkW.find())
			{
				mkW.group();
			}
		}


		if(!kW.equals(""))
		{
			double multiplier=1.36;
			int kwint=Integer.parseInt(kW);
			double ps=kwint*multiplier;
			int psint=(int) Math.round(ps);
			PS=Integer.toString(psint);
		}	

		if(hm.containsKey("COMMERCIAL MARQUE/COMPONENT TYPE"))
		{
			commMarCompTypeCitroenPeugeot=hm.get("COMMERCIAL MARQUE/COMPONENT TYPE");
		}

		if(hm.containsKey("SILHOUETTE"))
		{
			String silhouette=hm.get("SILHOUETTE").toString();
			silhoutteCitroenPeugeot=hm.get("SILHOUETTE").toString();
			Pattern p=Pattern.compile("([0-9] DOOR)");
			Matcher m=p.matcher(silhouette);	

			if(m.find())
			{
				String b=m.group();
				doors=b.replace(" DOOR", "");
				bodyType=silhouette.replace(b, "").trim();
				if(bodyType.contains("-"))
				{
					bodyType=bodyType.replace("-", "").trim();
				}
			}
			else 
			{
				bodyType=silhouette;
			}
		}

		if(hm.containsKey("Start of warranty"))
		{
			startOfWarr=hm.get("Start of warranty").toString();
		}

		if(startOfWarr.equals(" "))
		{
			String[] split=startOfWarr.split(",");
			yearOfProd=split[1];	
		}

		dam=hm.get("DAM").toString();
		if(hm.containsKey("Factory code"))
		{
			factoryCode=hm.get("Factory code").toString();
		}

		if(hm.containsKey("Service Information"))
		{
			euApprovNo=hm.get("Service Information").toString();
		}
		if(hm.containsKey("Engine serial no"))
		{
			engineSerialNo=hm.get("Engine serial no").toString();
		}
		if(hm.containsKey("Transmission serial no"))
		{
			transSerialNo=hm.get("Transmission serial no").toString();
		}
		if(hm.containsKey("Car Body"))
		{
			carBody=hm.get("Car Body").toString();
		}
		if(hm.containsKey("PRODUCT TYPE"))
		{
			prodType=hm.get("PRODUCT TYPE").toString();
		}

		if(hm.containsKey("TRIM LEVEL"))
		{
			trimLevel=hm.get("TRIM LEVEL").toString();
		}	

		if(hm.containsKey("COUNTRY TYPE"))
		{
			market=hm.get("COUNTRY TYPE").toString();
		}
		if(hm.containsKey("SPECIAL SPECIFICATION"))
		{
			speSpec=hm.get("SPECIAL SPECIFICATION").toString();
		}
		if(hm.containsKey("MODEL YEAR"))
		{
			modelYear=hm.get("MODEL YEAR").toString();
		}
		if(hm.containsKey("MODIF. DURING MODEL YEAR"))
		{
			modifDurModYear=hm.get("MODIF. DURING MODEL YEAR").toString();
		}
		if(hm.containsKey("PAINT TYPE"))
		{
			paintType=hm.get("PAINT TYPE").toString();
		}
		if(hm.containsKey("BODY COLOUR"))
		{
			exteriorColor=hm.get("BODY COLOUR").toString();
		}
		if(hm.containsKey("INTERIOR TRIM TYPE"))
		{
			intTrimType=hm.get("INTERIOR TRIM TYPE").toString();
		}
		if(hm.containsKey("UPHOLSTERY COLOUR"))
		{
			upholIntCode=hm.get("UPHOLSTERY COLOUR").toString();
		}

		//EQUIPMENT DATA

		String equipPeugeot="";
		String optionsPeugeot=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String g,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				g=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(1);
				d=cell2.getTextContent();

				CitroenEquip eq=new CitroenEquip();
				String group=eq.setGroup(g);
				String description=eq.setDesc(d);

				equipPeugeot=equipPeugeot+group+"::"+description+";";
				//equipCitroen=equipCitroen+code+"::"+group+"::"+description+";";
				equipPeugeot=equipPeugeot.replaceAll("\\s+"," ");
			}
		}

		if(equipPeugeot.contains("AUTO GEARBOX") || equipPeugeot.contains("Auto gearbox") || equipPeugeot.contains("Automatic gearbox")
				|| equipPeugeot.contains("AUTOMATIC GEARBOX"))
		{
			transmission="Automatic transmission";
		}
		else if (equipPeugeot.contains("MANUAL GEARBOX") || equipPeugeot.contains("Manual gearbox")) 
		{
			transmission="Manual transmission";
		}
		else if(hm.containsKey("TRANSMISSION"))
		{
			String tr=hm.get("TRANSMISSION").toString();
			if(tr.contains("Auto gearbox"))
			{
				transmission="Automatic transmission";
			}
			else
			{
				transCode=hm.get("TRANSMISSION").toString();
			}
		}	

		if(equipPeugeot.contains("FUEL::LEAD FREE PETROL"))
		{
			fuelType="Petrol - Unleaded";
		}
		else if(equipPeugeot.contains("FUEL::PETROL FUEL") || (engine!=null && engine.contains("PETROL")))
		{
			fuelType="Petrol";
		}
		else if (equipPeugeot.contains("FUEL::DIESEL FUEL") || (engine!=null && engine.contains("DIESEL"))) 
		{
			fuelType="Diesel";
		}
		else
		{
			fuelType="";
		}

		if(equipPeugeot.contains("DRIVING POSITION::LEFT HAND DRIVE"))
		{
			driveSide="Left hand drive";
		}
		else if(equipPeugeot.contains("DRIVING POSITION::RIGHT HAND DRIVE"))
		{
			driveSide="Right hand drive";
		}


		Pattern pEngCapPeuEquip=Pattern.compile("(CAPACITY::[0-9]+\\sCM3)");
		Matcher mEngCapPeuEquip=pEngCapPeuEquip.matcher(equipPeugeot);
		if(mEngCapPeuEquip.find())
		{
			String cap=mEngCapPeuEquip.group();
			cap=cap.replace("::", " ");
			String[] splitCap=cap.split(" ");
			engineCapacity=splitCap[1];

		}
		else
		{
			String ec = null;
			if(engine!=null)
			{
				Pattern pEngCap=Pattern.compile("([A-Z]+[0-9]+)");
				Matcher mEngCap=pEngCap.matcher(engine);
				if(mEngCap.find())
				{
					ec=mEngCap.group();
				}
				String query="select `cc` from `citroen_enginecodes` where `engineCode`='"+ec+"'";
				Statement stmt=connect.createStatement();
				ResultSet rs=stmt.executeQuery(query);
				if(rs.next())
				{
					engineCapacity=rs.getString("cc");

				}
			}

		}				

		String optEquip=null; 

		insertIntoGenVehTable(equipPeugeot, optEquip, optionsPeugeot);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}


	public static void lancia() throws Exception
	{
		make="Lancia";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		MultiHashMap mhm=new MultiHashMap();

		List<HtmlTableRow> subVehRows=vehRows.subList(8, vehRows.size());
		String td1,td2,td3;
		for(HtmlTableRow tr:subVehRows)
		{

			td1=tr.getCell(0).getTextContent();

			td2=tr.getCell(1).getTextContent();

			td3=tr.getCell(2).getTextContent();

			String attribute=td1;
			String codeValue=td2;
			String description=td3;

			allfieldsFARJL=allfieldsFARJL+attribute+"::"+codeValue+"::"+description+";";
			allfieldsFARJL=allfieldsFARJL.replaceAll("\\s+"," ");

			mhm.put(td1, td2);
			mhm.put(td1, td3);

		}

		for (HtmlTableRow tr : vehRows) 
		{
			for (HtmlTableCell td : tr.getCells()) 
			{
				HtmlTableCell viN = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[1]/td[2]");
				str1=viN.asText();

				String str=null;
				HtmlTableCell tb=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[1]");
				str=tb.asText();
				if(str.equals("Model"))
				{
					HtmlTableCell mod = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[2]");
					str2=mod.asText();
				}

				HtmlTableCell dop = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[4]/td[2]");
				str3=dop.asText();
				HtmlTableCell sow = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[5]/td[2]");
				str4=sow.asText();
				HtmlTableCell engNo = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[7]/td[2]");
				str5=engNo.asText();
				HtmlTableCell carBody = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[8]/td[2]");
				str6=carBody.asText();	

				HtmlTableCell mod1 = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[2]/td[2]");
				str7=mod1.asText();

				HtmlTableCell cha = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[6]/td[2]");
				str8=cha.asText();


			}
		}

		FiatVehicle v=new FiatVehicle();
		vinNo=v.setVin(str1);

		String modTest=null;
		modTest=v.setModel(str2);
		model1FARJL=str7;
		model2FARJL=str2;
		chassisFARJL=str8;

		String[] splitSt=null;		
		Pattern p=Pattern.compile("([0-9][.][0-9])");
		Matcher m=p.matcher(modTest);
		if(m.find())
		{

			engineCapacity=m.group();
			splitSt=modTest.split(m.group());
			model=splitSt[0];
			engine=m.group()+splitSt[1];
		}

		if(mhm.containsKey("CC"))
		{
			List<?> listCC = (List<?>) mhm.get("CC");
			engineCapacity=listCC.get(0).toString();
		}

		engineCapacity=engineCapacity.replace(".", "");
		engineCapacity=engineCapacity+"00";
		if(str3!=null && !str3.trim().equals(""))
		{
			Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(str3.trim());
			String a=date1.toString();
			String[] b=a.split(" ");
			dateOfProd=b[1]+" "+b[2]+", "+b[5];	

			if(!dateOfProd.equals(""))
			{
				String[] splitYr=dateOfProd.split(",");
				yearOfProd=splitYr[1].trim();
			}
		}
		if(mhm.containsKey("P"))
		{
			List<?> listDoors = (List<?>) mhm.get("P");
			doors=listDoors.get(0).toString();
		}

		engineNo=v.setEngNo(str5);
		carBody=v.setCarBody(str6);
		startOfWarr=v.setSow(str4);


		if(mhm.containsKey("C_TRA"))
		{
			List<?> listTrans = (List<?>) mhm.get("C_TRA");
			transCode=listTrans.get(0).toString();
			transmission=listTrans.get(1).toString();
			if(transmission.contains("MANUAL"))
			{
				if(transmission.contains("5-SPEED") || transmission.contains("5-SPD") || transmission.contains("5 SPD"))
				{
					transmission="5-speed manual transmission";
				}
				else if(transmission.contains("4-SPEED") || transmission.contains("4-SPD") || transmission.contains("4 SPD"))
				{
					transmission="4-speed manual transmission";
				}
				else if(transmission.contains("6-SPEED") || transmission.contains("6-SPD") || transmission.contains("6 SPD"))
				{
					transmission="6-speed manual transmission";
				}
				else if(transmission.contains("3-SPEED") || transmission.contains("3-SPD") || transmission.contains("3 SPD"))
				{
					transmission="3-speed manual transmission";
				}
				else if(transmission.contains("7-SPEED") || transmission.contains("7-SPD") || transmission.contains("7 SPD"))
				{
					transmission="7-speed manual transmission";
				}
				else 
				{
					transmission="manual transmission";
				}
			}
			else if(transmission.contains("AUTO"))
			{
				if(transmission.contains("4 SPEED") || transmission.contains("4-SPEED") || transmission.contains("4 SPD"))
				{
					transmission="4-speed automatic transmission";
				}
				else if(transmission.contains("3 SPEED") || transmission.contains("3-SPEED") || transmission.contains("3 SPD"))
				{
					transmission="3-speed automatic transmission";
				}
				else if(transmission.contains("5 SPEED") || transmission.contains("5-SPEED") || transmission.contains("5 SPD"))
				{
					transmission="5-speed automatic transmission";
				}
				else if(transmission.contains("6 SPEED") || transmission.contains("6-SPEED") || transmission.contains("6 SPD"))
				{
					transmission="6-speed automatic transmission";
				}
				else if(transmission.contains("8 SPEED") || transmission.contains("8-SPEED") || transmission.contains("8 SPD"))
				{
					transmission="8-speed automatic transmission";
				}
				else if(transmission.contains("9 SPEED") || transmission.contains("9-SPEED") || transmission.contains("9 SPD"))
				{
					transmission="9-speed automatic transmission";
				}
				else 
				{
					transmission="automatic transmission";
				}
			}
		}

		if(mhm.containsKey("TT"))
		{
			List<?> listDriveType = (List<?>) mhm.get("TT");
			String dt=listDriveType.get(0).toString();
			driveType=listDriveType.get(1).toString();
			if(dt.contains("FWD"))
			{
				driveType="Front wheel drive";
			}
			else if (dt.contains("AWD")) 
			{
				driveType="All wheel drive";
			}
			else if (dt.contains("RWD")) 
			{
				driveType="Rear wheel drive";
			}
			else if (dt.contains("4WD")) 
			{
				driveType="4 wheel drive";
			}
			else if (dt.contains("2WD")) 
			{
				driveType="2 wheel drive";
			}
		}

		Pattern pPS=Pattern.compile("([0-9]{2,}[HP])\\w|([0-9]{2,}\\s[HP])\\w");
		if(engine !=null)
		{
			Matcher mPS=pPS.matcher(engine);
			if(mPS.find())
			{
				PS=mPS.group();
				PS=PS.replace("HP", "").trim();
				double divider=1.36;
				int psint=Integer.parseInt(PS);
				double kw=psint/divider;
				int kwint=(int) Math.round(kw);
				kW=Integer.toString(kwint);
			}
		}


		else if(mhm.containsKey("KW"))
		{
			List<?> listKW = (List<?>) mhm.get("KW");
			kW=listKW.get(0).toString();
			double multiplier=1.36;
			int kwint=Integer.parseInt(kW);
			double ps=kwint*multiplier;
			int psint=(int) Math.round(ps);
			PS=Integer.toString(psint);
		}

		if(mhm.containsKey("CMB"))
		{
			List<?> listFuel = (List<?>) mhm.get("CMB");
			fuelType=listFuel.get(1).toString();
			if(fuelType.contains("DIESEL"))
			{
				fuelType="Diesel";
			}
			else if(fuelType.contains("PETROL"))
			{
				fuelType="Petrol";
			}
		}

		if(mhm.containsKey("G"))
		{
			List<?> listDriveSide = (List<?>) mhm.get("G");
			driveSide=listDriveSide.get(1).toString();
			if(driveSide.contains("LEFT"))
			{
				driveSide="Left hand drive";
			}
			else if (driveSide.contains("RIGHT")) 
			{
				driveSide="Right hand drive";
			}
		}

		if(mhm.containsKey("COLEST"))
		{
			List<?> listExCol = (List<?>) mhm.get("COLEST");
			extColorCode=listExCol.get(0).toString();
			String aext=listExCol.get(1).toString();

			if(aext.contains("Exterior color"))
			{
				exteriorColor=aext.replace("Exterior color ", "").replace("(", "").replace(")", "").trim();
			}

			else if(aext.contains("Colore Esterno"))
			{
				exteriorColor=aext.replace("Colore Esterno ", "").replace("(", "").replace(")", "").trim();
			}
		}

		if(mhm.containsKey("COLINT"))
		{
			List<?> listIntCol = (List<?>) mhm.get("COLINT");
			upholIntCode=listIntCol.get(0).toString();
			String aint=listIntCol.get(1).toString();
			if(aint.contains("Interior color"))
			{
				interiorColor=aint.replace("Interior color ", "").replace("(", "").replace(")", "").trim();
			}

			else if(aint.contains("Colore Interno"))
			{
				interiorColor=aint.replace("Colore Interno ", "").replace("(", "").replace(")", "").trim();
			}
		}

		if(mhm.containsKey("ALMC"))
		{
			List<?> listAlmc = (List<?>) mhm.get("ALMC");
			//			String almcCode=listAlmc.get(0).toString();
			String almc=listAlmc.get(1).toString();
			marketTrimLevel=almc.replace("COMMERCIAL MARKET VERSION", "").replace("(", "").replace(")", "").trim();

		}
		if(mhm.containsKey("C_BS"))
		{
			List<?> listBs = (List<?>) mhm.get("C_BS");
			bodyStyleCode=listBs.get(0).toString();
		}

		if(mhm.containsKey("AM"))
		{
			List<?> listAm = (List<?>) mhm.get("AM");
			String mar=listAm.get(1).toString();
			marketVer=mar.replace("MARKET VERSION", "").replace("(", "").replace(")", "").trim();

		}

		if(mhm.containsKey("ECO"))
		{
			List<?> listEco = (List<?>) mhm.get("ECO");
			String eco=listEco.get(1).toString();
			ecology=eco.replace("ECOLOGY", "").replace("(", "").replace(")", "").trim();
		}


		//EQUIPMENT DATA

		String equipLancia="";
		String optionsLancia=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String at,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				at=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(2);
				d=cell2.getTextContent();

				FiatEquip eq=new FiatEquip();
				String attribute=eq.setAttr(at);
				String description=eq.setDesc(d);

				equipLancia=equipLancia+attribute+"::"+description+";";
				//equipFiat=equipFiat+attribute+"::"+group+"::"+description+";";
				equipLancia=equipLancia.replaceAll("\\s+"," ");
			}
		}

		if(equipLancia.contains("005::5 SPEED GEARBOX�"))
		{
			transmission="5 speed transmission";
		}

		HtmlAnchor anLan=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
		String lana=anLan.getAttribute("title");
		partsMapModel=lana.substring(lana.indexOf(":")+1, lana.length()).trim().replaceAll("\\s+", " ").replace(" -", "");


		String optEquip=null;

		insertIntoGenVehTable(equipLancia, optEquip, optionsLancia);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}


	public static void alfaromeo() throws Exception
	{
		make="Alfa Romeo";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		List<HtmlTableRow> vehRows=vehTable.getRows(); 		

		MultiHashMap mhm=new MultiHashMap();

		List<HtmlTableRow> subVehRows=vehRows.subList(8, vehRows.size());
		String td1,td2,td3;
		for(HtmlTableRow tr:subVehRows)
		{
			td1=tr.getCell(0).getTextContent();			
			td2=tr.getCell(1).getTextContent();			
			td3=tr.getCell(2).getTextContent();			

			String attribute=td1;
			String codeValue=td2;
			String description=td3;

			allfieldsFARJL=allfieldsFARJL+attribute+"::"+codeValue+"::"+description+";";
			allfieldsFARJL=allfieldsFARJL.replaceAll("\\s+"," ");

			mhm.put(td1, td2);
			mhm.put(td1, td3);

		}

		for (HtmlTableRow tr : vehRows) 
		{
			for (HtmlTableCell td : tr.getCells()) 
			{
				HtmlTableCell viN = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[1]/td[2]");
				str1=viN.asText();

				String str=null;
				HtmlTableCell tb=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[1]");
				str=tb.asText();

				if(str.equals("Model"))
				{
					HtmlTableCell mod = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[2]");
					str2=mod.asText();
				}

				HtmlTableCell dop = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[4]/td[2]");
				str3=dop.asText();
				HtmlTableCell sow = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[5]/td[2]");
				str4=sow.asText();
				HtmlTableCell engNo = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[7]/td[2]");
				str5=engNo.asText();
				HtmlTableCell carBody = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[8]/td[2]");
				str6=carBody.asText();	

				HtmlTableCell mod1 = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[2]/td[2]");
				str7=mod1.asText();

				HtmlTableCell cha = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[6]/td[2]");
				str8=cha.asText();
			}
		}

		FiatVehicle v=new FiatVehicle();
		vinNo=v.setVin(str1);

		String modTest=null;
		modTest=v.setModel(str2);
		model1FARJL=str7;
		model2FARJL=str2;
		chassisFARJL=str8;

		String[] splitSt=null;		
		Pattern p=Pattern.compile("([0-9][.][0-9])");
		Matcher m=p.matcher(modTest);
		if(m.find())
		{
			engineCapacity=m.group();
			splitSt=modTest.split(m.group());
			model=splitSt[0];
			engine=m.group()+splitSt[1];
		}

		if(mhm.containsKey("CC"))
		{
			List<?> listCC = (List<?>) mhm.get("CC");
			engineCapacity=listCC.get(0).toString();
		}

		engineCapacity=engineCapacity.replace(".", "");
		engineCapacity=engineCapacity+"00";
		if(str3!=null && !str3.trim().equals(""))
		{
			Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(str3.trim());
			String a=date1.toString();
			String[] b=a.split(" ");
			dateOfProd=b[1]+" "+b[2]+", "+b[5];	

			if(!dateOfProd.equals(""))
			{
				String[] splitYr=dateOfProd.split(",");
				yearOfProd=splitYr[1].trim();
			}
		}
		if(mhm.containsKey("P"))
		{
			List<?> listDoors = (List<?>) mhm.get("P");
			doors=listDoors.get(0).toString();
		}

		engineNo=v.setEngNo(str5);
		carBody=v.setCarBody(str6);
		startOfWarr=v.setSow(str4);


		if(mhm.containsKey("C_TRA"))
		{
			List<?> listTrans = (List<?>) mhm.get("C_TRA");
			transCode=listTrans.get(0).toString();
			transmission=listTrans.get(1).toString();
			if(transmission.contains("MANUAL"))
			{
				if(transmission.contains("5-SPEED") || transmission.contains("5-SPD") || transmission.contains("5 SPD"))
				{
					transmission="5-speed manual transmission";
				}
				else if(transmission.contains("4-SPEED") || transmission.contains("4-SPD") || transmission.contains("4 SPD"))
				{
					transmission="4-speed manual transmission";
				}
				else if(transmission.contains("6-SPEED") || transmission.contains("6-SPD") || transmission.contains("6 SPD"))
				{
					transmission="6-speed manual transmission";
				}
				else if(transmission.contains("3-SPEED") || transmission.contains("3-SPD") || transmission.contains("3 SPD"))
				{
					transmission="3-speed manual transmission";
				}
				else if(transmission.contains("7-SPEED") || transmission.contains("7-SPD") || transmission.contains("7 SPD"))
				{
					transmission="7-speed manual transmission";
				}
				else 
				{
					transmission="manual transmission";
				}
			}
			else if(transmission.contains("AUTO"))
			{
				if(transmission.contains("4 SPEED") || transmission.contains("4-SPEED") || transmission.contains("4 SPD"))
				{
					transmission="4-speed automatic transmission";
				}
				else if(transmission.contains("3 SPEED") || transmission.contains("3-SPEED") || transmission.contains("3 SPD"))
				{
					transmission="3-speed automatic transmission";
				}
				else if(transmission.contains("5 SPEED") || transmission.contains("5-SPEED") || transmission.contains("5 SPD"))
				{
					transmission="5-speed automatic transmission";
				}
				else if(transmission.contains("6 SPEED") || transmission.contains("6-SPEED") || transmission.contains("6 SPD"))
				{
					transmission="6-speed automatic transmission";
				}
				else if(transmission.contains("8 SPEED") || transmission.contains("8-SPEED") || transmission.contains("8 SPD"))
				{
					transmission="8-speed automatic transmission";
				}
				else if(transmission.contains("9 SPEED") || transmission.contains("9-SPEED") || transmission.contains("9 SPD"))
				{
					transmission="9-speed automatic transmission";
				}
				else 
				{
					transmission="automatic transmission";
				}
			}
		}

		if(mhm.containsKey("TT"))
		{
			List<?> listDriveType = (List<?>) mhm.get("TT");
			String dt=listDriveType.get(0).toString();
			driveType=listDriveType.get(1).toString();
			if(dt.contains("FWD"))
			{
				driveType="Front wheel drive";
			}
			else if (dt.contains("AWD")) 
			{
				driveType="All wheel drive";
			}
			else if (dt.contains("RWD")) 
			{
				driveType="Rear wheel drive";
			}
			else if (dt.contains("4WD")) 
			{
				driveType="4 wheel drive";
			}
			else if (dt.contains("2WD") ||  dt.contains("2 WHEEL DRIVE")) 
			{
				driveType="2 wheel drive";
			}

		}
		else if (engine!=null && engine.contains("4X4")) 
		{
			driveType="4 wheel drive";
		}
		else if (engine!=null && engine.contains("4X2")) 
		{
			driveType="2 wheel drive";
		}

		Pattern pPS=Pattern.compile("([0-9]{2,}[HP])\\w|([0-9]{2,}\\s[HP])\\w");
		if(engine !=null)
		{
			Matcher mPS=pPS.matcher(engine);
			if(mPS.find())
			{
				PS=mPS.group();
				PS=PS.replace("HP", "").trim();
				double divider=1.36;
				int psint=Integer.parseInt(PS);
				double kw=psint/divider;
				int kwint=(int) Math.round(kw);
				kW=Integer.toString(kwint);
			}
		}

		else if(mhm.containsKey("KW"))
		{
			List<?> listKW = (List<?>) mhm.get("KW");
			kW=listKW.get(0).toString();
			double multiplier=1.36;
			int kwint=Integer.parseInt(kW);
			double ps=kwint*multiplier;
			int psint=(int) Math.round(ps);
			PS=Integer.toString(psint);
		}

		Pattern pPS1=Pattern.compile("([0-9]{2,}[CV])\\w");
		if(engine !=null)
		{
			Matcher mPS1=pPS1.matcher(engine);
			if(mPS1.find())
			{
				PS=mPS1.group();
				PS=PS.replace("CV", "").trim();
				double divider=1.36;
				int psint=Integer.parseInt(PS);
				double kw=psint/divider;
				int kwint=(int) Math.round(kw);
				kW=Integer.toString(kwint);
			}
		}

		if(mhm.containsKey("CMB"))
		{
			List<?> listFuel = (List<?>) mhm.get("CMB");
			fuelType=listFuel.get(1).toString();
			if(fuelType.contains("DIESEL"))
			{
				fuelType="Diesel";
			}
			else if(fuelType.contains("PETROL"))
			{
				fuelType="Petrol";
			}
		}

		if(mhm.containsKey("G"))
		{
			List<?> listDriveSide = (List<?>) mhm.get("G");
			driveSide=listDriveSide.get(1).toString();
			if(driveSide.contains("LEFT"))
			{
				driveSide="Left hand drive";
			}
			else if (driveSide.contains("RIGHT")) 
			{
				driveSide="Right hand drive";
			}
		}

		if(mhm.containsKey("COLEST"))
		{
			List<?> listExCol = (List<?>) mhm.get("COLEST");
			extColorCode=listExCol.get(0).toString();
			String aext=listExCol.get(1).toString();

			if(aext.contains("Exterior color"))
			{
				exteriorColor=aext.replace("Exterior color ", "").replace("(", "").replace(")", "").trim();
			}

			else if(aext.contains("Colore Esterno"))
			{
				exteriorColor=aext.replace("Colore Esterno ", "").replace("(", "").replace(")", "").trim();
			}
		}

		if(mhm.containsKey("COLINT"))
		{
			List<?> listIntCol = (List<?>) mhm.get("COLINT");
			upholIntCode=listIntCol.get(0).toString();
			String aint=listIntCol.get(1).toString();
			if(aint.contains("Interior color"))
			{
				interiorColor=aint.replace("Interior color ", "").replace("(", "").replace(")", "").trim();
			}

			else if(aint.contains("Colore Interno"))
			{
				interiorColor=aint.replace("Colore Interno ", "").replace("(", "").replace(")", "").trim();
			}
		}

		if(mhm.containsKey("ALMC"))
		{
			List<?> listAlmc = (List<?>) mhm.get("ALMC");
			//			String almcCode=listAlmc.get(0).toString();
			String almc=listAlmc.get(1).toString();
			marketTrimLevel=almc.replace("COMMERCIAL MARKET VERSION", "").replace("(", "").replace(")", "").trim();

		}
		if(mhm.containsKey("C_BS"))
		{
			List<?> listBs = (List<?>) mhm.get("C_BS");
			bodyStyleCode=listBs.get(0).toString();
		}

		if(mhm.containsKey("AM"))
		{
			List<?> listAm = (List<?>) mhm.get("AM");
			String mar=listAm.get(1).toString();
			marketVer=mar.replace("MARKET VERSION", "").replace("(", "").replace(")", "").trim();

		}



		if(mhm.containsKey("ECO"))
		{
			List<?> listEco = (List<?>) mhm.get("ECO");
			String eco=listEco.get(1).toString();
			ecology=eco.replace("ECOLOGY", "").replace("(", "").replace(")", "").trim();
		}


		//EQUIPMENT DATA

		String equipAlfaRomeo="";
		String optionsAlfaRomeo=""; 
		if(htmlPage.asText().contains("Equipment"))
		{
			HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
			List<HtmlTableRow> equipRows=equipBody.getRows();
			String at,d;
			for(HtmlTableRow tr:equipRows) 
			{
				HtmlTableCell cell1=tr.getCell(0);
				at=cell1.getTextContent();
				HtmlTableCell cell2=tr.getCell(2);
				d=cell2.getTextContent();

				FiatEquip eq=new FiatEquip();
				String attribute=eq.setAttr(at);
				String description=eq.setDesc(d);

				equipAlfaRomeo=equipAlfaRomeo+attribute+"::"+description+";";
				//equipFiat=equipFiat+attribute+"::"+group+"::"+description+";";
				equipAlfaRomeo=equipAlfaRomeo.replaceAll("\\s+"," ");
			}
		}

		if(equipAlfaRomeo.contains("005::5 SPEED GEARBOX�"))
		{
			transmission="5 speed transmission";
		}

		HtmlAnchor anAlfa=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
		String alfaa=anAlfa.getAttribute("title");
		partsMapModel=alfaa.substring(alfaa.indexOf(":")+1, alfaa.length()).trim().replaceAll("\\s+", " ").replace(" -", "");

		String optEquip=null;

		insertIntoGenVehTable(equipAlfaRomeo, optEquip, optionsAlfaRomeo);

		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}


	public static void fiat() throws Exception
	{
		make="Fiat";

		HtmlTableBody vehTable=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody");
		if(vehTable != null)
		{
			List<HtmlTableRow> vehRows=vehTable.getRows(); 		

			MultiHashMap mhm=new MultiHashMap();

			List<HtmlTableRow> subVehRows=vehRows.subList(8, vehRows.size());
			String td1,td2,td3;
			for(HtmlTableRow tr:subVehRows)
			{		
				td1=tr.getCell(0).getTextContent();			
				td2=tr.getCell(1).getTextContent();		
				td3=tr.getCell(2).getTextContent();

				String attribute=td1;
				String codeValue=td2;
				String description=td3;

				allfieldsFARJL=allfieldsFARJL+attribute+"::"+codeValue+"::"+description+";";
				allfieldsFARJL=allfieldsFARJL.replaceAll("\\s+"," ");

				mhm.put(td1, td2);
				mhm.put(td1, td3);

			}

			for (HtmlTableRow tr : vehRows) 
			{
				for (HtmlTableCell td : tr.getCells()) 
				{
					HtmlTableCell viN = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[1]/td[2]");
					str1=viN.asText();

					String str=null;
					HtmlTableCell tb=htmlPage.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[1]");
					str=tb.asText();
					if(str.equals("Model"))
					{
						HtmlTableCell mod = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[3]/td[2]");
						str2=mod.asText();

					}

					HtmlTableCell dop = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[4]/td[2]");
					str3=dop.asText();
					HtmlTableCell sow = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[5]/td[2]");
					str4=sow.asText();
					HtmlTableCell engNo = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[7]/td[2]");
					str5=engNo.asText();
					HtmlTableCell carBody = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[8]/td[2]");
					str6=carBody.asText();

					HtmlTableCell mod1 = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[2]/td[2]");
					str7=mod1.asText();

					HtmlTableCell cha = td.getFirstByXPath("//*[@id='vinTabsGeneral']/table/tbody/tr[6]/td[2]");
					str8=cha.asText();
				}
			}

			FiatVehicle v=new FiatVehicle();
			vinNo=v.setVin(str1);

			String modTest=null;
			modTest=v.setModel(str2);
			model1FARJL=str7;
			model2FARJL=str2;
			chassisFARJL=str8;

			String[] splitSt=null;		
			Pattern p=Pattern.compile("([0-9][.][0-9])");
			Matcher m=p.matcher(modTest);
			if(m.find())
			{

				engineCapacity=m.group();
				splitSt=modTest.split(m.group());
				model=splitSt[0];
				engine=m.group()+splitSt[1];
			}

			engineCapacity=engineCapacity.replace(".", "");
			engineCapacity=engineCapacity+"00";
			if(str3!=null && !str3.trim().equals(""))
			{
				Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(str3.trim());
				String a=date1.toString();
				String[] b=a.split(" ");
				dateOfProd=b[1]+" "+b[2]+", "+b[5];	

				if(!dateOfProd.equals(""))
				{
					String[] splitYr=dateOfProd.split(",");
					yearOfProd=splitYr[1].trim();
				}
			}

			if(mhm.containsKey("P"))
			{
				List<?> listDoors = (List<?>) mhm.get("P");
				doors=listDoors.get(0).toString();
			}

			engineNo=v.setEngNo(str5);
			carBody=v.setCarBody(str6);
			startOfWarr=v.setSow(str4);


			if(mhm.containsKey("C_TRA"))
			{
				List<?> listTrans = (List<?>) mhm.get("C_TRA");
				transCode=listTrans.get(0).toString();
				transmission=listTrans.get(1).toString();
				if(transmission.contains("MANUAL"))
				{
					if(transmission.contains("5-SPEED") || transmission.contains("5-SPD") || transmission.contains("5 SPD"))
					{
						transmission="5-speed manual transmission";
					}
					else if(transmission.contains("4-SPEED") || transmission.contains("4-SPD") || transmission.contains("4 SPD"))
					{
						transmission="4-speed manual transmission";
					}
					else if(transmission.contains("6-SPEED") || transmission.contains("6-SPD") || transmission.contains("6 SPD"))
					{
						transmission="6-speed manual transmission";
					}
					else if(transmission.contains("3-SPEED") || transmission.contains("3-SPD") || transmission.contains("3 SPD"))
					{
						transmission="3-speed manual transmission";
					}
					else if(transmission.contains("7-SPEED") || transmission.contains("7-SPD") || transmission.contains("7 SPD"))
					{
						transmission="7-speed manual transmission";
					}
					else 
					{
						transmission="manual transmission";
					}
				}
				else if(transmission.contains("AUTO"))
				{
					if(transmission.contains("4 SPEED") || transmission.contains("4-SPEED") || transmission.contains("4 SPD"))
					{
						transmission="4-speed automatic transmission";
					}
					else if(transmission.contains("3 SPEED") || transmission.contains("3-SPEED") || transmission.contains("3 SPD"))
					{
						transmission="3-speed automatic transmission";
					}
					else if(transmission.contains("5 SPEED") || transmission.contains("5-SPEED") || transmission.contains("5 SPD"))
					{
						transmission="5-speed automatic transmission";
					}
					else if(transmission.contains("6 SPEED") || transmission.contains("6-SPEED") || transmission.contains("6 SPD"))
					{
						transmission="6-speed automatic transmission";
					}
					else if(transmission.contains("8 SPEED") || transmission.contains("8-SPEED") || transmission.contains("8 SPD"))
					{
						transmission="8-speed automatic transmission";
					}
					else if(transmission.contains("9 SPEED") || transmission.contains("9-SPEED") || transmission.contains("9 SPD"))
					{
						transmission="9-speed automatic transmission";
					}
					else 
					{
						transmission="automatic transmission";
					}
				}
			}

			if(mhm.containsKey("TT"))
			{
				List<?> listDriveType = (List<?>) mhm.get("TT");
				String dt=listDriveType.get(0).toString();
				driveType=listDriveType.get(1).toString();
				if(dt.contains("FWD"))
				{
					driveType="Front wheel drive";
				}
				else if (dt.contains("AWD")) 
				{
					driveType="All wheel drive";
				}
				else if (dt.contains("RWD")) 
				{
					driveType="Rear wheel drive";
				}
				else if (dt.contains("4WD")) 
				{
					driveType="4 wheel drive";
				}
				else if (dt.contains("2WD")) 
				{
					driveType="2 wheel drive";
				}
			}

			Pattern pPS=Pattern.compile("([0-9]{2,}[HP])\\w|([0-9]{2,}\\s[HP])\\w");
			if(engine != null)
			{
				Matcher mPS=pPS.matcher(engine);
				if(mPS.find())
				{
					PS=mPS.group();
					PS=PS.replace("HP", "").trim();
					double divider=1.36;
					int psint=Integer.parseInt(PS);
					double kw=psint/divider;
					int kwint=(int) Math.round(kw);
					kW=Integer.toString(kwint);
				}
			}


			else if(mhm.containsKey("KW"))
			{
				List<?> listKW = (List<?>) mhm.get("KW");
				kW=listKW.get(0).toString();
				double multiplier=1.36;
				int kwint=Integer.parseInt(kW);
				double ps=kwint*multiplier;
				int psint=(int) Math.round(ps);
				PS=Integer.toString(psint);
			}

			if(mhm.containsKey("CMB"))
			{
				List<?> listFuel = (List<?>) mhm.get("CMB");
				fuelType=listFuel.get(1).toString();
				if(fuelType.contains("DIESEL"))
				{
					fuelType="Diesel";
				}
				else if(fuelType.contains("PETROL"))
				{
					fuelType="Petrol";
				}
			}

			if(mhm.containsKey("G"))
			{
				List<?> listDriveSide = (List<?>) mhm.get("G");
				driveSide=listDriveSide.get(1).toString();
				if(driveSide.contains("LEFT"))
				{
					driveSide="Left hand drive";
				}
				else if (driveSide.contains("RIGHT")) 
				{
					driveSide="Right hand drive";
				}
			}

			if(mhm.containsKey("COLEST"))
			{
				List<?> listExCol = (List<?>) mhm.get("COLEST");
				extColorCode=listExCol.get(0).toString();
				String aext=listExCol.get(1).toString();

				if(aext.contains("Exterior color"))
				{
					exteriorColor=aext.replace("Exterior color ", "").replace("(", "").replace(")", "").trim();
				}

				else if(aext.contains("Colore Esterno"))
				{
					exteriorColor=aext.replace("Colore Esterno ", "").replace("(", "").replace(")", "").trim();
				}
			}

			if(mhm.containsKey("COLINT"))
			{
				List<?> listIntCol = (List<?>) mhm.get("COLINT");
				upholIntCode=listIntCol.get(0).toString();
				String aint=listIntCol.get(1).toString();
				if(aint.contains("Interior color"))
				{
					interiorColor=aint.replace("Interior color ", "").replace("(", "").replace(")", "").trim();
				}

				else if(aint.contains("Colore Interno"))
				{
					interiorColor=aint.replace("Colore Interno ", "").replace("(", "").replace(")", "").trim();
				}
			}

			if(mhm.containsKey("ALMC"))
			{
				List<?> listAlmc = (List<?>) mhm.get("ALMC");
				//				String almcCode=listAlmc.get(0).toString();
				String almc=listAlmc.get(1).toString();
				marketTrimLevel=almc.replace("COMMERCIAL MARKET VERSION", "").replace("(", "").replace(")", "").trim();

			}
			if(mhm.containsKey("C_BS"))
			{
				List<?> listBs = (List<?>) mhm.get("C_BS");
				bodyStyleCode=listBs.get(0).toString();
			}

			if(mhm.containsKey("AM"))
			{
				List<?> listAm = (List<?>) mhm.get("AM");
				String mar=listAm.get(1).toString();
				marketVer=mar.replace("MARKET VERSION", "").replace("(", "").replace(")", "").trim();

			}

			if(mhm.containsKey("ECO"))
			{
				List<?> listEco = (List<?>) mhm.get("ECO");
				String eco=listEco.get(1).toString();
				ecology=eco.replace("ECOLOGY", "").replace("(", "").replace(")", "").trim();
			}

			//EQUIPMENT DATA

			String equipFiat="";
			String optionsFiat=""; 
			if(htmlPage.asText().contains("Equipment"))
			{
				HtmlTableBody equipBody=htmlPage.getFirstByXPath("//*[@id='vinStandardEquipment']/table/tbody");
				List<HtmlTableRow> equipRows=equipBody.getRows();
				String at,d;
				for(HtmlTableRow tr:equipRows) 
				{
					HtmlTableCell cell1=tr.getCell(0);
					at=cell1.getTextContent();
					HtmlTableCell cell2=tr.getCell(2);
					d=cell2.getTextContent();

					FiatEquip eq=new FiatEquip();
					String attribute=eq.setAttr(at);
					String description=eq.setDesc(d);

					equipFiat=equipFiat+attribute+"::"+description+";";
					//equipFiat=equipFiat+attribute+"::"+group+"::"+description+";";
					equipFiat=equipFiat.replaceAll("\\s+"," ");
				}
			}

			if(equipFiat.contains("005::5 SPEED GEARBOX�"))
			{
				transmission="5 speed transmission";
			}

			HtmlAnchor anFi=htmlPage.getFirstByXPath("//*[@id=\"pl24breadcrumbs\"]/nobr[2]/a");
			String fiata=anFi.getAttribute("title");
			partsMapModel=fiata.substring(fiata.indexOf(":")+1, fiata.length()).trim().replaceAll("\\s+", " ").replace(" -", "");


			String optEquip=null;

			insertIntoGenVehTable(equipFiat, optEquip, optionsFiat);

		}
		else
		{
			IsFound2();
		}
		// portal button click to get back to welcome page to search next VIN
		gotoHomePage();

	}

	public static void checkApiDailyLimit(int ApiKeyId) throws Exception
	{
		String countquery_api = "select COUNT(*) as count from "+tableName+" where IsFound IN (1,2) and APIKeyId='"+ApiKeyId+"' "
				+ "AND CompanyId='"+companyId+"' AND (createdate LIKE CONCAT('%',DATE(NOW()),'%') or updatedate LIKE CONCAT('%',DATE(NOW()),'%'))";
		String dailylimitquery_api= "SELECT allowedDailyLimit FROM `oeservice_api_dailylimit` WHERE account_id='"+account_id+"' AND apikey_id='"+ApiKeyId+"'";
	
		Statement dailylimit_apist = connect.createStatement();
		ResultSet dailylimit_apiRS = dailylimit_apist.executeQuery(dailylimitquery_api);
		if (!dailylimit_apiRS.isBeforeFirst()) 
		{
		}
		else 
		{
			
			dailylimit_apiRS.beforeFirst();
			while(dailylimit_apiRS.next()) {
				dailylimit_api = dailylimit_apiRS.getInt("allowedDailyLimit");
			}
	
		Statement countapist = connect.createStatement();
		ResultSet countapiRS = countapist.executeQuery(countquery_api);
		if (!countapiRS.isBeforeFirst()) 
		{
		}
		else
		{	
			countapiRS.beforeFirst();
			while (countapiRS.next()) 
			{
				if(Thread.currentThread().getStackTrace()[2].getMethodName().toString()=="fetchAccount" || Thread.currentThread().getStackTrace()[2].getMethodName().toString()=="switchAccount") {
					System.out.println(ApiKeyId+"	  	|	"+countapiRS.getInt("count")+"		|	"+dailylimit_api);
				}
				if(countapiRS.getInt("count") > dailylimit_api)
				{
					 apilimitReached = true;
					 String allowedAPIKeyIdsArray[] = allowedAPIKeyIds.split(",");
					 List allowedapilist = new ArrayList(Arrays.asList(allowedAPIKeyIdsArray));
					 allowedapilist.remove(allowedapilist.indexOf(Integer.toString(ApiKeyId)));
					 allowedAPIKeyIds=String.join(",", allowedapilist);
//					 if(allowedAPIKeyIds.indexOf(String.valueOf(ApiKeyId))==0 && allowedAPIKeyIds.contains(",")) {
//						 
//						 allowedAPIKeyIds=allowedAPIKeyIds.replace(String.valueOf(ApiKeyId)+",", "");
//					 }
//					 else if(!allowedAPIKeyIds.contains(",")) {
//						 allowedAPIKeyIds=allowedAPIKeyIds.replace(String.valueOf(ApiKeyId), "");
//					 }
//					 else {
//						 allowedAPIKeyIds=allowedAPIKeyIds.replace(","+String.valueOf(ApiKeyId), "");
//					 }
					
				}
			}
		}
		countapist.close();
		}
	
		dailylimit_apist.close();
	}
	
	public static void fetchAccount() throws Exception
	{
		String query="select * from oeservice_acs where active='Y' and `oesId`='"+oesId+"'";
		statement = connect.createStatement();
		rs = statement.executeQuery(query);
		int count = 0;
		rowCount=0;
		while(rs.next())
		{
			count = count + 1;
			if(companyId==null)
			{
				account_id = rs.getInt("id");
				companyId = rs.getString("companyId"); 
				username = rs.getString("username"); 
				password = rs.getString("password"); 
				allowedAPIKeyIds = rs.getString("allowedAPIKeyIds"); 
				allowedAPIKeyIdsOrg = rs.getString("allowedAPIKeyIds"); 
				allowedDailyLimit = rs.getInt("allowedDailyLimit"); 
				delayTimeInSeconds = rs.getInt("delayTimeInSeconds"); 
				vinsPerSession = rs.getInt("vinsPerSession"); 
				tableName = rs.getString("tableName"); 
				serverId = rs.getString("serverId"); 
				accountNo=count;
			}	

			lastAccountNo=count;
			rowCount++;
		}
		System.out.println("APIKeyId	|	Counts		|	APIDailyLimit");
		String allowedAPIKeyIdsArray[] = allowedAPIKeyIds.split(",");
		for(int index=0; index < allowedAPIKeyIdsArray.length; index++) {
			checkApiDailyLimit(Integer.parseInt((allowedAPIKeyIdsArray[index])));
		}
	}


	public static void HandleForbidden() throws Exception 
	{
		System.out.println("Forbidden");

		webClient.getCookieManager().clearCookies();
		System.out.println("Cookies Are removed");

		webClient.close();
		webClient.getCache().clear();

		switchAccount();

		login("https://www.partslink24.com/partslink24/user/login.do");
	}


	public static void HandleInternalServer() throws Exception
	{
		System.out.println("Internal Server Error");

		IsFound2();
	}


	public static void noDataFound() throws Exception 
	{
		if(Service.equals("LR")) {
			 HtmlAnchor linkNtFnd1 = htmlPage.getFirstByXPath("/html/body/div[@id='navbar']/div[@id='breadcrumbs']/div[1]/a");
			 if(linkNtFnd1 != null) 
				{
					htmlPage = linkNtFnd1.click();
				}
		}
		else {
			HtmlButton btnNtFnd = htmlPage.getFirstByXPath("/html/body/div[6]/div[3]/div/button|/html/body/div[5]/div[3]/div/button");
			if(btnNtFnd != null) 
			{
				htmlPage = btnNtFnd.click();
			}
		}

		portalSelection();

		System.out.println("BACK TO WELCOME PAGE::::");

	}


	public static void IsFound2() throws Exception{
		enddate = new Date();
		endtime = enddate.getTime();

		long timedifference = endtime - starttime;
		timedifference = timedifference/1000;

		String updQuery = "update "+tableName+" set IsFound=2,CompanyId='"+companyId+"',ServerId='"+serverId+"',ActualTime = '"+timedifference+"' where VINNumber='" + vin + "'";
		PreparedStatement ps = connect.prepareStatement(updQuery);
		ps.executeUpdate();
		System.out.println("Vehicle data inserted successfully::" + "Time taken::" + timedifference + "second");

		gotoHomePage();
	}

	public static void IsFound1() throws Exception{
		enddate = new Date();
		endtime = enddate.getTime();

		long timedifference = endtime - starttime;
		timedifference = timedifference/1000;

		String updQuery = "update "+tableName+" set IsFound=1,CompanyId='"+companyId+"',ServerId='"+serverId+"',ActualTime = '"+timedifference+"' where VINNumber='" + vin + "'";
		PreparedStatement ps = connect.prepareStatement(updQuery);
		ps.executeUpdate();
		System.out.println("Vehicle data inserted successfully::" + "Time taken::" + timedifference + "second");

		gotoHomePage();
	}

	public static void IsFound3() throws Exception{
		enddate = new Date();
		endtime = enddate.getTime();

		long timedifference = endtime - starttime;
		timedifference = timedifference/1000;

		String updQuery = "update "+tableName+" set IsFound=3,CompanyId='"+companyId+"',ServerId='"+serverId+"',ActualTime = '"+timedifference+"' where VINNumber='" + vin + "'";
		PreparedStatement ps = connect.prepareStatement(updQuery);
		ps.executeUpdate();
		System.out.println("Vehicle data inserted successfully::" + "Time taken::" + timedifference + "second");

		gotoHomePage();
	}

	public static void portalSelection() throws Exception //to go back to main page clicking portal button of respective car brand
	{
		boolean brandIconVisible = false;
		String link = "";
		gotoHomePage();
		if (htmlPage.asText().toLowerCase().contains("error 403")) 
		{
			HandleForbidden();
		} 
		else if(htmlPage.asText().toLowerCase().contains("error 500")) {
			HandleInternalServer();
		} 
		else if(Title != null) 
		{			
			HtmlDivision branddiv = htmlPage.getFirstByXPath("//*[@id=\"brands-container-inner\"]");
			if(branddiv != null) {
				List<HtmlElement> list = branddiv.getElementsByTagName("a");
				if(list != null) {
					for (HtmlElement element : list) 
					{
						link = element.getAttribute("href");
						String title = element.getAttribute("title");

						if(title != null && title.toLowerCase().equals(Title.toLowerCase())) 
						{
							htmlPage = webClient.getPage("https://www.partslink24.com/"+link);
							brandIconVisible = true;
							break;
						}
					}	
				}
			}
		} 
		else 
		{
			if(Service!=null && Service.equals("MER"))
			{
				//CLICK BRAND ICON ACCORDING TO VDS FOR CAR,VAN,TRUCK,UNIMOG

				String pos=vin.substring(3, 6);
				System.out.println(pos);

				//car
				if(pos.equals("245") || pos.equals("246") || pos.equals("201") || pos.equals("202") || pos.equals("203") || pos.equals("204") 
						|| pos.equals("205") || pos.equals("124") || pos.equals("210") || pos.equals("211") || pos.equals("212") || pos.equals("213") 
						|| pos.equals("207") || pos.equals("126") || pos.equals("140") || pos.equals("220") || pos.equals("221") || pos.equals("222") 
						|| pos.equals("217") || pos.equals("117") || pos.equals("219") || pos.equals("218") || pos.equals("257") || pos.equals("208") 
						|| pos.equals("209") || pos.equals("238") || pos.equals("215") || pos.equals("216") || pos.equals("170") || pos.equals("171") 
						|| pos.equals("172") || pos.equals("129") || pos.equals("230") || pos.equals("231") || pos.equals("197") || pos.equals("199") 
						|| pos.equals("297") || pos.equals("123") || pos.equals("102") || pos.equals("107") || pos.equals("190") || pos.equals("163")
						|| pos.equals("253") || pos.equals("156") || pos.equals("164") || pos.equals("166") || pos.equals("292") || pos.equals("168")
						|| pos.equals("607") || pos.equals("463") || pos.equals("461"))
				{
					// HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[22]/a");
					HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[24]/a");
					if(brandAnchor != null)
					{
						htmlPage=brandAnchor.click();
						link = brandAnchor.getAttribute("href");
						brandIconVisible = true;
					}
				}
				//van
				else if(pos.equals("414") || pos.equals("251") || pos.equals("415") || pos.equals("100") || pos.equals("638") 
						|| pos.equals("639") || pos.equals("901") || pos.equals("902") || pos.equals("903") || pos.equals("904") 
						|| pos.equals("905") || pos.equals("906") || pos.equals("670") || pos.equals("447")  ||  pos.equals("602")
						|| pos.equals("907") || pos.equals("910") || pos.equals("601") || pos.equals("611") || pos.equals("631"))
				{
					// HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[25]/a"); 
					HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[27]/a"); 
					if(brandAnchor != null)
					{
						htmlPage=brandAnchor.click();
						link = brandAnchor.getAttribute("href");
						brandIconVisible = true;
					}
				}
				//truck
				else if(pos.equals("470") ||  pos.equals("930") ||  pos.equals("933") ||  pos.equals("934") ||  pos.equals("944")
						||  pos.equals("950") ||  pos.equals("954") ||  pos.equals("957") ||  pos.equals("963") 
						||  pos.equals("964") ||  pos.equals("970") ||  pos.equals("976"))
				{
					// HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[23]/a");
					HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[25]/a"); 
					if(brandAnchor != null)
					{
						htmlPage=brandAnchor.click();
						link = brandAnchor.getAttribute("href");
						brandIconVisible = true;
					}
				}
				//unimog
				else if(pos.equals("435") || pos.equals("437"))
				{
					// HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[24]/a");
					HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[26]/a");
					if(brandAnchor != null)
					{
						htmlPage=brandAnchor.click();
						link = brandAnchor.getAttribute("href");
						brandIconVisible = true;
					}
				}
			}	
			else if(Service!=null && Service.equals("FAT"))
			{
				char ch=vin.charAt(3);
				System.out.println(ch);

				if(ch=='3' || ch=='1')
				{
					HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[11]/a");
					if(brandAnchor != null)
					{
						htmlPage=brandAnchor.click();
						link = brandAnchor.getAttribute("href");
						brandIconVisible = true;
					}
				}
				else
				{
					HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id='brands-container-inner']/div[12]/a");
					if(brandAnchor != null)
					{
						htmlPage=brandAnchor.click();
						link = brandAnchor.getAttribute("href");
						brandIconVisible = true;
					}
				}

			}
			else if(Service!=null && Service.equals("POR"))
			{
				String pos1=vin.substring(6, 8);
				String pos2=vin.substring(11, 12);
				String pos3=pos1+pos2;
				System.out.println(pos3);
				if(pos3.equals("996") || pos3.equals("993") || pos3.equals("968") || pos3.equals("964") || pos3.equals("959") || pos3.equals("944") 
						|| pos3.equals("928") || pos3.equals("924") || pos3.equals("914") || pos3.equals("911") || pos3.equals("912") || pos3.equals("986") 
						|| pos3.equals("356"))
				{
					// HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id=\"brands-container-inner\"]/div[32]/a"); 
					HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id=\"brands-container-inner\"]/div[34]/a"); 
					if(brandAnchor != null)
					{
						htmlPage=brandAnchor.click();
						link = brandAnchor.getAttribute("href");
						brandIconVisible = true;
					}
				}
				else 
				{
					// HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id=\"brands-container-inner\"]/div[31]/a"); 
					HtmlAnchor brandAnchor=htmlPage.getFirstByXPath("//*[@id=\"brands-container-inner\"]/div[33]/a"); 
					if(brandAnchor != null)
					{
						htmlPage=brandAnchor.click();
						link = brandAnchor.getAttribute("href");
						brandIconVisible = true;
					}
				}
			}
			else 
			{
				IsFound2();
			}
		}
		if(brandIconVisible) 
		{
			if (htmlPage.asText().toLowerCase().contains("error 403")) 
			{
				HandleForbidden();
			} 
			else if(htmlPage.asText().toLowerCase().contains("error 500")) {
				HandleInternalServer();
			} 
			else 
			{
				if (htmlPage.asText().toLowerCase().contains("error 502")) 
				{
					gotoHomePage();

					htmlPage = webClient.getPage("https://www.partslink24.com/"+link);
				}
				if(Service.equals("LR")) {
					System.out.println("No Data Found::");
					IsFound2();
//					HtmlInput searchInput=htmlPage.getFirstByXPath("//*[@id='direct_entry']");
//					if(searchInput != null) 
//					{
//						//set vin as value in search textbox
//						searchInput.setValueAttribute(vin);
//						HtmlLabel goBtn=htmlPage.getFirstByXPath("//*[@id='vehicle_icon']");
//						HtmlPage htmlPage1=goBtn.click();
//						if(htmlPage1.asText().contains("There are no results for the specified search criteria.")) {
//							System.out.println("There are no results for the specified search criteria.");
//							IsFound2();
//						}else {
//							scrape();
//						}
//					}
//					else 
//					{
//						HtmlForm htmlForm2 = htmlPage.getFirstByXPath("//*[@id='pl24vinsearchform']");
//						htmlForm2.getInputByName("vin").setValueAttribute(vin);
//					}
				}else {
					
				
				//set vin as value in search textbox
				HtmlInput searchInput=htmlPage.getFirstByXPath("//*[@id='vin']");
				if(searchInput != null) 
				{
					//set vin as value in search textbox
					searchInput.setValueAttribute(vin);
				}
				else 
				{
					HtmlForm htmlForm2 = htmlPage.getFirstByXPath("//*[@id='pl24vinsearchform']");
					htmlForm2.getInputByName("vin").setValueAttribute(vin);
				}
				//click go button
				HtmlButton goBtn=htmlPage.getFirstByXPath("//*[@id='vinGo']");
				htmlPage=goBtn.click();
				String str = "";
				if(htmlPage.asText().contains("No data card available"))
				{
					System.out.println("No data card available:::::::");										
					IsFound2();						
				}
				if (htmlPage.asText().contains("No data was found for the searched vehicle identification number (VIN)")) 
				{
					System.out.println("NO DATA FOUND:::::::");


					IsFound2();
				} 
				else if(htmlPage.asText().contains("Service is currently unavailable. Please try again shortly."))
				{
					System.out.println("SERVICE CURRENTLY UNAVAILABLE:::::::");											
					serviceUnavail();								
				}

				else if(htmlPage.asText().contains("No model version available for this VIN"))
				{
					System.out.println("NO MODEL VERSION AVAILABLE:::::::");										
					noModelVersion();						
				}
				else if(htmlPage.getElementById("vinTabsGeneral") != null || 
						htmlPage.getElementById("vinDialog") != null)
				{
					scrape();
				}
				else 
				{
					if(htmlPage.asXml().contains("nav-modelTypeCandidates-container"))
					{
						HtmlTableCell tb=htmlPage.getFirstByXPath("//*[@id='nav-modelTypeCandidates-container']/div[1]/table/thead/tr/td[1]");
						str=tb.asText();
						System.out.println(str);
					}
					else if (htmlPage.asText().toLowerCase().contains("partnergroup"))
					{
						System.out.println("Page contains Partnergroup:::::");			
						HtmlAnchor partgrp=null;				
						if(htmlPage.asText().contains("Nordic") && htmlPage.getAnchorByText("Nordic") != null)
						{
							partgrp=htmlPage.getAnchorByText("Nordic");
						}
						else if(htmlPage.asText().contains("Europe") && htmlPage.getAnchorByText("Europe") != null)
						{
							partgrp=htmlPage.getAnchorByText("Europe");
						}
						else if(htmlPage.asText().contains("International") && htmlPage.getAnchorByText("International") != null)
						{
							partgrp=htmlPage.getAnchorByText("International");
						}	
						else
						{
							HtmlElement partgrptbl = htmlPage.querySelector(".tc-table");
							if(partgrptbl != null)
							{
								HtmlElement partgrpbody = partgrptbl.querySelector("tbody");
								if(partgrpbody != null)
								{
									partgrp = partgrptbl.querySelector("td");
								}
							}
						}

						if(partgrp != null)
						{
							htmlPage = partgrp.click();
						}

						scrape();
					}
					else if (htmlPage.asText().contains("Prefix"))
					{
						HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-types-table0']/td[1]/a");
						if(restrict1 != null)
						{
							htmlPage = restrict1.click();
						}

						scrape();
					}
					else if (htmlPage.asText().contains("Assortment"))
					{
						HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-identCandidates-table0']/td[1]/a");
						if(restrict1 != null)
						{
							htmlPage = restrict1.click();
						}

						scrape();
					}
					else if (htmlPage.asText().contains("Product group"))
					{
						HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-identCandidates-table0']/td[1]/a");
						if(restrict1 != null)
						{
							htmlPage = restrict1.click();
						}

						scrape();
					}
					else if (str.equals("Model"))
					{
						HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-modelTypeCandidates-table0']/td[1]/a");
						if(restrict1 != null)
						{
							htmlPage = restrict1.click();
						}
						scrape();
					}
					else if (htmlPage.asText().contains("Restrictions I"))
					{
						HtmlAnchor restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-restriction1-table0']/td/a");
						if(restrict1 != null)
						{
							htmlPage = restrict1.click();
						}
						else 
						{
							restrict1 = htmlPage.getFirstByXPath("//*[@id='_nav-restriction1-table0']/td[1]/a");
							if(restrict1 != null)
							{
								htmlPage = restrict1.click();
							}
						}

						scrape();
					}
					else
					{
						scrape();
					}
				}
			}
			}
		}
		else 
		{
			IsFound2();
		}
	}


	public static void gotoHomePage() throws Exception
	{
		htmlPage = webClient.getPage("https://www.partslink24.com/partslink24/user/brandMenu.do");
	}


	public static void switchAccount() throws Exception
	{
		String query="select * from oeservice_acs where active='Y' and `oesId`='"+oesId+"'";
		statement = connect.createStatement();
		rs = statement.executeQuery(query);	

		if (htmlPage.asText().toLowerCase().contains("log out")) 
		{
			// means not logged in then log in to site
			HtmlAnchor lgoutAnch=htmlPage.getAnchorByText("Log out");
			try 
			{
				htmlPage=lgoutAnch.click();
			} 
			catch (IOException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		int count = 0;
		while(rs.next())
		{
			count = count+1;
			lastAccountNo = count;
		}

		System.out.println("Logged out from the website successfully::::");
		System.out.println("In switch method::");
		System.out.println("In switch method Account no. value::"+accountNo);
		System.out.println("Row Count::"+rowCount);

		if(accountNo==lastAccountNo) //3==3
		{
			System.out.println("Rows are over.Start from 1st A/c::");

			rowCount=0;
			companyId = null;
			rs.beforeFirst();

			count = 0;
			while(rs.next())
			{
				count = count+1;
				System.out.println("Account no in while::"+rs.getInt("accountNo"));
				if(companyId==null)
				{
					account_id = rs.getInt("id");
					companyId=rs.getString("companyId"); 
					username=rs.getString("username"); 
					password=rs.getString("password"); 
					allowedAPIKeyIds = rs.getString("allowedAPIKeyIds"); 
					allowedAPIKeyIdsOrg = rs.getString("allowedAPIKeyIds"); 
					allowedDailyLimit = rs.getInt("allowedDailyLimit"); 
					delayTimeInSeconds = rs.getInt("delayTimeInSeconds"); 
					vinsPerSession = rs.getInt("vinsPerSession"); 
					accountNo=count;
				}	
				rowCount++;
			}
		}
		else
		{
			int accountno=accountNo;
			accountno++; 

			if(accountno > lastAccountNo)
			{
				rowCount=0;
				companyId = null;
				accountno = 1;
			}

			System.out.println("Account no after increment::"+accountno);
			rs.beforeFirst();
			count = 0;
			while(rs.next())
			{
				count = count + 1;
				if(count==accountno)
				{
					account_id = rs.getInt("id");
					companyId=rs.getString("companyId"); 
					username=rs.getString("username");
					password=rs.getString("password"); 
					allowedAPIKeyIds = rs.getString("allowedAPIKeyIds"); 
					allowedAPIKeyIdsOrg = rs.getString("allowedAPIKeyIds"); 
					allowedDailyLimit = rs.getInt("allowedDailyLimit"); 
					delayTimeInSeconds = rs.getInt("delayTimeInSeconds"); 
					vinsPerSession = rs.getInt("vinsPerSession"); 
					accountNo=count;				
				}			
			}
		}
		System.out.println("APIKeyId	|	Counts		|	APIDailyLimit");
		String allowedAPIKeyIdsArray[] = allowedAPIKeyIds.split(",");
		for(int index=0; index < allowedAPIKeyIdsArray.length; index++) {
			checkApiDailyLimit(Integer.parseInt((allowedAPIKeyIdsArray[index])));
		}
	}

//	private static void insertIntoLRVehTable(String vin, String make, String model, String VehicleLine, String DateOfProd, String EngineType, String Transmission,
//			String Emission, String CabStyle, String Drive, String DriveRatio, String ExteriorPaint,
//			String AirConditioning, String Series, String InteriorFabric, String Territories ) throws Exception {
//		try {
//			psVehLR.setString(1, vin);
//			psVehLR.setString(2, make);
//			psVehLR.setString(3, model);
//			psVehLR.setString(4, VehicleLine);
//			psVehLR.setString(5, DateOfProd);
//			psVehLR.setString(6, EngineType);
//			psVehLR.setString(7, Transmission);
//			psVehLR.setString(8, Emission);
//			psVehLR.setString(9, CabStyle);
//			psVehLR.setString(10, Drive);
//			psVehLR.setString(11, DriveRatio);
//			psVehLR.setString(12, ExteriorPaint);
//			psVehLR.setString(13, AirConditioning);
//			psVehLR.setString(14, Series);
//			psVehLR.setString(15, InteriorFabric);
//			psVehLR.setString(16, Territories);
//			psVehLR.setInt(17, apiKeyId);
//			psVehLR.executeUpdate();
//
//			IsFound1();
//
//			
//		}catch(SQLException e){
//			e.printStackTrace();
//		}
//	}
//	
	private static void insertIntoVagVehTable(String vin, String model, String partsMappingModel, String salesType, String colorEquip, String engineCode, String subModel, String transCode, 
			String axleCode, String dom, String equip, String roofCol, String carpetColCode, String extColPaintCode, String seatCombNo, String nOfZOrders, String spmod, String year, String prCodes,	
			String wmi, int apiKeyId) throws Exception 
	{
		try {
			psVagVeh = connect.prepareStatement("insert into vindata_entry(VIN,MODEL,PARTSMAPPINGMODEL,SALETYPE,COLOREQUIP,ENGINECODE,SUBMODEL,"
					+ "TRANSCODE,AXLECODE,DOM,EQUIPMENT,ROOFCOLOR,CARPETCOLORCODE,EXTCOLPAINTCODE,SEATCOMBNO,NOOFZORDERS,SPMOD,"
					+ "YEAR,PRCODES,WMI,APIKeyId) "
					+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");
			// TODO Auto-generated method stub
			psVagVeh.setString(1, vin);
			psVagVeh.setString(2, model);
			psVagVeh.setString(3, partsMappingModel);
			psVagVeh.setString(4, salesType);
			psVagVeh.setString(5, colorEquip);
			psVagVeh.setString(6, engineCode);
			psVagVeh.setString(7, subModel);
			psVagVeh.setString(8, transCode);
			psVagVeh.setString(9, axleCode);
			psVagVeh.setString(10, dom);
			psVagVeh.setString(11, equip);
			psVagVeh.setString(12, roofCol);
			psVagVeh.setString(13, carpetColCode);
			psVagVeh.setString(14, extColPaintCode);
			psVagVeh.setString(15, seatCombNo);
			psVagVeh.setString(16, nOfZOrders);
			psVagVeh.setString(17, spmod);
			psVagVeh.setString(18, year);
			psVagVeh.setString(19, prCodes);
			psVagVeh.setString(20, wmi);
			psVagVeh.setInt(21, apiKeyId);
			psVagVeh.executeUpdate();

			IsFound1();
		} catch (SQLException e) {
			psVagVehlog = connect.prepareStatement("insert into vindata_entry_log(VIN,MODEL,PARTSMAPPINGMODEL,SALETYPE,COLOREQUIP,ENGINECODE,SUBMODEL,"
					+ "TRANSCODE,AXLECODE,DOM,EQUIPMENT,ROOFCOLOR,CARPETCOLORCODE,EXTCOLPAINTCODE,SEATCOMBNO,NOOFZORDERS,SPMOD,"
					+ "YEAR,PRCODES,WMI,APIKeyId) "
					+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");
			// TODO Auto-generated method stub
			psVagVehlog.setString(1, vin);
			psVagVehlog.setString(2, model);
			psVagVehlog.setString(3, partsMappingModel);
			psVagVehlog.setString(4, salesType);
			psVagVehlog.setString(5, colorEquip);
			psVagVehlog.setString(6, engineCode);
			psVagVehlog.setString(7, subModel);
			psVagVehlog.setString(8, transCode);
			psVagVehlog.setString(9, axleCode);
			psVagVehlog.setString(10, dom);
			psVagVehlog.setString(11, equip);
			psVagVehlog.setString(12, roofCol);
			psVagVehlog.setString(13, carpetColCode);
			psVagVehlog.setString(14, extColPaintCode);
			psVagVehlog.setString(15, seatCombNo);
			psVagVehlog.setString(16, nOfZOrders);
			psVagVehlog.setString(17, spmod);
			psVagVehlog.setString(18, year);
			psVagVehlog.setString(19, prCodes);
			psVagVehlog.setString(20, wmi);
			psVagVehlog.setInt(21, apiKeyId);
			psVagVehlog.executeUpdate();

			IsFound1();
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}


	private static void insertIntoGenVehTable(String equipment, String optEquipment,String options)throws Exception 

	{
		psVehGen.setString(1, regNo);
		psVehGen.setString(2, vinNo);
		psVehGen.setString(3, make);
		psVehGen.setString(4, model);
		psVehGen.setString(5, partsMapModel);
		psVehGen.setString(6, engine);
		psVehGen.setString(7, transmission);
		psVehGen.setString(8, driveType);
		psVehGen.setString(9, bodyType);
		psVehGen.setString(10, orgBodyType);
		psVehGen.setString(11, kW);
		psVehGen.setString(12, PS);
		psVehGen.setString(13, engineCapacity);
		psVehGen.setString(14, fuelType);
		psVehGen.setString(15, fuelMixture);
		psVehGen.setString(16, yearOfProd);
		psVehGen.setString(17, dateOfProd);
		psVehGen.setString(18, doors);
		psVehGen.setString(19, grade);
		psVehGen.setString(20, driveSide);
		psVehGen.setString(21, weatherType);
		psVehGen.setString(22, exteriorColor);
		psVehGen.setString(23, interiorColor);
		psVehGen.setString(24, marketCode);
		psVehGen.setString(25, combNo);
		psVehGen.setString(26, engineNo);
		psVehGen.setString(27, engineCode);
		psVehGen.setString(28, transmissionNo);
		psVehGen.setString(29, transCode);
		psVehGen.setString(30, transmissionCode);
		psVehGen.setString(31, equipment);     
		psVehGen.setString(32, optEquipment);  
		psVehGen.setString(33, kmph);
		psVehGen.setString(34, factoryCode);
		psVehGen.setString(35, steerProdNo);
		psVehGen.setString(36, structureWeek);
		psVehGen.setString(37, type);
		psVehGen.setString(38, chassis);
		psVehGen.setString(39, partnerGroup);
		psVehGen.setString(40, upholIntCode);
		psVehGen.setString(41, extColorCode);
		psVehGen.setString(42, bodyStyleCode);
		psVehGen.setString(43, specialVehCode);
		psVehGen.setString(44, specialVeh);
		psVehGen.setString(45, salesTypeCode);
		psVehGen.setString(46, salesType);
		psVehGen.setString(47, market);
		psVehGen.setString(48, enginePartNo);
		psVehGen.setString(49, engineSerialNo);
		psVehGen.setString(50, transPartNo);
		psVehGen.setString(51, transSerialNo);
		psVehGen.setString(52, chassisCode);
		psVehGen.setString(53, options);     
		psVehGen.setString(54, modelDesignation);
		psVehGen.setString(55, series);
		psVehGen.setString(56, typeCode);
		psVehGen.setString(57, orderId);
		psVehGen.setString(58, motorNo);
		psVehGen.setString(59, euApprovDate);
		psVehGen.setString(60, euApprovNo);
		psVehGen.setString(61, salesTerm);
		psVehGen.setString(62, regDate);
		psVehGen.setString(63, packageCode);
		psVehGen.setString(64, engineType);
		psVehGen.setString(65, modelCode);
		psVehGen.setString(66, dam);
		psVehGen.setString(67, startOfWarr);
		psVehGen.setString(68, carBody);
		psVehGen.setString(69, prodType);
		psVehGen.setString(70, trimLevel);
		psVehGen.setString(71, speSpec);
		psVehGen.setString(72, modelYear);
		psVehGen.setString(73, modifDurModYear);
		psVehGen.setString(74, paintType);
		psVehGen.setString(75, intTrimType);
		psVehGen.setString(76, marketTrimLevel);
		psVehGen.setString(77, marketVer);
		psVehGen.setString(78, ecology);
		psVehGen.setString(79, posTerr);
		psVehGen.setString(80, emissReq);
		psVehGen.setString(81, airCond);
		psVehGen.setString(82, finalDriveRatio);
		psVehGen.setString(83, version);
		psVehGen.setString(84, wheelBase);
		psVehGen.setString(85, cabStyle);
		psVehGen.setString(86, intFabric);
		psVehGen.setString(87, prodFrom);
		psVehGen.setString(88, prodTo);
		psVehGen.setInt(89, apiKeyId);


		psVehGen.executeUpdate();

		IsFound1();
		insertIntoGenVehOrgTable();

	}



	private static void insertIntoGenVehOrgTable()throws Exception 
	{
		psVehGenOrg.setString(1, vinNo);
		psVehGenOrg.setString(2, make);
		psVehGenOrg.setString(3, modelOrg);
		psVehGenOrg.setString(4, engineOrg);
		psVehGenOrg.setString(5, transOrg);
		psVehGenOrg.setString(6, steeringOrg);
		psVehGenOrg.setString(7, transaxleOrg);
		psVehGenOrg.setString(8, distAreaOrg);
		psVehGenOrg.setString(9, driveBmwMini);
		psVehGenOrg.setString(10, liqCapBmwMini);
		psVehGenOrg.setString(11, ecKiaHyundai);
		psVehGenOrg.setString(12, aggMercSmart);
		psVehGenOrg.setString(13, vpdDataMercSmart);
		psVehGenOrg.setString(14, commMarCompTypeCitroenPeugeot);
		psVehGenOrg.setString(15, silhoutteCitroenPeugeot);
		psVehGenOrg.setString(16, gearboxInfiniti);
		psVehGenOrg.setString(17, classMitsubishi);
		psVehGenOrg.setString(18, optionMitsubishi);
		psVehGenOrg.setString(19, model1FARJL);
		psVehGenOrg.setString(20, model2FARJL);
		psVehGenOrg.setString(21, chassisFARJL);
		psVehGenOrg.setString(22, allfieldsFARJL);
		psVehGenOrg.setString(23, suspensionIveco);
		psVehGenOrg.setString(24, picIveco);
		psVehGenOrg.setString(25, vpIveco);
		psVehGenOrg.setString(26, cabinIveco);
		psVehGenOrg.setString(27, serialNosIveco);
		psVehGenOrg.setString(28, petMAN);
		psVehGenOrg.setString(29, descMAN);
		psVehGenOrg.setInt(30, apiKeyId);


		psVehGenOrg.executeUpdate();
	}


}
